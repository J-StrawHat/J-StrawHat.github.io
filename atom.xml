<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoyDee&#39;s Blog</title>
  
  
  <link href="https://j-strawhat.github.io/atom.xml" rel="self"/>
  
  <link href="https://j-strawhat.github.io/"/>
  <updated>2021-07-20T10:02:13.913Z</updated>
  <id>https://j-strawhat.github.io/</id>
  
  <author>
    <name>Joy Dee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络错题汇总</title>
    <link href="https://j-strawhat.github.io/posts/9e115195/"/>
    <id>https://j-strawhat.github.io/posts/9e115195/</id>
    <published>2021-06-18T13:00:00.000Z</published>
    <updated>2021-07-20T10:02:13.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chap-2-物理层"><a class="header-anchor" href="#Chap-2-物理层">¶</a>Chap 2. 物理层</h1><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619082114.png"/><ul><li><p>编码 -&gt; 基带调制</p></li><li><p>光纤分为多模光纤和单模光纤</p></li><li><p>奈奎斯特定理：理想低通信道下的极限数据传输率 = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>W</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>V</mi></mrow><annotation encoding="application/x-tex">2W\log_2{V}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span> 是带宽（单位：Hz），<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span> 表示每个码元离散电平的数目（比如16种码元，需要4位二进制位）</p></blockquote></li></ul><h1 id="Chap-3-数据链路层"><a class="header-anchor" href="#Chap-3-数据链路层">¶</a>Chap 3. 数据链路层</h1><ul><li><p>数据通信控制规程分为两类：面向字符的和面向字节的</p></li><li><p>网络接口卡（NIC）位于OSI模型的数据链路层</p></li><li><p>数据链路层的功能：</p><ul><li><p>为网络层提供服务</p></li><li><p><strong>链路管理</strong></p></li><li><p>帧定界、<strong>帧同步</strong>与透明传输</p><blockquote><p>帧同步：从收到的比特流中对无误地判断出一个帧从哪个比特开始以及到哪个比特结束。</p></blockquote></li><li><p><strong>流量控制</strong></p><blockquote><p>数据链路层：<strong>相邻结点</strong>间数据链路上的流量</p><p>运输层：从源端到目的端之间的流量</p></blockquote></li><li><p><strong>差错控制</strong></p><blockquote><p>采用循环冗余检验CRC发现位错，通过自动重传请求ARP来重传出错的帧</p></blockquote></li></ul></li><li><p>物理层使用的中间设备：中继器（又称<strong>转发器</strong>）、<strong>集线器</strong>；数据链路层使用的中间设备：<strong>网桥</strong>或桥接器</p><blockquote><p>中继器<strong>没有</strong>存储转发功能！它只是放大数字信号。</p><p>使用集线器能够在<strong>物理层</strong>拓展以太网，将信号放大，简单地<strong>转发</strong>比特，不能够分割冲突域</p><p>桥接器可对<strong>不同</strong>格式的帧进行重组</p><p>使用以太网交换机（交换式集线器），属于网桥，全双工、无碰撞</p></blockquote></li><li><p><strong>100</strong>BASE-T的<strong>快速</strong>以太网定为正式标准，代号为IEEE 802.3u</p><blockquote><p>10BASE-T的拓扑结构为<strong>星型</strong>，使用<strong>双绞线</strong>电缆</p><p>10BASE5使用粗同轴电缆</p></blockquote></li><li><p>PPP协议有三个组成部分，其中两个为：链路控制协议LCP、网络控制协议NCP</p><blockquote><p>NCP用于协商在该数据链路上所传输的数据包的格式与类型</p></blockquote></li><li><p>局域网的特性主要由三个要素决定：<strong>拓扑结构</strong>、<strong>传输介质</strong>、<strong>介质访问控制方式</strong></p><blockquote><p>介质访问<strong>控制方法</strong>具体有：CSMA/CD（用于总线型局域网）、令牌总线和令牌环</p><p>介质访问控制方法有：</p><ul><li>信道划分介质访问控制 –&gt; 多路复用技术</li><li>随机访问介质访问控制 （如CSMA/CD）</li><li>轮询访问介质访问控制</li></ul></blockquote></li><li><p>冲突是一种正常现象</p></li><li><p>网桥虽然能够隔离冲突，用生成树算法解决环路拓扑的广播风暴，但设备初始化时仍存在广播风暴，而路由器隔离了广播域，<strong>抑制了广播风暴</strong>。</p></li><li><p>使用广播信道的数据链路层–&gt;以太网，“数据以广播方式”是对的</p></li><li><p>利用多个以太网交换机组成的局域网<strong>能够</strong>出现环（因为有生成树协议STP）</p></li><li><p>FDDI是光纤分布式<strong>数据</strong>接口，使用<strong>令牌环</strong>介质访问控制方法</p></li></ul><h1 id="Chap-4-网络层"><a class="header-anchor" href="#Chap-4-网络层">¶</a>Chap 4. 网络层</h1><p>IP地址的编址方法的三个阶段</p><ul><li>分类的IP地址</li><li>子网的划分</li><li>构成超网</li></ul><p>路由协议：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619104831.png"/><h1 id="Chap-5-运输层"><a class="header-anchor" href="#Chap-5-运输层">¶</a>Chap 5. 运输层</h1><ul><li><p>RIP 协议使用运输层的用户数据报<strong>UDP</strong>进行传送。</p></li><li><p>TCP的协议数据单元为TCP报文段，也称为“<strong>分段</strong>”。</p></li><li><p>用来表示一个TCP连接端点的是<strong>套接字</strong>。</p></li><li><p>选择重传是“收一个发一个”</p></li><li><p>在地址方面，UDP报头本身只是给出协议的<strong>端口</strong>编号</p></li><li><p>TCP控制位：URG、ACK、PSH、RST、SYN、FIN</p></li><li><p>TCP协议中采用<strong>慢开始和拥塞</strong>避免算法来控制拥塞。</p></li><li><p>向主机B发送了序号为70 TCP报文段，并收到了B的序号为100的确认报文，那么A向主机B发送了（30）个字节</p></li><li><p>发送方发送TCP报文A后，启动超时定时器，若在该定时器时间内没有收到<strong>确认报文</strong>，则重发报文A。</p></li><li><p>无连接的服务只能提供不可靠的服务</p></li></ul><h1 id="Chap-6-应用层"><a class="header-anchor" href="#Chap-6-应用层">¶</a>Chap 6. 应用层</h1><table><thead><tr><th>中文名</th><th>英文缩写</th></tr></thead><tbody><tr><td>超文本传输协议</td><td>HTTP</td></tr><tr><td>文件传送协议</td><td>FTP</td></tr><tr><td>远程登陆协议（终端仿真协议）</td><td>Telnet</td></tr><tr><td>简单邮件传送协议</td><td>SMTP</td></tr><tr><td>网际报文存取协议</td><td>IMAP</td></tr><tr><td>邮局通信协议</td><td>POP3</td></tr></tbody></table><ul><li><p>万维网（WWW）客户程序与万维网服务器程序之间的交互遵守严格的协议，即<strong>超文本传送协议HTTP</strong>（使用TCP连接进行可靠的传送）</p></li><li><p>Internet采用的工作模式为<strong>浏览器-服务器</strong>模式，提供的三项基本服务是：<strong>Web</strong>、<strong>Email</strong>和<strong>FTP</strong>。</p><blockquote><p>FTP协议可以传输文本文件，也可以传输压缩文件、图形和图像等文件。</p></blockquote></li><li><p>远程终端协议TELNET，可以进行<strong>远程登录</strong>管理</p></li><li><p>DNS实质上是一个<strong>分布式</strong>数据库系统</p></li><li><p>互联网DNS域名服务器也是按照<strong>层次</strong>安排的，每一个域名服务器都只对域名体系中的一部分进行管辖。</p></li><li><p>许多域名服务器同时充当<strong>本地</strong>域名服务器和<strong>授权</strong>域名服务器。</p></li><li><p>当一个本地域名域名服务器不能立即回答某个主机的查询时，它就以DNS客户的身份向某一个<strong>根</strong>域名服务器查询。</p><p>当根域名服务器没有被查询主机的信息时，它一定知道某个保存有被查询主机名字映射的<strong>授权</strong>域名服务器的IP地址。</p></li><li><p>base 64编码 P293</p></li></ul><h1 id="Chap-7-网络安全"><a class="header-anchor" href="#Chap-7-网络安全">¶</a>Chap 7. 网络安全</h1><ul><li>公开密钥与对称密钥的区别：（P330）<ul><li><strong>对称密钥</strong>：使用同样的密钥，在通信信道上进行<strong>一对一的双向保密通信</strong>。</li><li><strong>公开密钥</strong>：使用不同的加密密钥与解密密钥，在通信信道上<strong>多对一的单向保密通信</strong>。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chap-2-物理层&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chap-2-物理层&quot;&gt;¶&lt;/a&gt;Chap 2. 物理层&lt;/h1&gt;
&lt;img src=&quot;https://gitee.com/j__strawhat/MyImages/raw/m</summary>
      
    
    
    
    <category term="其他知识技术分享" scheme="https://j-strawhat.github.io/categories/%E5%85%B6%E4%BB%96%E7%9F%A5%E8%AF%86%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="计算机网络" scheme="https://j-strawhat.github.io/categories/%E5%85%B6%E4%BB%96%E7%9F%A5%E8%AF%86%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://j-strawhat.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>马原复习</title>
    <link href="https://j-strawhat.github.io/posts/290ad7f9/"/>
    <id>https://j-strawhat.github.io/posts/290ad7f9/</id>
    <published>2021-06-13T09:00:00.000Z</published>
    <updated>2021-07-20T10:02:13.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chap1-导论"><a class="header-anchor" href="#Chap1-导论">¶</a>Chap1. 导论</h1><h2 id="马克思主义构成之间的联系"><a class="header-anchor" href="#马克思主义构成之间的联系">¶</a>马克思主义构成之间的联系</h2><p>马克思用马哲（马克思主义哲学）的方法，研究并编写政经（马克思主义政治经济学）的理论，得出科社（科学社会主义）的结论。</p><h2 id="马克思主义的基本立场、基本观点和基本方法"><a class="header-anchor" href="#马克思主义的基本立场、基本观点和基本方法">¶</a>马克思主义的基本立场、基本观点和基本方法</h2><ul><li>基本立场：无产阶级、人民</li><li>基本观点（内容）：关于自然、社会和人类思维发展…人类思想成果和社会实践…</li><li>基本方法：辩证唯物主义和历史唯物主义</li></ul><h2 id="马克思主义的来源"><a class="header-anchor" href="#马克思主义的来源">¶</a>马克思主义的来源</h2><p>世界第一个无产阶级<strong>政党</strong>：共产主义者同盟</p><p>马克思主义公开问世的标志：《共产党宣言》的发表</p><p>产生的条件：</p><ul><li>社会根源：资本主义生产方式的发展</li><li>阶级基础（实践基础）：无产阶级在反抗资产阶级剥削和压迫的斗争</li><li><strong>思想渊源</strong>：德国古典哲学、英国古典政治经济学、英法两国的空想社会主义</li></ul><h2 id="马克思主义的鲜明特征"><a class="header-anchor" href="#马克思主义的鲜明特征">¶</a>马克思主义的鲜明特征</h2><ol><li><p>科学性：（独有特征）正确反映</p></li><li><p>革命性：彻底地批判、无产阶级立场</p></li><li><p>实践性：（独有特征）</p></li><li><p>人民性：  马克思主义的人民性是以阶级性为深刻基础的，是无产阶级先进性的体现</p><blockquote><p>只要代表无产阶级，就代表人民</p></blockquote></li><li><p>发展开放性：与时俱进</p></li></ol><h2 id="哲学的基本问题"><a class="header-anchor" href="#哲学的基本问题">¶</a>哲学的基本问题</h2><p>“思维和存在的关系问题”</p><blockquote><p>思维-&gt;意识。物质-&gt;存在</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210613164047 (定制).png"/><h2 id="哲学的重要问题"><a class="header-anchor" href="#哲学的重要问题">¶</a>哲学的重要问题</h2><p>“世界是怎样存在的”</p><p>存在两种观点：</p><ul><li>形而上学认为：孤立、片面、静止、无矛盾</li><li>辩证法认为：联系、全面、发展、矛盾</li></ul><h2 id="马克思在哲学史上的两大历史贡献"><a class="header-anchor" href="#马克思在哲学史上的两大历史贡献">¶</a>马克思在哲学史上的两大历史贡献</h2><ol><li>创立：历史唯物主义（或称唯物史观）</li><li>形成：辩证唯物主义</li></ol><p>在马克思主义产生之前，只存在这三个组合：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210613164951.png" style="zoom: 50%;" /><h1 id="Chap2-唯物论"><a class="header-anchor" href="#Chap2-唯物论">¶</a>Chap2. 唯物论</h1><p>马哲：</p><p>唯物论——世界是什么？</p><p>辩证法——世界是怎样的？</p><p>认识论——如何认知？</p><p>唯物史观——人类历史、发展规律</p><h2 id="物质观"><a class="header-anchor" href="#物质观">¶</a>物质观</h2><h3 id="物质范畴（定义）"><a class="header-anchor" href="#物质范畴（定义）">¶</a>物质范畴（定义）</h3><ul><li><p>恩格斯：从各种物的总和中<strong>抽象</strong>出来</p></li><li><p><strong>列宁</strong>：（紧抓第二点）</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210613171325.png"/><blockquote><p><strong>定义的方式</strong>：物质和意识的关系</p><p>列宁借助“感觉”来定义“物质”</p></blockquote></li><li><p>物质的唯一特性：客观实在</p><blockquote><p>物质的根本属性：运动</p></blockquote></li></ul><h3 id="物质和运动"><a class="header-anchor" href="#物质和运动">¶</a>物质和运动</h3><p>运动是物质的<strong>存在方式</strong>和根本属性</p><blockquote><p>运动即是变化，凡是物质，都是以运动的方式存在的。</p></blockquote><p>物质和运动的<strong>关系</strong>：不可分割。XXX是YYY的XXX</p><p>批判两种错误的观点：</p><ul><li>脱离物质谈运动-&gt;唯心主义；</li><li>脱离运动谈物质-&gt;形而上学</li></ul><h3 id="运动和静止"><a class="header-anchor" href="#运动和静止">¶</a>运动和静止</h3><p>运动是无条件的，运动的存在方式是时空</p><p>静止包括空间位置和根本性质暂时未变，两种运动的<strong>特殊</strong>状态</p><blockquote><p>静止是运动的衡量尺度</p></blockquote><p>运动和静止的<strong>关系</strong>：对立统一</p><ul><li>相互区别：</li><li>相互联系：“鸟鸣山更幽，风定花犹落”——动中有静、静中有动</li></ul><p>批判两种错误的观点：</p><ul><li>夸大静止，形而上学</li><li>夸大运动，诡辩论</li></ul><blockquote><p>“人不能两次踏进同一条河流”——符合马克思主义的观点</p><p>“人一次都不能踏进同一条河流”——夸大了运动</p></blockquote><h3 id="物质运动与时空"><a class="header-anchor" href="#物质运动与时空">¶</a>物质运动与时空</h3><p>时间特点是一维性，空间特点是三维性</p><p>时间和空间是物质运动的<strong>存在形式</strong>（<strong>存在方式</strong>）</p><blockquote><p>物质的存在方式是运动，运动的存在方式是时空</p><p>所以说，“时间是物质运动的存在形式”是正确的说法</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210613180022.png"/><h2 id="意识观"><a class="header-anchor" href="#意识观">¶</a>意识观</h2><h3 id="实践是自然存在和社会存在区分和统一的基础"><a class="header-anchor" href="#实践是自然存在和社会存在区分和统一的基础">¶</a>实践是自然存在和社会存在区分和统一的基础</h3><p><strong>社会生活的本质</strong>：实践</p><ul><li>实践是物质世界分化为自然界和人类社会的前提，又是使自然界与…统一起来的现实基础</li><li>实践是人类社会的基础，是理解和解释一切社会现象的钥匙</li></ul><p>为什么实践是社会生活的本质？（社会生活的实践性主要表现在）</p><ul><li><p>实践是社会关系形成的基础</p></li><li><p>实践形成了社会生活的基本领域</p></li><li><p>实践<strong>构成</strong>了社会发展的动力</p><blockquote><p>社会发展的动力——社会基本矛盾</p><p>实践不是社会发展的动力！</p></blockquote></li></ul><h3 id="意识的起源、本质和作用"><a class="header-anchor" href="#意识的起源、本质和作用">¶</a>意识的起源、本质和作用</h3><ul><li><p>意识的<strong>概念</strong>：意识是物质世界长期发展的产物，是人脑的机能和属性，是<strong>物质世界的主观映象</strong>。</p></li><li><p>意识的<strong>本质</strong>：客观世界的主观映像，是客观内容和主观形式的统一。</p></li><li><p>意识的<strong>来源</strong>：</p><ol><li><p>由一切物质所具有的反应特性到低等生物的刺激感应性；</p></li><li><p>再到高等动物的感觉和心理；</p></li><li><p>最终发展为人类的意识；</p><blockquote><p>由此，意识的人独有的</p></blockquote></li></ol></li><li><p>意识形成过程中的影响因素：</p><p>…. 社会实践特别是<strong>劳动</strong> … 决定性作用</p><p>…. 语言 … 促进作用，<strong>语言</strong>还是意识的<strong>物质</strong>外壳（注意区分，语言的含义是意识 ）</p></li><li><p>⭐<strong>意识的作用</strong>：能动作用，主要表现在：</p><ol><li>意识反映世界具有自觉性，具有目的性和计划性</li><li>意识具有<strong>创造性</strong></li><li>意识具有指导实践改造客观世界的作用。</li><li>意识还具有指导、控制人的行为和生理活动的作用</li></ol></li></ul><h2 id="⭐物质与意识的辩证关系"><a class="header-anchor" href="#⭐物质与意识的辩证关系">¶</a>⭐物质与意识的辩证关系</h2><blockquote><p>辩证关系即对立统一关系</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210618221055.png"/><blockquote><p>“意识是人脑的分泌物”——错误观点，将意识混淆为物质</p><p>物质可以“转化”意识，但不能写成“代替”</p><p>物质“强”一点，意识“弱”一点</p></blockquote><p>一方面，尊重客观规律，是正确发挥主观能动性的前提；</p><p>另一方面，只有充分发挥主观能动性，才能正确认识和利用客观规律</p><blockquote><p>社会历史趋向–&gt;规律；主体选择-&gt;能动</p></blockquote><h3 id="人的主观能动性的三个前提及条件"><a class="header-anchor" href="#人的主观能动性的三个前提及条件">¶</a>人的主观能动性的三个前提及条件</h3><ul><li>前提：从实际出发</li><li>基本途径：实践</li><li>还需要依赖一定的物质条件和物质手段</li></ul><h2 id="世界的物质统一性原理"><a class="header-anchor" href="#世界的物质统一性原理">¶</a>世界的物质统一性原理</h2><ul><li><p>世界是统一的，即世界的本原是一个</p><blockquote><p>能够批判“二元论”，但注意，唯心主义也同意该句话</p></blockquote></li><li><p>统一性在于它的物质性，即世界统一的基础是物质</p><blockquote><p>第一句+第二句 可以批判“唯一”，但不能够批判旧唯物主义</p></blockquote></li><li><p>物质世界的统一性是多样性的统一，而不是单一的无差别的统一</p><blockquote><p>三句话才能够批判“旧唯物主义”</p></blockquote></li></ul><h2 id="⭐世界的物质统一性原理的意义"><a class="header-anchor" href="#⭐世界的物质统一性原理的意义">¶</a>⭐世界的物质统一性原理的意义</h2><ol><li>理论上：世界的物质统一性原理，是马克思主义的<strong>基石</strong>。</li><li>实际上：日常生活中要做到一切从实际出发，因为世界的物质统一性原理</li></ol><h2 id="马哲与其他哲学的区别与联系"><a class="header-anchor" href="#马哲与其他哲学的区别与联系">¶</a>马哲与其他哲学的区别与联系</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619003702.png" style="zoom:80%;" /><p><strong>实践</strong>是马哲区别于其他派别的独有的观点</p><h1 id="Chap3-辩证法"><a class="header-anchor" href="#Chap3-辩证法">¶</a>Chap3. 辩证法</h1><blockquote><p>回答的问题：世界是怎样的？——辩证法的两大总特征做出直接的回答</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619134835.png"/><h2 id="两大总特征"><a class="header-anchor" href="#两大总特征">¶</a>两大总特征</h2><h3 id="普遍联系"><a class="header-anchor" href="#普遍联系">¶</a>普遍联系</h3><p>⭐ 联系是以区别为前提的</p><h4 id="联系的特点"><a class="header-anchor" href="#联系的特点">¶</a>联系的特点</h4><ul><li>客观性：联系是事务本身所固有的，不是主观臆想的</li><li>普遍性：<ol><li>任何事务<strong>内部</strong>的不同部分和要素是相互联系的，即任何事务都具有内在结构性</li><li>任何事务都不能孤立存在的，都同<strong>其他事物</strong>处于一定的相互联系之中</li><li>（徐）整个世界是相互联系的统一，它就如同任何事务都是这张网的节点….而这个节点一定通过“中介”是与其他节点联系着，自己也是“中介”</li></ol></li><li>多样性：事物是多样的-&gt;事物的联系也是多样的</li><li>条件性：<ol><li>条件对事物发展和人的活动具有支持或抑制的作用；</li><li>条件可以改变的，人们经过努力可以…</li><li>改变和创造条件不是任意的，必须尊重…规律</li></ol></li></ul><h3 id="永恒发展"><a class="header-anchor" href="#永恒发展">¶</a>永恒发展</h3><h4 id="发展的内涵"><a class="header-anchor" href="#发展的内涵">¶</a>发展的内涵</h4><p>概括一切形式的变化就是运动，运动变化的趋势是发展</p><blockquote><p><strong>运动 = 变化 &gt; 发展</strong>，运动是绝对的、无条件的，但发展不能如此说，发展是永恒的</p></blockquote><h4 id="发展的实质"><a class="header-anchor" href="#发展的实质">¶</a>发展的实质</h4><p>前进上升的运动，发展的实质是新事物（合乎历史、远大前途）的产生和旧事物（丧失历史必然性、日趋灭亡）的灭亡</p><blockquote><p>注意：新事物和旧事物并不是时间的前后关系</p><p>但是，新事物<strong>往往</strong>（不是一定）产生于旧事物之后</p><p>新事物必然取代旧事物</p></blockquote><h3 id="过程的观点"><a class="header-anchor" href="#过程的观点">¶</a>过程的观点</h3><p>世界不是既成事务的集合体，而是<strong>过程</strong>的集合体</p><p>一切在历史上产生的都要在历史上灭亡</p><p>创新永无止境</p><p>…</p><h2 id="五对范畴"><a class="header-anchor" href="#五对范畴">¶</a>五对范畴</h2><blockquote><p>进一步探讨联系和发展环节上的逻辑问题</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619141713.png"/><h3 id="原因与结果"><a class="header-anchor" href="#原因与结果">¶</a>原因与结果</h3><ul><li><p>原因与结果-&gt;前后相继</p></li><li><p><strong>关系</strong>：对立统一</p><blockquote><p>有其因必有其果是错误的，因为原因和结果的关系是复杂多样的，有“同因异果”，同样的原因未必导致同样的结果</p><p>有因必有果是正确的</p></blockquote></li><li><p>方法论：凡事预则立，不预则废</p></li></ul><h3 id="必然与偶然"><a class="header-anchor" href="#必然与偶然">¶</a>必然与偶然</h3><ul><li><p>这个世界上任何一个事情的发生既是必然，也是偶然，即必然与偶然的辩证统一</p></li><li><p>关系：对立统一</p></li><li><p>区别：必然：内部原因、稳定、决定性，偶然：外部原因、不太稳定、影响</p></li><li><p>联系：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619144030.png" style="zoom:67%;" /></li></ul><h3 id="可能与现实"><a class="header-anchor" href="#可能与现实">¶</a>可能与现实</h3><ul><li><p>相互区别：略</p></li><li><p>相互联系：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619144505.png"/></li><li><p>判别：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619145202.png" style="zoom:80%;" /></li></ul><h3 id="⭐现象与本质"><a class="header-anchor" href="#⭐现象与本质">¶</a>⭐现象与本质</h3><ul><li><p>只要现象，都外露于外部；而本质隐藏于事物内部</p></li><li><p>相互区别：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619145723.png"/><blockquote><p>假象是客观存在的，错觉是错误的感觉。</p><p>错觉不一定是被假象迷惑导致的</p><p>真象与假象都是客观存在的，并没有正确还是错误的说法</p></blockquote></li><li><p>方法论：不能停留于现象，<strong>必须通过现象揭示本质</strong></p></li></ul><h3 id="内容与形式"><a class="header-anchor" href="#内容与形式">¶</a>内容与形式</h3><ul><li><p>关系：上面四对范畴都是对立统一，而这对是相互依赖、不可分割</p></li><li><p>任何 … 都有 … ； 没有无 … 的 …</p></li><li><p>内容决定形式，形式反作用于内容；当形式适合内容，对内容的发展有…积极推动作用 … ；…不适合 …消极</p><blockquote><p>生产力就是内容；生产关系就是形式</p></blockquote></li></ul><h2 id="三大规律"><a class="header-anchor" href="#三大规律">¶</a>三大规律</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619151908.png"/><h2 id="⭐⭐对立统一规律"><a class="header-anchor" href="#⭐⭐对立统一规律">¶</a>⭐⭐对立统一规律</h2><h3 id="唯物辩证法的实质与核心——对立统一规律"><a class="header-anchor" href="#唯物辩证法的实质与核心——对立统一规律">¶</a>唯物辩证法的实质与核心——对立统一规律</h3><ol><li>对立统一规律揭示了事务普遍联系的根本内容和永恒发展的内在动力，从根本上回答了事务为什么会发展的问题的问题</li><li>对立统一规律是贯穿其他规律和范畴的中心线索</li><li>对立统一规律提供矛盾分析法，它是对事物辩证认识的实质</li><li>是否承认对立统一学说是唯物辩证法和形而上学对立的本质</li></ol><h3 id="矛盾的同一性和斗争性的辩证关系原理"><a class="header-anchor" href="#矛盾的同一性和斗争性的辩证关系原理">¶</a>矛盾的同一性和斗争性的辩证关系原理</h3><p>矛盾就是对立统一，对立统一就是矛盾</p><blockquote><p>每时每刻，每对矛盾既同一又斗争</p></blockquote><p>哲学上的矛盾并非有褒贬之义</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619153944.png"/><blockquote><p>只要是矛盾，都可以转</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619154154.png"/><blockquote><p>资本主义 -&gt; 对抗性矛盾 -&gt; 灭亡</p></blockquote><p>同一性与斗争性的关系：对立统一</p><p>联系：没有…没有 … ；… 寓于 … （拾荒者例子）</p><p>区别：斗争性是无条件、绝对的；同一性是有条件、相对的</p><p><strong>方法论</strong>：“看问题要一分为二”、“求同存异”、“事物之间会相互转化”、“批判地继承”</p><h3 id="矛盾的同一性和斗争性在事物发展中的作用原理"><a class="header-anchor" href="#矛盾的同一性和斗争性在事物发展中的作用原理">¶</a>矛盾的同一性和斗争性在事物发展中的作用原理</h3><p>同一性：</p><ol><li>由于矛盾双方相互依存，互为存在的条件， 矛盾双方可以利用对方的发展使得自己得到发展（首富）</li><li>同一性使矛盾双方相互<strong>吸取</strong>有利于自身的因素，在相互作用中各自得到发展（成功的爱情）</li><li>由于矛盾双方彼此相通，矛盾双方可以向着彼此的对立面转化而得到发展，并规定着事物的发展方向。（你强我弱-&gt;我弱你强）</li></ol><p>矛盾性：</p><ol><li>矛盾双方的斗争促进矛盾双方力量的变化，竞长争高，此消彼长，造成事物的量变</li><li>矛盾双方的斗争，促使矛盾双方的地位和性质发生转化，实现事物的质变。</li></ol><p>方法论：</p><ul><li><p>事物的发展不仅表现在“相反相成”（斗争性多的时候），而且表现为“相辅相成”（同一性多的时候）；</p></li><li><p>学会从事物的对立面把握事物的统一，逆向思考。</p></li><li><p>和谐不是无差别的一致</p></li></ul><h3 id="矛盾的普遍性和特殊性的辩证关系原理"><a class="header-anchor" href="#矛盾的普遍性和特殊性的辩证关系原理">¶</a>矛盾的普遍性和特殊性的辩证关系原理</h3><p>普遍性概念：大概就是 矛盾无处不在，无时不有，旧的矛盾解决了，新的矛盾又产生</p><p>特殊性概念：在各个方法都有其特点，有三种情形：</p><ul><li><strong>不同</strong>事物的矛盾各有其特点</li><li>同一事物的矛盾在不同发展过程和发展<strong>阶段</strong>各有其不同的特点</li><li>构成事物的诸多矛盾以及每一矛盾的不同方面各有不同的性质、地位和作用</li></ul><p>关系：对立统一</p><p>区别：普遍性（共性）无条件的、绝对的，（特殊性）个性 … 、…</p><p>联系：任何现实存在的事物都是共性和个性的有机统一，没有 … 的 …</p><p>方法论：<strong>具体问题具体分析</strong>，对症下药</p><blockquote><p>美国：抽象人权；中：具体人权</p></blockquote><h3 id="矛盾的不平衡发展原理"><a class="header-anchor" href="#矛盾的不平衡发展原理">¶</a>矛盾的不平衡发展原理</h3><p>概念：</p><ul><li><p>主要矛盾是矛盾体系中处于支配地位，对事物发展起决定作用的矛盾。次要矛盾是处于服从地位的矛盾。</p></li><li><p>在每一对矛盾中又有矛盾的主要方面与矛盾的次要方面</p><blockquote><p>丈夫与夫妻是一对矛盾，有一个居于矛盾的主要方面，起着领导作用</p></blockquote></li></ul><p>原理：事务的性质主要由<strong>主要矛盾</strong>的<strong>主要方面</strong>决定的</p><p>方法论意义：“两点论”（即主次都不要放弃）与“重点论”（突出主要矛盾）相结合，抓关键，看主流</p><h3 id="矛盾分析法"><a class="header-anchor" href="#矛盾分析法">¶</a>矛盾分析法</h3><blockquote><p>即上述的方法论的总结</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619165824.png"/><h2 id="质量互变定律"><a class="header-anchor" href="#质量互变定律">¶</a>质量互变定律</h2><ul><li><p>质：认识“质”是认识和实践的起点和基础</p></li><li><p>量：认识事物的“量”是认识的深化和精确化，只有正确了解才能正确估计事物在实践中的<strong>地位和作用</strong></p></li><li><p>度：度的两端叫关节点或临界点</p></li><li><p>量变：事物数量的增减和次序的变动（别漏了），保持稳定性的<strong>不显著</strong>的变化</p></li><li><p>质变：事物性质的<strong>根本</strong>变化</p></li></ul><p>相互联系：</p><ol><li><p>量变是质变的<strong>必要</strong>准备</p><blockquote><p>激变论夸大了质变，否定了量变</p></blockquote></li><li><p>质变是量变的<strong>必然</strong>结果</p><blockquote><p>庸俗进化论，夸大了量变</p></blockquote></li><li><p>两者相互渗透</p><ul><li>总的量变中有阶段性和局部性的部分质变</li><li>质变中也有旧质在量上的收缩和新质在量上的扩张</li></ul></li></ol><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619172340.png" style="zoom:80%;" /><h2 id="否定之否定规律"><a class="header-anchor" href="#否定之否定规律">¶</a>否定之否定规律</h2><ul><li><p>肯定因素：维持现成事物存在的因素</p></li><li><p>否定因素：促使现成事物灭亡的因素</p></li><li><p>辩证否定观的基本内容：</p><ol><li><p>否定是事物的<strong>自我否定</strong>（<em>自己的基因决定了…</em>）</p><blockquote><p>认为外在力量对事物进行消灭 -&gt; 形而上学</p><p>不能将“偶然”当作必然</p></blockquote></li><li><p>否定是事物发展的环节</p></li><li><p>否定是新旧事物联系的环节</p></li><li><p>辩证否定的实质是“<strong>扬弃</strong>”（批判又继承）</p><blockquote><p>认为肯定一切，否定一切 -&gt; 形而上学</p></blockquote></li></ol><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619190335.png"/></li></ul><p>否定之否定规律：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619190741.png" style="zoom:80%;" /><p>方法论：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619191422.png" style="zoom:80%;" /><h2 id="客观辩证法与主观辩证法"><a class="header-anchor" href="#客观辩证法与主观辩证法">¶</a>客观辩证法与主观辩证法</h2><p>客观辩证法采取外部必然的形式，主观辩证法采取观念的、逻辑的形式</p><h1 id="Chap4-认识论"><a class="header-anchor" href="#Chap4-认识论">¶</a>Chap4. 认识论</h1><blockquote><p>唯物论、辩证法主要研究客观世界及其规律；认识论主要研究主观世界的问题</p></blockquote><h2 id="实践与认识"><a class="header-anchor" href="#实践与认识">¶</a>实践与认识</h2><p>错误的实践观：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619221159.png"/><p>正确的实践观：实践是感性的、对象性的物质活动</p><p>实践的本质含义：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619221924.png"/><blockquote><p>实践必须是人</p></blockquote><p>实践的基本特征：</p><ul><li><p><strong>直接现实性</strong>（本质特性）</p><blockquote><p>实践具有将“脑中的”变成“现实的”功能</p></blockquote></li><li><p>自觉能动性（主体能动性）</p><blockquote><p>实践受意识指导，体现主体的目的性</p></blockquote></li><li><p>社会历史性</p><blockquote><p>不同历史阶段实践内涵不同</p></blockquote></li></ul><p>实践主体：具有一定的主体能力，从事现实社会实践活动的人。</p><p>实践主体的能力：自然能力和精神能力（知识性因素和非知识性因素）</p><p>实践中介：其中介系统分为两个：物质性工具系统、语言符号工具系统</p><p>主体与客体的关系：<strong>实践关系</strong>（最根本，最先）、认识关系、价值关系</p><p>实践的三种基本类型：<strong>物质生产实践</strong>（劳动，最基本）、社会政治实践（搞关系）、科学文化实践（探索）</p><blockquote><p>人的活动分为两种：本能活动、实践活动</p></blockquote><h2 id="⭐实践决定认识"><a class="header-anchor" href="#⭐实践决定认识">¶</a>⭐实践决定认识</h2><blockquote><p>实践高于认识，认识不能决定实践</p></blockquote><ol><li><p><strong>实践是认识的来源</strong>：①实践产生认识的需要；②实践还为认识的形成提供了可能</p><blockquote><p>认识不排除天赋（生理因素）的影响</p><p>认识也受间接经验影响</p></blockquote></li><li><p>实践是认识的动力</p><blockquote><p>注意，实践不是认识的先导</p></blockquote></li><li><p>实践是认识的目的（小马过河，实践需求）</p></li><li><p>实践是检验认识真理性的唯一标准</p></li></ol><h2 id="认识的本质、过程和规律"><a class="header-anchor" href="#认识的本质、过程和规律">¶</a>认识的本质、过程和规律</h2><p>认识的本质（概念）：主体在<strong>实践基础</strong>上对客体的<strong>能动反映</strong></p><p>认识的反映特性与创造特性<strong>不可分割</strong></p><h1 id="Chap-5-唯物史观"><a class="header-anchor" href="#Chap-5-唯物史观">¶</a>Chap 5. 唯物史观</h1><h2 id="社会存在和社会意识及其辩证关系"><a class="header-anchor" href="#社会存在和社会意识及其辩证关系">¶</a>社会存在和社会意识及其辩证关系</h2><blockquote><p>生产方式（往小地说，生产力）起着决定作用</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210620012302.png"/><blockquote><p>科技不是生产力的独立要素，但是在生产劳动中的（不是社会历史）决定性因素</p><p>生产关系，也是物质（不以人的意志为转移），但是人与人的关系</p><p>生产工具区分社会经济<strong>时代</strong>的客观依据；生产资料所有制判断社会经济结构<strong>性质</strong>的客观依据</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210620011446.png"/><p>社会存在决定社会意识：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210620011700.png"/><p>社会意识反作用于社会存在（相对独立性）</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210620011930.png"/><h2 id="生产力与生产关系的矛盾"><a class="header-anchor" href="#生产力与生产关系的矛盾">¶</a>生产力与生产关系的矛盾</h2><p>生产力：物质力量、人和自然的关系</p><p>生产力是内容，生产关系是形式–&gt;辩证法的内容与形式。</p><ul><li>生产力决定生产关系</li><li>生产关系反作用于生产力（双向）</li></ul><p>两者有机结合和统一，构成社会的生产方式</p><blockquote><p>社会生产第一规律：生产关系一定要适应生产力发展状况的规律</p></blockquote><h2 id="经济基础与上层建筑的矛盾"><a class="header-anchor" href="#经济基础与上层建筑的矛盾">¶</a>经济基础与上层建筑的矛盾</h2><p>经济基础是 … 生产关系的总和</p><p>上层建筑 … 意识形态以及制度、组织和设施：</p><ul><li>意识形态（观念上层建筑）：包括政治法律思想、道德、艺术、宗教、哲学等思想观点</li><li>政治法律制度以及设施和政治组织（政治上层建筑，局于主导，国家政权是核心）</li></ul><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210620013848.png" style="zoom:67%;" /><blockquote><p>属于上层建筑的社会意识，就是社会意识形态</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210620014255.png" style="zoom:67%;" /><blockquote><p>社会发展第二规律：上层建筑一定要适应经济基础发展状况的规律</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210620014605.png" style="zoom:67%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chap1-导论&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chap1-导论&quot;&gt;¶&lt;/a&gt;Chap1. 导论&lt;/h1&gt;
&lt;h2 id=&quot;马克思主义构成之间的联系&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#马克思主义构</summary>
      
    
    
    
    <category term="人文社科" scheme="https://j-strawhat.github.io/categories/%E4%BA%BA%E6%96%87%E7%A4%BE%E7%A7%91/"/>
    
    <category term="政治" scheme="https://j-strawhat.github.io/categories/%E4%BA%BA%E6%96%87%E7%A4%BE%E7%A7%91/%E6%94%BF%E6%B2%BB/"/>
    
    
    <category term="马克思原理" scheme="https://j-strawhat.github.io/tags/%E9%A9%AC%E5%85%8B%E6%80%9D%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>「数据库系统概论」大题总结</title>
    <link href="https://j-strawhat.github.io/posts/da2a8f19/"/>
    <id>https://j-strawhat.github.io/posts/da2a8f19/</id>
    <published>2021-06-10T11:47:53.000Z</published>
    <updated>2021-07-20T10:02:13.917Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>试述<strong>数据、数据库、数据库系统、数据库管理系统</strong>的概念。</p><p>答： <strong>数据</strong>： 描述事物的符号记录称为数据。</p><blockquote><p>数据的种类有文字、<br>图形、图像、声音、正文等等。数据与其语义是不可分的。</p></blockquote><p><strong>数据库</strong>： 长期储存在计算机内、有组织的、可共享的大量数据集合。数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度、较高的数据独立性和易扩展性，并可为各种用户共享。</p><p><strong>数据库系统</strong>： 是由数据库、数据库管理系统及其应用开发工具 、应用程序、数据库管理员组成的存储、管理、处理和维护数据的系统。</p><p><strong>数据库管理系统</strong>：<br>是位于用户与操作系统之间的一层数据管理软件。用于科学地组织和存储数据、高效地获取和维护数据。</p><blockquote><p>DBMS 主要功能包括数据定义功能、数据操纵功能、<br>数据库的运行管理功能、数据库的建立和维护功能。</p><p>DBMS由两大部分组成：查询处理器和存储管理器</p></blockquote></li><li><p><strong>数据库管理系统的主要功能</strong>有哪些？</p><p>答：其主要功能为：（参照模拟卷）</p><p>①<strong>数据库定义功能</strong>：DBMS提供数据定义语言（DDL）定义数据库的三级结构及其相互间的映像、完整性、安全控制等约束。</p><p>②<strong>数据库的操纵功能</strong>：DBMS提供数据操纵语言（DML）实现对数据库中数据的操作。</p><p>③<strong>数据库的保护功能</strong>：DBMS对数据库的保护主要通过数据库的恢复、数据库的并发控制、数据库的完整性控制、数据库的安全性控制等四个方面实现。</p><p>④<strong>数据库的存储管理</strong>：DBMS的存储管理子系统提供了数据库中数据和应用程序的一个界面，其职责是把各种DML语句转换成底层的系统命令，起到数据的存储、检索和更新功能。</p><p>⑤<strong>数据库的维护功能</strong>：DBMS中实现数据库维护功能的实用程序主要有数据装载程序、备份程序、文件重组织程序、性能监控程序。</p><p>⑥（存疑）<strong>数据字典</strong>（DD）：数据库系统中存放三级结构定义的数据库称为数据字典，对数据库的操作都要通过访问DD才能实现。</p></li><li><p>什么是数据库系统的<strong>三级模式结构</strong>？这种体系结构的<strong>优点</strong>是什么？</p><p>答：通常 DBMS 把数据库从逻辑上分为三级，即外模式、模式和内模式，它们分别反映了看待数据库的三个角度。</p><p><strong>外模式</strong>（子模式或用户模式）：是数据库用户能够看见和使用的<strong>局部数据</strong>的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。</p><p><strong>模式</strong>（<br>Schema ）：是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。</p><p><strong>内模式</strong>（存储模式或内视图）：是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。</p></li><li><p>什么是数据库的<strong>完整性</strong>？</p><p>答：数据库的完整性是指数据的正确性和相容性。</p><p>数据的正确性指数据是符合现实世界语义、反映当前实际状况的；</p><p>数据的相容性是指数据库同一对象在不同关系表中的数据是符合逻辑的。</p></li><li><p>数据库的<strong>完整性与安全性的区别</strong></p><table><thead><tr><th></th><th>数据库的完整性</th><th>数据库的安全性</th></tr></thead><tbody><tr><td>目的</td><td>为防止数据库中存在不符合语义的数据，防止不正确的数据</td><td>保护数据库防止恶意破坏和非法存取</td></tr><tr><td>防范对象</td><td>不合语义的、不正确的数据，防止它们进入数据库</td><td>非法用户和非法操作，防止他们队数据库数据的非法选取</td></tr></tbody></table></li><li><p>什么是数据库的<strong>审计功能</strong>，<strong>为什么</strong>要提供审计功能？</p><p>答：审计功能是指DBMS的审计模块在用户对数据库执行操作的同时将所有操作自动记录到系统的审计日志中。</p><p>因为任何系统的安全保护措施都不是完美无缺的，蓄意盗窃破坏数据的人总可能存在。<br>利用数据库的审计功能， DBA 可根据审计跟踪的信息，重现导致数据库现有状况的一系列事件，找出非法存取数据的人、时间和内容<br>等。</p></li><li><p><strong>删除</strong>被参照关系的元组时，系统可能采取的作法有：①级联删除；②受限删除；③置空值删除</p><p>参照关系中<strong>插入</strong>元祖时，系统可能采取的作法有：①受限插入；②递归插入</p></li><li><p>数据库设计的基本步骤以及各步骤的主要工作是什么？</p><p>答：</p><ul><li><p><strong>需求分析</strong>：准确了解与分析用户需求（包括数据与处理）。</p></li><li><p><strong>概念结构设计</strong>：通过对用户需求进行综合、归纳与抽象，形成<br>一个独立于具体 DBMS 的概念模型。</p></li><li><p><strong>逻辑结构设计</strong>：将概念结构转换为某个 DBMS 所支持的数据<br>模型，并对其进行优化。</p></li><li><p><strong>数据库物理设计</strong>：为逻辑数据模型选取一个最适合应用环境的<br>物理结构（包括存储结构和存取方法）。</p></li><li><p><strong>数据库实施</strong>：设计人员运用 DBMS 提供的数据语言、工具及<br>宿主语言，根据逻辑设计和物理设计的结果建立数据库 ，编制与调试应用程序，组织数据入库，并进行试运行。</p></li><li><p><strong>数据库运行和维护</strong>：在数据库系统运行过程中对其进行评价、<br>调整与修改。</p></li></ul></li><li><p>简述<strong>事务的性质</strong>。</p><p>答：<strong>原子性</strong>：事务是数据库的逻辑工作单位，事务中包括的诸操作要么都做，要么都不做。</p><p><strong>一致性</strong>：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。</p><p><strong>隔离性</strong>：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对其他并发事务是隔离的，并发<br>执行的各个事务之间不能互相干扰。</p><p><strong>持续性</strong>（永久性）：指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其执行结果有任何影响。</p></li><li><p>在数据库的恢复技术中，为什么要遵循<strong>日志文件的先写原则</strong>。</p><p>答： 把对数据的修改写到数据库中和把表示这个修改的日志记录写到日志文件中是两个不同的操作。</p><p>有可能在这两个操作之间发生故障，即这两个写操作只完成了一个。<br>如果先写了数据库修改，而在运行记录中没有登记这个修改，则以后就无法恢复这个修改了。</p><p>如果先写日志，但没有修改数据库，<br>在恢复时只不过是多执行一次 UNDO 操作，并不会影响数据库<br>的正确性。</p><p>所以一定要先写日志文件，即首先把日志记录写到日志文件中，然后写数据库的修改。</p></li><li><p>什么样的并发调度才是<strong>正确的调度</strong>？</p><p>答：多个事务的并发执行是正确的，当且仅当其结果与 按某一次序串行地执行它们时的结果 相同，称这种调度策略为<strong>可串行化的调度</strong>。</p></li><li><p>并发操作会产生哪几类数据不一致？如何避免？</p><p>答：<strong>丢失修改</strong>：两个事务<br>T1 和 T2 读入同一数据并修改， T2 提交的结果破坏了（覆盖了） T1 提交的结果，导致 T1 的修改被丢失。</p><p><strong>不可重复读</strong>：指事务T1 读取数据后，事务 T2 执行更新操作，使 T1 无法再现前一次读取结果。</p><p><strong>读“脏”数据</strong>：指事务 T1 修改某一数据，并将其写回磁盘，<br>事务 T2 读取同一数据后， T1 由于某种原因被撤销，这时 T1 已修改过的数据恢复原值， T2 读到的数据就与数据库中的数据不一致，则 T2 读到的数据就为“脏”数据，即不正确的数据。</p><p>避免不一致性的方法和技术就是<strong>并发控制</strong>，其中最常用的是<strong>封锁技术</strong>。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;试述&lt;strong&gt;数据、数据库、数据库系统、数据库管理系统&lt;/strong&gt;的概念。&lt;/p&gt;
&lt;p&gt;答： &lt;strong&gt;数据&lt;/strong&gt;： 描述事物的符号记录称为数据。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数据的种类有文字、&lt;br&gt;
图形、</summary>
      
    
    
    
    <category term="DataBase" scheme="https://j-strawhat.github.io/categories/DataBase/"/>
    
    <category term="MySQL" scheme="https://j-strawhat.github.io/categories/DataBase/MySQL/"/>
    
    
    <category term="DataBase" scheme="https://j-strawhat.github.io/tags/DataBase/"/>
    
    <category term="SQL" scheme="https://j-strawhat.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>「JavaSE学习笔记10」Java 易错归纳</title>
    <link href="https://j-strawhat.github.io/posts/83a0adbc/"/>
    <id>https://j-strawhat.github.io/posts/83a0adbc/</id>
    <published>2021-06-06T05:04:00.000Z</published>
    <updated>2021-07-20T10:02:13.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-1-概述"><a class="header-anchor" href="#Chapter-1-概述">¶</a>Chapter 1 概述</h1><h2 id="Java跨平台"><a class="header-anchor" href="#Java跨平台">¶</a>Java跨平台</h2><p>Java 既具有解释型语言的特征，也具有编译型语言的特征。</p><blockquote><p>Java既不是编译型语言也不是解释型语言，还是静态语言。</p></blockquote><p>Java语言经过编译器编译后生成<strong>与平台无关</strong>的字节码文件（<code>*.class</code>，需要由Java解释器来解释执行）</p><blockquote><p>不同操作系统有不同的虚拟机，但提供一个相同的面向编译器的接口。</p><p>只要为不同平台实现了相应的虚拟机，编译之后的Java字节码就可以在该平台上运行</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621203334.png" style="zoom:67%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621203617.png" style="zoom:67%;" /><h2 id="编译与运行Java源文件"><a class="header-anchor" href="#编译与运行Java源文件">¶</a>编译与运行Java源文件</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621203804.png" style="zoom: 67%;" /><p>举例如下：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621204554.png" style="zoom:67%;" /><p><code>java</code>命令运行文件，紧跟于java文件中的类名，如<code>java HelloWorld</code>（注意，<code>java</code>命令针对于 <code>class</code> 文件，但是在输入命令时不加<code>.class</code>后缀）</p><h2 id="main方法"><a class="header-anchor" href="#main方法">¶</a>main方法</h2><p>签名：<code>public static void main(String[] arg)</code></p><p>其中，<code>public</code> 与 <code>static</code> 前后顺序可互换，但 <code>public</code> 可以省略不写，<code>static</code> 必须要使用</p><p>另外，返回值只能是 <code>void</code> ，否则该方法不是程序的入口方法</p><blockquote><p>若写成 <code>Main</code> 方法，Java解释器无法找到 <code>main</code> 方法</p></blockquote><h2 id="Java源文件"><a class="header-anchor" href="#Java源文件">¶</a>Java源文件</h2><ul><li><p>一个Java文件只能有一个 <code>public</code> 类，且文件名必须与 <code>public</code> 类名一致</p></li><li><p>注意，每个源文件最多只有一个包声明，必须位于 Java 源文件的第一行</p></li><li><p>Java程序中所有的关键字都是小写，无须任何大写字母</p></li></ul><h2 id="编程错误"><a class="header-anchor" href="#编程错误">¶</a>编程错误</h2><ul><li>语法错误</li><li>运行错误</li><li>逻辑错误</li></ul><h1 id="Chapter-2"><a class="header-anchor" href="#Chapter-2">¶</a>Chapter 2</h1><h2 id="Java标识符"><a class="header-anchor" href="#Java标识符">¶</a>Java标识符</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621220122.png" style="zoom:67%;" /><p>所有<strong>关键字</strong>都是由小写英文字母组成的</p><h2 id="基本数据类型"><a class="header-anchor" href="#基本数据类型">¶</a>基本数据类型</h2><ul><li><p><code>true</code> 和 <code>false</code> 只能小写</p></li><li><p>⭐<strong>表达式类型的自动提升</strong>：一个算术表达式包含多个基本类型的值时，整个算术表达式的数据类型都将发生自动提升，规则如下：</p><ul><li>所有 <code>byte</code>、<code>short</code>、<code>char</code> 类型自动提升到 <code>int</code></li><li>自动提升到表达式中最高等级操作同样的类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">byte</span> b = <span class="hljs-number">40</span>;<br><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">23</span>;<br><span class="hljs-keyword">double</span> d = <span class="hljs-number">3.5</span>;<br><span class="hljs-keyword">double</span> res = b + c + i * d;<br><span class="hljs-comment">//最高级操作数d是double，右边所有变量类型自动提升到double，结果自然是double</span><br><br><span class="hljs-keyword">short</span> s = <span class="hljs-number">5</span>;<br>s = s - <span class="hljs-number">2</span>; <span class="hljs-comment">//编译错误。右式自动提升到int，赋值时需强转</span><br></code></pre></td></tr></table></figure></li><li><p>一个值赋给范围更小类型的，必须强制转换（然而，会有进度降低或溢出）</p></li></ul><h2 id="Scanner"><a class="header-anchor" href="#Scanner">¶</a>Scanner</h2><p>从控制台中读取字符串：<code>next()</code> 读取以<strong>空白字符</strong>结束的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>String s = sc.next();<br></code></pre></td></tr></table></figure><h2 id="字符编码"><a class="header-anchor" href="#字符编码">¶</a>字符编码</h2><p>四种等价赋值方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;\u0061&#x27;</span>; <span class="hljs-comment">// &#x27;\uXXXX&#x27;中&#x27;XXXX&#x27;代表一个十六进制的整数</span><br><span class="hljs-keyword">char</span> c = <span class="hljs-number">0x0061</span>;<br><span class="hljs-keyword">char</span> c = <span class="hljs-number">97</span>;<br></code></pre></td></tr></table></figure><h2 id="字符型与数值型数据的转换"><a class="header-anchor" href="#字符型与数值型数据的转换">¶</a>字符型与数值型数据的转换</h2><p>当一个整数转换成 <code>char</code> 型数据时，只使用整数的低十六位，其他部分忽略，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c = (<span class="hljs-keyword">char</span>)<span class="hljs-number">0xAB0041</span>; <span class="hljs-comment">//取最后0x41，得到&#x27;A&#x27;</span><br></code></pre></td></tr></table></figure><p>若操作数是一个数字或字符，<code>char</code> 自动转换为数字，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;2&#x27;</span> + <span class="hljs-string">&#x27;3&#x27;</span>; <span class="hljs-comment">//&#x27;e&#x27;</span><br><span class="hljs-keyword">int</span> x = <span class="hljs-string">&#x27;2&#x27;</span> + <span class="hljs-string">&#x27;3&#x27;</span>; <span class="hljs-comment">//101</span><br><span class="hljs-keyword">int</span> y = <span class="hljs-number">2</span> + <span class="hljs-string">&#x27;a&#x27;</span>; <span class="hljs-comment">//99</span><br><br><span class="hljs-keyword">char</span> c = <span class="hljs-string">&quot;d&quot;</span>; <span class="hljs-comment">//显然是错误的!!!</span><br></code></pre></td></tr></table></figure><p>对于字符串：</p><ul><li><p>对于<code>+</code>运算符，若操作数之一不是字符串，则非字符串自动转换为字符串，注意下方坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;1+2=&quot;</span>+<span class="hljs-number">1</span>+<span class="hljs-number">2</span>); <span class="hljs-comment">//12</span><br>System.out.println(<span class="hljs-string">&quot;1+2=&quot;</span>+(<span class="hljs-number">1</span>+<span class="hljs-number">2</span>)); <span class="hljs-comment">//3</span><br><br>System.out.println(<span class="hljs-string">&quot;1&quot;</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">//11</span><br>System.out.println(<span class="hljs-string">&#x27;1&#x27;</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">//50，&#x27;1&#x27;自动转换为数字</span><br></code></pre></td></tr></table></figure><p>由此，数字转换成字符串的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String s = number + <span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>字符串转换成数字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">double</span> val = Double.parseDouble(<span class="hljs-string">&quot;23.3&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h1 id="Chapter-3-5-流程控制"><a class="header-anchor" href="#Chapter-3-5-流程控制">¶</a>Chapter 3+5 流程控制</h1><h2 id="switch-语句"><a class="header-anchor" href="#switch-语句">¶</a>switch 语句</h2><ul><li><p>对于 <code>switch(expr)</code> 语句，其 <code>expr</code> 表达式类型应与 <code>int</code> 类型兼容：<code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code> ，又或者是字符串，又或者是枚举类型</p><blockquote><p>注意，<code>long</code> 类型以及浮点类型，均不能够自动地转换为 <code>int</code> 类型</p></blockquote></li><li><p>对于 <code>case valueN</code> 子句中，<code>valueN</code> 必须是常量</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621180653.png" style="zoom:67%;" /></li></ul><h2 id="random-方法"><a class="header-anchor" href="#random-方法">¶</a>random 方法</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>M</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>m</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mo>&lt;</mo><mn>1.0</mn></mrow><annotation encoding="application/x-tex">0 \le Math.random() &lt; 1.0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">an</span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1.0</span></span></span></span> 故：</p><ul><li>返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[a, a+b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span>：<code>a + Math.random() * b</code></li><li>返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>10</mn><mo separator="true">,</mo><mn>20</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[10, 20)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">20</span><span class="mclose">)</span></span></span></span>：<code>(int)(10 + Math.random()*10)</code></li><li>随机返回 0 或 1：<code>(int)(Math.random()*10)%2</code></li></ul><h1 id="Chapter-6-方法"><a class="header-anchor" href="#Chapter-6-方法">¶</a>Chapter 6. 方法</h1><h2 id="方法签名"><a class="header-anchor" href="#方法签名">¶</a>方法签名</h2><p><strong>方法名+参数列表</strong></p><h2 id="方法的重载"><a class="header-anchor" href="#方法的重载">¶</a>方法的重载</h2><p>方法的重载与方法返回值类型、修饰符等没有任何关系。</p><p>因此，被重载的方法必须具有<strong>不同的参数列表</strong>，不能基于不同的修饰符或返回值类型（否则编译错误）</p><p>关于方法的匹配，你</p><h2 id="static修饰符"><a class="header-anchor" href="#static修饰符">¶</a>static修饰符</h2><p>静态方法不能够直接调用非静态成员变量和非静态方法，经典错误如下：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621162853.png" style="zoom:67%;" /><h2 id="方法体"><a class="header-anchor" href="#方法体">¶</a>方法体</h2><ul><li><p>对于有返回值的方法，<code>return</code> 语句必需的，尽管代码逻辑正确，但编译器并不认为是正确的（编译错误）</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621164102.png" style="zoom:67%;" /></li><li><p>对变量初始化时，注意下面的坑点：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621164447.png" style="zoom:67%;" /></li></ul><h2 id="方法调用"><a class="header-anchor" href="#方法调用">¶</a>方法调用</h2><p>一个方法结束运行会返回调用者，同时其活动记录中所有变量会从栈中移出（释放所有变量），定义在方法中的变量（包括引用类型）也结束其声明周期</p><h2 id="方法中参数传递"><a class="header-anchor" href="#方法中参数传递">¶</a>方法中参数传递</h2><ul><li>一个方法不能修改一个基本数据类型的参数</li><li>一个方法可改变一个对象参数的状态</li><li>一个方法不能够让对象参数引用一个新的对象</li></ul><h1 id="Chapter-7-一维数组"><a class="header-anchor" href="#Chapter-7-一维数组">¶</a>Chapter 7. 一维数组</h1><h2 id="数组的初始化"><a class="header-anchor" href="#数组的初始化">¶</a>数组的初始化</h2><blockquote><p>实际数组元素被存储在堆heap内存中，数组引用变量是引用类型变量，被存储在栈内存中</p></blockquote><ul><li><p>静态初始化：开发人员显式地指定每个数组元素的<strong>初始值</strong>，系统决定长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;; <span class="hljs-comment">//注意不要漏了中括号</span><br><span class="hljs-keyword">int</span> <br><span class="hljs-keyword">float</span>[] f = &#123;<span class="hljs-number">1.2f</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4f</span>, <span class="hljs-number">5</span>&#125;; <span class="hljs-comment">//注意坑点</span><br></code></pre></td></tr></table></figure></li><li><p>动态初始化：开发人员只指定数组长度，系统为数组分配初始值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] mylist; <span class="hljs-comment">//声明整形的数组</span><br>mylist = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>]; <span class="hljs-comment">//创建数组并将数组的引用赋值给mylist</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：不能同时使用静态初始化和动态初始化</p></blockquote></li></ul><h2 id="数组的长度"><a class="header-anchor" href="#数组的长度">¶</a>数组的长度</h2><p>注意普通数组的长度为：<code>arr.length</code>；而 <code>String</code> 的长度为：<code>arr.length()</code>，此外：<code>&quot;Hello&quot;.length()</code></p><h2 id="数组的复制"><a class="header-anchor" href="#数组的复制">¶</a>数组的复制</h2><ol><li><p>循环语句遍历赋值</p></li><li><p>使用 <code>System</code> 类中的静态方法 <code>arraycopy()</code>：内容相同，引用不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] list = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">int</span>[] list2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>];<br>System.arraycopy(list, <span class="hljs-number">2</span>, list2, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure></li><li><p><code>clone</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] list = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">int</span>[] list2 = list.clone();<br></code></pre></td></tr></table></figure></li></ol><h2 id="可变长参数列表"><a class="header-anchor" href="#可变长参数列表">¶</a>可变长参数列表</h2><p><code>...</code> 来表示数组可变参数，参数数目不确定但类型确定的情况。</p><p>如果方法中有多个类型参数，可变长参数必须是最后一个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wtf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> opt, <span class="hljs-keyword">int</span>...arr)</span></span>&#123;<br>    System.out.println(arr.length);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Arrays-工具类"><a class="header-anchor" href="#Arrays-工具类">¶</a>Arrays 工具类</h2><p>它包含了大量静态方法，常用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;;<br>Arrays.sort(arr);<br>System.out.println(Arrays.toString(arr));<br></code></pre></td></tr></table></figure><h2 id="命令行参数"><a class="header-anchor" href="#命令行参数">¶</a>命令行参数</h2><p>在命令行通过给 <code>main</code> 方法传递参数 <code>String[] args</code> ，其中参数均为字符串，但不一定需要用 <code>&quot;&quot;</code> 引起来</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621160931.png"/><p>默认情况下（命令行中不传递参数），<code>args</code> 参数长度为 0 的空数组（并非 <code>null</code>）</p><h1 id="Chapter9-对象和类"><a class="header-anchor" href="#Chapter9-对象和类">¶</a>Chapter9. 对象和类</h1><ul><li><p>对象通过引用变量访问，该变量包含对象的<strong>引用地址</strong></p><blockquote><p>也就说，对象引用变量实际上只包含了对象的引用地址，并不是存放了一个对象</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210606215554.png" style="zoom: 50%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210606215754.png" style="zoom:67%;" /><blockquote><p><code>System.arraycopy()</code> 方法是 <code>native</code> 方法，性能优于普通方法</p></blockquote></li><li><p>只有当类中<strong>无明确声明</strong>构造方法时，才会自动生成默认无参构造方法。</p><blockquote><p>也就说，类若提供了有参构造方法，但没有提供无参构造方法时，调用有参的构造方法合法，但调用无参的构造方法，会编译错误！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;233&quot;</span>);<br>    &#125;<br>    Test(<span class="hljs-keyword">int</span> i)&#123;<br>        System.out.println(i);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Test a = <span class="hljs-keyword">new</span> Test(); <span class="hljs-comment">//编译错误!因为无参构造方法没有自动生成</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>一个类里可包含多个初始化块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    &#123; <span class="hljs-comment">//第二个执行（每创建一个对象，就）</span><br>        System.out.println(<span class="hljs-string">&quot;init-block&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> &#123; <span class="hljs-comment">//第一个执行（每个类只执行一次）</span><br>        System.out.println(<span class="hljs-string">&quot;static&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">//第三个执行</span><br>        System.out.println(<span class="hljs-string">&quot;WTFFFF&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Test test = <span class="hljs-keyword">new</span> Test();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>关于日期类 <code>Calender</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">GregorianCalendar cal = <span class="hljs-keyword">new</span> GregorianCalendar();<br>System.out.println(<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss EEEE&quot;</span>).format(cal.getTime()));<br><span class="hljs-comment">//2021-06-06 10:17:45 星期日</span><br></code></pre></td></tr></table></figure><p>此处有个小坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Date d = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">12346788765</span>); <span class="hljs-comment">//编译错误，Integer number too large</span><br>Date d = <span class="hljs-keyword">new</span> <br></code></pre></td></tr></table></figure></li><li><p>关于 <code>Random</code> 类：</p><blockquote><p>java.utl 包含 <code>Date</code>、<code>Random</code>。而 java.lang 包含 <code>System</code>、<code>Math</code></p></blockquote><ul><li><p>有参构造方法的参数类型是 <code>long</code>，故：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Random g = <span class="hljs-keyword">new</span> Random(<span class="hljs-number">3.4</span>); <span class="hljs-comment">//编译错误</span><br></code></pre></td></tr></table></figure></li><li><p>返回的值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[0, x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></p></li><li><p>若两个<code>Random</code> 对象有相同的种子，那它们将产生相同的数列。</p><blockquote><p>因为其无参构造方法使用当前时间已经逝去的时间作为种子</p></blockquote></li></ul></li><li><p>Java 垃圾回收的工作原理：</p><ul><li><p>若一个对象被赋为<strong>空引用</strong>或没有使用，就成为 <code>garbage</code> 回收的候选者；如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;hello&quot;</span>);<br>String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;good&quot;</span>);<br>s1 = s2; <span class="hljs-comment">//此时字符串对象&quot;hello&quot;符合垃圾收集条件</span><br>String sb = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;WTF&quot;</span>);<br>sb = <span class="hljs-keyword">null</span>; <span class="hljs-comment">//此时&quot;WTF&quot;对象会因符合垃圾收集条件而被销毁</span><br></code></pre></td></tr></table></figure><blockquote><p>准确地来说，当没有任何活的线程<strong>能够访问</strong>一个对象时，该对象就<strong>符合垃圾收集条件</strong>。凭借此，程序员可以指定垃圾回收器回收对象。</p></blockquote></li><li><p>垃圾回收程序并<strong>不会马上</strong>回收该对象，而是在 JVM 探测出应用程序的内存不足的时候，或者是在 JVM 闲置时才进行回收；</p><blockquote><p>垃圾回收器<strong>不能保证有足够的的内存</strong>（无法保证 Java 程序从不产生内存溢出），它只能保证可用内存尽可能得到高效管理。</p></blockquote></li></ul><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210606221202.png" style="zoom: 67%;" /></li><li><p>你无法强迫垃圾回收器立即执行回收动作，但你可在 Java 程序<strong>请求</strong> （只是建议它）JVM 运行垃圾收集器，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Runtime rt = Runtime.getRuntime();<br>rt.gc(); <span class="hljs-comment">//请求垃圾收集</span><br></code></pre></td></tr></table></figure><p>另外，<code>finalize()</code> 方法（继承自 <code>Object</code>），能够在对象刚要被<strong>垃圾收集删除之前</strong>运行一些代码</p><blockquote><p>调用 <code>finalize()</code> 实际上能够导致对象免于被删除，比如说，在 <code>finalize()</code> 方法内可以编写代码把一个对象传递给另一个对象，<br>能够有效地阻止该对象符合垃圾收集条件。</p></blockquote><p>但是，任何情况下都<strong>无法强迫</strong>垃圾回收器立即执行回收操作，同样地，任何指定对象的 <code>finalize()</code> 方法<strong>可能运行</strong>，但是<strong>不能指望</strong>它。</p></li><li><p>Java 虚拟机内存模型：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210409001601.png" style="zoom:67%;" /><blockquote><p><strong>方法区和 Java 堆</strong> 是所有线程共享的数据区，其他均为线程私有的。</p></blockquote></li><li><p>Java 堆：几乎所有的<strong>对象和数组</strong>都是在堆中分配空间的。Java堆分为新生代和老年代连个部分，新生代用于存放刚刚产生的对象和年轻的对象，如果对象一直都没回收，生存得足够长，老年对象就会被移入到老年代。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210409001841386.png" alt="image-20210409001841386" style="zoom:67%;" /></li><li><p>静态方法不能够访问非静态数据域，非静态方法能够访问静态数据域</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210607211944.png" style="zoom: 67%;" /></li><li><p>当程序执行下面第三行代码时，由于第一次使用 <code>Student</code> 类，则系统会在第一次使用该类时加载这个类，并初始化这个类，完成初始化后，系统将在<strong>堆内存</strong>为 <code>Student</code> 类分配了一块内存区（其中也包含了类属性 <code>totalStudents</code>，并设置初值） 。接着创建一个 <code>Student</code> <strong>对象</strong>，并将其赋给了 <code>s</code> 变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student s = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;JoyDee&quot;</span>, <span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210606223538.png" style="zoom:80%;" /></li><li><p><code>public</code> 修饰符能够使被修饰的成员或顶级类，能够被所有类访问，不论是否处于<strong>同一包</strong>中。</p><p>而 <code>default</code> 通常被称为 <strong>包权限</strong>，即位于同一包中的类之间可互相访问其 <code>default</code> 成员和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fa</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fa</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(a);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WTF</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        Son s = <span class="hljs-keyword">new</span> Son();<br>        System.out.println(s.a);<br>        <span class="hljs-comment">//同一包下，WTF类能够访问Son从Fa继承下来的a变量</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210607213507.png" style="zoom:67%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210608213009.png" style="zoom: 67%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210608213213.png" style="zoom: 67%;" /></li><li><p><code>package</code> 语句作为 Java 源文件的<strong>第一条</strong>语句，指明该文件中定义的类所在的包。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JoyDee.weekFourTeen;<br><span class="hljs-comment">//该文件中所在的类位于 ./JoyDee/weekFourTeen 目录下</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>一个 Java 源文件只能包含一个 <code>package</code> 语句，但可包含多个 <code>import</code> 语句</p></blockquote></li><li><p>数据封装的好处——保持类的不变式，即构造方法和修改器都要求保证<strong>每个对象</strong>初始时一定要满足某个合法条件，而且是<strong>整个生命周期</strong>中都满足这个条件。如下对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSides</span><span class="hljs-params">(<span class="hljs-keyword">double</span> s1, <span class="hljs-keyword">double</span> s2, <span class="hljs-keyword">double</span> s3)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(s1 &lt; <span class="hljs-number">0</span> || s2 &lt; <span class="hljs-number">0</span> || s3 &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">if</span>((s1 + s2 &gt; s3) &amp;&amp; (s1 + s3 &gt; s2) &amp;&amp; (s2 + s3 &gt; s1))&#123;<br>        <span class="hljs-keyword">this</span>.side1 = s1;<br>        <span class="hljs-keyword">this</span>.side2 = s2;<br>        <span class="hljs-keyword">this</span>.side3 = s3;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>除此之外，其他好处见PPT（ch9 P141）</p></li><li><p>关于单例类，其特点在于：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210608214639.png" style="zoom: 67%;" /><p>暂时咕咕咕（P152）</p></li></ul><h1 id="Chapter-10-面向对象的思考"><a class="header-anchor" href="#Chapter-10-面向对象的思考">¶</a>Chapter 10. 面向对象的思考</h1><h2 id="类之间的关系"><a class="header-anchor" href="#类之间的关系">¶</a>类之间的关系</h2><ol><li><p><strong>依赖</strong>：A访问B的属性或方法，或者类A负责实例化类B</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615160502.png" style="zoom:67%;" /></li><li><p><strong>关联</strong>：A能够对B做什么</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615161544.png" style="zoom:67%;" /><p>牢记下面这张图：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615162452.png" style="zoom:67%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615162931.png" style="zoom:67%;" /><blockquote><p>关联关系和聚集关系统称为组合。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615164755.png" style="zoom:67%;" /></blockquote><ul><li><p><strong>聚集</strong>（has-a）：关联的特殊形式，一个对象可被多个其他聚集对象所拥有</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615163255.png" style="zoom:67%;" /></li><li><p><strong>组成</strong>（Composition）：聚合的加强形式，一个对象只归属于一个聚集对象。整体与部分的关系，部分不能离开整体而单独存在</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615163808.png" style="zoom:67%;" /></li></ul></li><li><p>泛化：一种继承关系。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615165631.png" style="zoom:67%;" /></li><li><p>实现：一种类与接口的关系</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615165822.png" style="zoom:67%;" /></li></ol><h2 id="包装类"><a class="header-anchor" href="#包装类">¶</a>包装类</h2><ul><li><p><code>char</code> 的包装类为 <code>Character</code>；<code>int</code> 的包装类为 <code>Integer</code></p></li><li><p>包装类没有无参数构造方法，所有的包装类的实例都是<strong>不可变</strong>的。</p><blockquote><p>注意，包装类一定有 <code>String</code> 的有参构造方法，另一有参构造方法的参数是它对应的基本数据类型，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Byte b = <span class="hljs-keyword">new</span> Byte((<span class="hljs-keyword">byte</span>) <span class="hljs-number">123</span>);<br>Byte c = <span class="hljs-keyword">new</span> Byte(<span class="hljs-number">123</span>); <span class="hljs-comment">//错误!!Byte没有Byte(int)的有参构造方法</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer x = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">23</span>); <span class="hljs-comment">//Integer(int value)</span><br>Integer y = <span class="hljs-keyword">new</span> Integer(<span class="hljs-string">&quot;23&quot;</span>)<span class="hljs-comment">//Integer(String s) </span><br>Integer z = Integer.valueOf(<span class="hljs-number">233</span>); <span class="hljs-comment">//static方法：valueOf(int x)</span><br>Integer q = Integer.valueOf(<span class="hljs-string">&quot;233&quot;</span>); <span class="hljs-comment">//static方法，传入String参数</span><br><br><span class="hljs-keyword">int</span> w = y.intValue(); <span class="hljs-comment">//Integer转换为int基本类型</span><br><span class="hljs-keyword">double</span> v = y.doubleValue(); <span class="hljs-comment">//Integer转换为double基本类型</span><br><span class="hljs-keyword">int</span> bit16 = Integer.parseInt(<span class="hljs-string">&quot;-FF&quot;</span>, <span class="hljs-number">16</span>); <span class="hljs-comment">//第二个参数是进制，returns -255</span><br></code></pre></td></tr></table></figure><p>坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer i = Integer.parseInt(<span class="hljs-string">&quot;23&quot;</span>, <span class="hljs-number">8</span>); <span class="hljs-comment">//正确，自动装箱</span><br>Double d = <span class="hljs-keyword">new</span> Double(); <span class="hljs-comment">//错误，没有无参构造方法</span><br><span class="hljs-keyword">double</span> j = (Double.valueOf(<span class="hljs-string">&quot;23.4&quot;</span>)).intValue(); <span class="hljs-comment">//正确，强制类型转换</span><br><span class="hljs-keyword">double</span> f = (Double.valueOf(<span class="hljs-string">&quot;23.4&quot;</span>)).toString(); <span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure></li><li><p>装箱一般发生在赋值和方法调用中</p><blockquote><p>编译器在生成类的字节码时，插入必要的方法调用，虚拟机只是执行这些字节码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer x = <span class="hljs-number">3</span> + <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">5</span>); <span class="hljs-comment">//正确</span><br>Integer y = <span class="hljs-number">3.0</span> <span class="hljs-comment">//错误，double不可能自动装箱为Integer，需要强制转换</span><br><br><span class="hljs-keyword">double</span> z = <span class="hljs-number">3.4</span>;<br>System.out.println(z.intValue()); <span class="hljs-comment">//错误，基本类型不可能调用包装类的方法</span><br><br>Integer x = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">2</span>);<br>Integer y = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">3</span>);<br>System.out.println(x * y); <span class="hljs-comment">//6</span><br>System.out.println(x.floatValue()); <span class="hljs-comment">//2.0</span><br></code></pre></td></tr></table></figure></li><li><p>包装类型的比较一定要使用 <code>equals</code> ，使用 <code>==</code> 比较两个包装对象，取决于是否值在 -128 到 127</p><blockquote><p>由源码的说明，如果 <code>int</code> 型参数 <code>i</code> 在 <code>IntegerCache.low</code> 和 <code>IntegerCache.high</code> 范围内，则直接由 <code>IntegerCache</code> 返回（即直接从缓存中取出）；否则 <code>new</code> 一个新的对象返回。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer a = <span class="hljs-number">9999</span>;<br>Integer b = <span class="hljs-number">9999</span>;<br>System.out.println(a.equals(b)); <span class="hljs-comment">//true</span><br>System.out.println(a == <span class="hljs-number">9999</span>); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="String"><a class="header-anchor" href="#String">¶</a>String</h2><ul><li><p>由于 <code>String</code> 是引用对象类型，故其对象存储的并非是字符串的值，而是它的对象引用</p></li><li><p>注意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String x = <span class="hljs-string">&quot;Java&quot;</span>;<br>x.concat(<span class="hljs-string">&quot;2333&quot;</span>);<span class="hljs-comment">//ignored</span><br>x = x.concat(<span class="hljs-string">&quot;Rules!&quot;</span>);<br>x.toLowerCase(); <span class="hljs-comment">//ignored</span><br>System.out.println(x); <span class="hljs-comment">//JavaRules!</span><br></code></pre></td></tr></table></figure></li><li><p>当编译器遇到 <code>String</code> 常量时，会先检查该池内是否已存在相同的，若有就将新的引用<strong>指向现有</strong>的 <code>String</code> ，它们会在内存中共享同一块地址。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210616195226.png" style="zoom:67%;" /></li><li><p>注意常量池坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;Java&quot;</span>;<br>String s1 = <span class="hljs-string">&quot;Java&quot;</span>;<br>String s2 = <span class="hljs-string">&quot;Ja&quot;</span> + <span class="hljs-string">&quot;va&quot;</span>;<br>System.out.println(s == s1); <span class="hljs-comment">//true</span><br>System.out.println(s == s2); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><blockquote><p><code>&quot;Ja&quot;</code> 和 <code>&quot;va&quot;</code> 都是字符串常量，当一个字符串由多个字符串常量连接而成时，它本身也是字符串常量</p></blockquote></li><li><p>检查一个字符串既不是 <code>null</code> ，也不是空串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(str.length() != <span class="hljs-number">0</span> &amp;&amp; str != <span class="hljs-keyword">null</span>)<br></code></pre></td></tr></table></figure></li><li><p>字符串转换为数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span>[] chars = <span class="hljs-string">&quot;Java&quot;</span>.toCharArray();<br></code></pre></td></tr></table></figure><p>数组转换为字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String str1 = <span class="hljs-keyword">new</span> String(<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[]&#123;<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>&#125;);<br>String str2 = String.valueOf(<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[]&#123;<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure></li><li><p><code>String</code> 类提供几个 <code>valueOf</code> 静态方法，可将 <code>char</code> 、<code>char[]</code> 、<code>double</code>、<code>long</code>、<code>int</code> 和 <code>float</code> 等数值转换为字符串</p></li><li><p>注意 <code>equals</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1 = <span class="hljs-string">&quot;Hello&quot;</span>;<br>String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-keyword">boolean</span> ans = s1.equals(s2); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li><li><p><code>StringBuilder</code> 或 <code>StringBuffer</code> 都能存储指定容量的字符串（若超出，则自动扩大）</p><blockquote><p>单任务访问：<code>StringBuilder</code>，多任务并发访问：<code>StringBuffer</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">StringBuilder s0 = <span class="hljs-string">&quot;0123&quot;</span>; <span class="hljs-comment">//错误！！！！</span><br>System.out.println(s1.substring(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">//区间为[0,2)</span><br>StringBuilder s1  = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;0123456789&quot;</span>);<br>s1.insert(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;zzzz&quot;</span>); <span class="hljs-comment">//第一个参数为偏移长度，故012zzzz3456789</span><br>s1.delete(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//区间为[0,2)</span><br></code></pre></td></tr></table></figure><blockquote><p><code>trimTosize()</code> 能够将 <code>StringBuilder</code> 对象的容量降到实际大小</p></blockquote></li><li><p>关于<code>subString()</code>：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621214429.png" style="zoom:80%;" /></li><li><p>关于 <code>compareTo()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1 = <span class="hljs-string">&quot;Wec&quot;</span>;<br>String s2 = <span class="hljs-string">&quot;Pro&quot;</span>;<br>System.out.println(s1.compareTo(s2)); <span class="hljs-comment">//7</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="Chapter-11-继承和多态"><a class="header-anchor" href="#Chapter-11-继承和多态">¶</a>Chapter 11. 继承和多态</h1><p>OOP语言的三个典型特征：封装、继承、<strong>多态</strong></p><h2 id="super-调用父类的构造方法"><a class="header-anchor" href="#super-调用父类的构造方法">¶</a>super 调用父类的构造方法</h2><ul><li><p>注意：<strong>父类的构造方法不能够被子类继承</strong>，若要调用父类构造方法，必须使用关键字 <code>super</code> ，且必须放在构造方法的<strong>第一行</strong>。</p></li><li><p>若子类没有显式地使用 <code>super</code> ，则父类<strong>无参</strong>构造方法将被自动地执行。</p><blockquote><p>Java程序在创建某个类的对象时，会隐式地创建该类的<strong>父类</strong>对象，只要有一个子类对象存在，则一定存在一个与之对应的父类对象。</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210609165606.png" style="zoom:80%;" /></li></ul><h2 id="构造方法链"><a class="header-anchor" href="#构造方法链">¶</a>构造方法链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Son s = <span class="hljs-keyword">new</span> Son();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pa</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Pa</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am a grandpa&quot;</span>); <span class="hljs-comment">//先执行</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fa</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pa</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Fa</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am a father&quot;</span>); <span class="hljs-comment">//再执行</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fa</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Son</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am a son&quot;</span>); <span class="hljs-comment">//最后执行</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fa</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Fa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am a father&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fa</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Son</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am a son&quot;</span>);<br>    &#125; <span class="hljs-comment">//此时编译错误，由于子类构造方法隐式调用了父类的无参构造方法，而Fa不存在无参构造方法（声明了有参构造方法就不会自动生成了），</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>若一个类要拓展，应提供一个无参构造方法以避免编程错误。</p></blockquote><h2 id="重写父类的方法"><a class="header-anchor" href="#重写父类的方法">¶</a>重写父类的方法</h2><blockquote><p>注意，重写都是针对<strong>实例方法</strong>，不能是类方法。因此若父类和子类都定义相同的静态方法，父类方法将会被隐藏</p></blockquote><p>“两同两小一大”规则：</p><ul><li>两同：方法名相同，形参列表相同</li><li>两小——返回值更加地具体：子类方法返回值类型 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span> 父类；子类方法声明抛出的异常类型 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span> 父类</li><li>一大——访问权限：子类方法的访问权限 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊇</mo></mrow><annotation encoding="application/x-tex">\supseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊇</span></span></span></span> 父类</li></ul><p>注意要点：</p><ul><li>子类对象无法访问父类被重写的方法，但可在子类方法体中调用</li><li>当父类方法具有 <code>private</code> 访问权限，则该方法对其子类是隐藏的，既不能访问，更不能重写</li><li>父类的构造方法不允许调用可被子类覆盖的方法，否则有可能抛出空指针异常</li></ul><h2 id="多态及动态绑定"><a class="header-anchor" href="#多态及动态绑定">¶</a>多态及动态绑定</h2><p><strong>多态</strong>：若编译时类型和运行时类型不一致，则出现所谓的多态。</p><blockquote><p>多态是指当系统A访问B的服务时，系统B可通过多种实现方式来提供服务，而这一切对系统A是透明的。</p></blockquote><p>其存在的条件如下：</p><ul><li><p>存在于继承中</p></li><li><p>必须有方法的覆盖</p><blockquote><p>对象的<strong>属性不具有多态性</strong>，因此访问数据域或静态方法时，引用变量所声明的类型在编译时就已经决定了使用哪个数据域或静态方法了。</p></blockquote></li></ul><p><strong>动态绑定</strong>的例子：若 <code>GraduateStudent</code> 中没有定义 <code>toString</code> 方法，JVM会向上搜索，找到父类 <code>Student</code>，结果发现了 <code>toString</code> 方法，就会调用该方法。</p><p>牢记下面的程序运行结果！</p><blockquote><p>引用变量在<strong>编译</strong>阶段只能调用其<strong>编译</strong>时类型所具有的方法，但<strong>运行</strong>时则执行它所<strong>运行</strong>时的类型所具有的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Son son = <span class="hljs-keyword">new</span> Son();<br>        System.out.println(<span class="hljs-string">&quot;年龄为&quot;</span> + son.age); <span class="hljs-comment">//20</span><br>        son.baseMethod();  <span class="hljs-comment">//执行从父类继承的run方法</span><br>        son.run(); <span class="hljs-comment">//执行当前类的run方法</span><br>        son.sonMethod(); <span class="hljs-comment">//执行当前类的sonMethod方法</span><br>        <br>        Fa tmp = <span class="hljs-keyword">new</span> Son(); <span class="hljs-comment">//发生多态，编译类型为Son，运行类型为Son</span><br>        System.out.println(<span class="hljs-string">&quot;年龄为&quot;</span> + tmp.age); <span class="hljs-comment">//50，小心坑点！！因为多态只发生在方法上!</span><br>        tmp.baseMethod(); <span class="hljs-comment">//父类的普通方法</span><br>        tmp.run(); <span class="hljs-comment">//注意！！！子类将父类的run方法覆盖了</span><br>        <span class="hljs-comment">//tmp.sonMethod(); 无法调用，必须通过强制类型转换成运行时类型，如下所示</span><br>        ((Son) tmp).sonMethod(); <span class="hljs-comment">//向下转型</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fa</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">50</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">baseMethod</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类的普通方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类的run方法&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fa</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">20</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;子类将父类的run方法覆盖了&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sonMethod</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;子类才拥有的方法！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用类型的强制转换"><a class="header-anchor" href="#引用类型的强制转换">¶</a>引用类型的强制转换</h2><ul><li><p><strong>父类-&gt;子类</strong>：引用类型间的转换中，父类 -&gt; 子类，且需要<strong>强制</strong>类型转换。其<strong>前提</strong>是，该引用类型实际必须是子类的实例才可以（也就说，编译类型为父类，运行类型为子类），否则会发生<code>ClassCastException</code>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Fa peo = <span class="hljs-keyword">new</span> Nephew();<br><span class="hljs-comment">//Son son = (Son)peo; 抛出异常</span><br>Nephew nephew = (Nephew)peo;<br></code></pre></td></tr></table></figure></li><li><p><strong>子类-&gt;父类</strong>：当将一个子类对象赋给父类引用变量时，被称为向上转型，自动地完成</p></li></ul><p>注意以下坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">((Fa)<span class="hljs-keyword">new</span> Son()).run(); <span class="hljs-comment">//子类将父类的run方法覆盖了，执行运行类型的方法</span><br></code></pre></td></tr></table></figure><h2 id="instanceof-运算符"><a class="header-anchor" href="#instanceof-运算符">¶</a>instanceof 运算符</h2><ul><li><p>格式：<code>引用类型的变量 instanceof 类名</code></p></li><li><p>在进行强制类型转换之前，可通过 <code>instanceof</code> 运算符判断源对象是否为目标的实例，从而避免出现上述异常</p></li><li><p>它用于判断该对象实际运行的类型（父类或祖先类，也满足条件），而不是看编译时的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Animal animal = <span class="hljs-keyword">new</span> Animal();<br>Cat c = <span class="hljs-keyword">new</span> Cat();<br>System.out.println(animal <span class="hljs-keyword">instanceof</span> Animal); <span class="hljs-comment">//true</span><br>System.out.println(animal <span class="hljs-keyword">instanceof</span> Dog); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="final修饰符"><a class="header-anchor" href="#final修饰符">¶</a>final修饰符</h2><p>（一）<strong>修饰两类变量</strong>：两类被 <code>final</code> 修饰的变量，必须<strong>被初始化</strong>，遵循着不可多次赋值或修改的原则</p><blockquote><p>注意，静态的 <code>final</code> 即 <code>static final</code>，（因为 <code>final</code> 必须要有初始化），要么在定义时初始化，要么就在静态初始化块赋值(因为 <code>static</code>)，此时就不能够在构造方法中赋值了!</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ben</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> x; <span class="hljs-comment">//基本类型常量，除非是通过构造方法(且只能赋值一次)，其他方法不能修改</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Ben</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//合法</span><br>        x = <span class="hljs-number">1</span>; <span class="hljs-comment">//编译出错！final修饰的常量只能被赋值一次!</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Ben</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.x = x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> idx = <span class="hljs-number">233</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Test cur = <span class="hljs-keyword">new</span> Test(); <span class="hljs-comment">//引用类型的常量</span><br>        cur.idx = <span class="hljs-number">666</span>; <span class="hljs-comment">//合法，允许修改引用变量所引用的Test对象的idx属性</span><br>        cur = <span class="hljs-keyword">new</span> Test(); <span class="hljs-comment">//编译出错，不能改变引用变量cur引用的对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（二）<strong>修饰方法</strong>：对父类的某个方法声明为 <code>final</code> 类型时，子类不能够覆盖该方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Object</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Class <span class="hljs-title">getClass</span><span class="hljs-params">()</span></span>&#123;...&#125;<br>    <span class="hljs-comment">//....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（三）<strong>修饰类</strong>：用<code>final</code> 修饰的类，不能够有子类，即不能被继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Math</span></span>&#123;...&#125;<br></code></pre></td></tr></table></figure><h2 id="ArrayList"><a class="header-anchor" href="#ArrayList">¶</a>ArrayList</h2><p>若将子类放入到定义为父类泛型的 <code>ArrayList</code> 中，将会丢失子类本身的数据类型。若要调用子类的方法，需要进行强制类型转换。</p><p>数组与 <code>ArrayList</code> 的异同：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210609200133.png" style="zoom:80%;" /><h1 id="Chapter-12-异常"><a class="header-anchor" href="#Chapter-12-异常">¶</a>Chapter 12. 异常</h1><h2 id="异常分类图"><a class="header-anchor" href="#异常分类图">¶</a>异常分类图</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615142708.png" style="zoom:80%;" /><ul><li><p><code>Error</code> 类以及子类表示程序本身无法修复，编译器不会检查他们，其错误一般由Java虚拟机抛出，此时程序就会被终止。</p><blockquote><p>一般不会通过继承 <code>Error</code> 类来创建用户自定义的错误类</p></blockquote></li><li><p><code>RuntimeException</code> <strong>运行时异常（免检异常）</strong>：当出现这类异常，<strong>即便没有捕获或者抛出，也会编译通过</strong>。一旦出错，则建议终止程序，如：</p><blockquote><p>通常是执行了错误操作，需要改进程序设计</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>System.out.println(arr[<span class="hljs-number">4</span>]);<br><span class="hljs-comment">//Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException ...</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615145822.png" style="zoom:67%;" /></li><li><p>其他 <code>Exception</code> 类以及子类均属于<strong>编译时异常（受检异常）</strong>，即Java编译器会检查它，当程序中可能出现这类异常时，要么用 <code>try-catch</code> 语句捕获，要么用 <code>throws</code> 子句声明抛出，否则编译不会通过</p><blockquote><p>通常是能够被修复的，不会导致整个程序的终止</p></blockquote></li></ul><h2 id="异常跟踪栈"><a class="header-anchor" href="#异常跟踪栈">¶</a>异常跟踪栈</h2><p>异常跟踪栈与“方法调用栈”方向相反，异常先从<strong>发生异常的方法</strong>逐渐向外传播，首先传给该方法的调用者，然后再向上传…直至最后传给 <code>main</code> 方法。</p><blockquote><p>若 <code>main</code> 依然没有处理异常，则JVM会中止该程序，并打印异常的跟踪栈。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SelfException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SelfException</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SelfException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SelfException</span>&#123;<br>        firstMethod();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">firstMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SelfException</span>&#123;<br>        secondMethod();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">secondMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SelfException</span>&#123;<br>        thirdMethod();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">thirdMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SelfException</span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SelfException(<span class="hljs-string">&quot;我是异常，来自thirdMethod&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果显示如下：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615114405.png" style="zoom: 80%;" /><h2 id="异常处理方式"><a class="header-anchor" href="#异常处理方式">¶</a>异常处理方式</h2><p>①声明一个异常；②抛出一个异常；③捕获一个异常</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615144548.png" style="zoom: 67%;" /><ul><li><p><code>throws</code> 声明<strong>可能</strong>会出现的异常，若 <code>main</code> 方法不知道如何处理，则可以使用 <code>throws</code> 声明抛出给 JVM 进行处理——打印异常跟踪栈，终止程序运行。</p></li><li><p>若 <code>try</code> 块被执行一次，则 <code>try</code> 块后只有一个 <code>catch</code> 块会被执行（除非使用循环）</p></li><li><p>若存在 <code>try</code> 块时，<strong>总会</strong>执行 <code>finally</code> 块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IOException();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;1111&quot;</span>); <br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;2222&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;3333&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出：</span><br><span class="hljs-comment">//1111</span><br><span class="hljs-comment">//2222</span><br><span class="hljs-comment">//3333</span><br></code></pre></td></tr></table></figure></li><li><p><strong>注意</strong>：<code>finally</code> 语句不被执行的唯一情况是先执行了用于终止程序（终止当前Java虚拟机进程）的 <code>System.exit()</code> 方法。</p><p>即便在 <code>try</code> 或 <code>catch</code> 代码块中的 <code>return</code> 语句时，只要有 <code>finally</code> 代码块，都会执行。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615151514.png" style="zoom: 67%;" /><p>再注意，<code>finally</code> 代码块不能通过重新给变量赋值的方式来改变 <code>return </code> 语句的<strong>返回值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> x = <span class="hljs-number">2</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(woc()); <span class="hljs-comment">//i = 1</span><br>        System.out.println(x); <span class="hljs-comment">//x = 3</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">woc</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IOException();<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            ++i;<br>            x++;<br>            System.out.println(<span class="hljs-string">&quot;In the final block: &quot;</span> + i); <span class="hljs-comment">//i = 2</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615152507.png"/></li></ul><h1 id="Chapter-13-抽象类和接口"><a class="header-anchor" href="#Chapter-13-抽象类和接口">¶</a>Chapter 13. 抽象类和接口</h1><h2 id="抽象类定义"><a class="header-anchor" href="#抽象类定义">¶</a>抽象类定义</h2><p>有抽象方法的类<strong>只能</strong>定义为抽象类，抽象类可以没有抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> 返回类型 方法名 (参数列表);<span class="hljs-comment">//抽象方法不能有方法体</span><br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>抽象类可以包含<strong>属性</strong>、方法（普通方法和抽象方法均可）、<strong>构造方法</strong>（只能是普通方法，不能被 <code>abstract</code> 修饰）。</p><blockquote><p>抽象类的构造方法不能用于创建实例，主要用于被子类调用</p></blockquote><p>以下三种情况，<strong>只能定义</strong>为抽象类：</p><ul><li>类中定义了一个抽象方法</li><li>继承了抽象父类，但没实现父类包含的<strong>所有</strong>抽象方法</li><li>实现了接口，但没实现接口包含的<strong>所有</strong>抽象方法</li></ul><h2 id="abstract关键字"><a class="header-anchor" href="#abstract关键字">¶</a>abstract关键字</h2><p><code>abstract</code> 不能用于修饰<strong>构造</strong>方法。</p><p>此外：</p><ul><li>对于类或者方法的修饰， <code>final</code> 与 <code>abstract</code> 不能够同时使用</li><li>对于方法， <code>static</code> 与 <code>abstract</code> 不能够同时使用</li><li>对于方法，<code>private</code> 与 <code>abstract</code> 不能够同时使用</li></ul><h2 id="接口定义"><a class="header-anchor" href="#接口定义">¶</a>接口定义</h2><p>相比于抽象类，接口更加特殊，不能够包含普通方法，其<strong>所有方法</strong>都是抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] <span class="hljs-class"><span class="hljs-keyword">interface</span> 接口名 </span>&#123;<br>    <span class="hljs-number">0</span>到n个常量定义...<br>    <span class="hljs-number">0</span>到多个抽象方法定义...<br>    <span class="hljs-number">0</span>到多个内部类、接口、枚举定义...<br>    <span class="hljs-number">0</span>到多个私有方法、默认方法（实例方法）或类方法定义....(JDK <span class="hljs-number">1.8</span> 之后)<br>&#125;<br></code></pre></td></tr></table></figure><p>接口的声明的<strong>属性</strong>默认（不论是否显式声明）为 <code>public static final</code> ，同时，接口中定义的方法默认 <code>public abstract</code> （即抽象方法），举例如下：</p><blockquote><p>接口中<strong>无构造方法和初始化</strong>，故接口里定义的属性只能在定义时指定默认值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id = <span class="hljs-number">1</span>; <span class="hljs-comment">//相当于 public static final int id = 1</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//相当于 public abstract void start()</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//相当于 public abstract void run()</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//相当于 public abstract void stop()</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里有小坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//根据”两小一大“，方法m的访问权限(大)必须是public</span><br>        System.out.println(<span class="hljs-string">&quot;2333&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外，一个类不能继承多个类，但一个接口可能继承多个接口。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210609211728.png" style="zoom:67%;" /><h2 id="Comparable接口"><a class="header-anchor" href="#Comparable接口">¶</a>Comparable接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(T o)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现 <code>Comparable</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 <span class="hljs-title">implement</span> <span class="hljs-title">Comparable</span>&lt;类名&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">CompareTo</span><span class="hljs-params">(T other)</span></span>&#123;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Cloneable-接口"><a class="header-anchor" href="#Cloneable-接口">¶</a>Cloneable 接口</h2><p><code>Cloneable</code> 接口是空的，称为标记接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Cloneable</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>类只有当<strong>实现了 <code>Cloneable</code> 接口</strong>（即标记为可复制的），其对象内部才能够<strong>使用 <code>Object</code> 类</strong>中定义的 <code>clone</code> 方法实现克隆功能。</p><blockquote><p>若没有实现该接口，就调用 <code>Object</code> 的 <code>clone()</code> 会抛出异常</p></blockquote><p>该方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">native</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException</span>;<br></code></pre></td></tr></table></figure><blockquote><p>由于是 <code>protected</code> ，只能在实现该接口的对象的方法内部调用，并且需要对该方法进行覆盖。如下调用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> idx = <span class="hljs-number">233</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Fa c = <span class="hljs-keyword">new</span> Fa();<br>        System.out.println(c.hashCode()); <span class="hljs-comment">//989110044</span><br>        System.out.println(c.date.hashCode()); <span class="hljs-comment">//-194351978</span><br>        Fa a = (Fa)c.clone();<br>        System.out.println(a.hashCode()); <span class="hljs-comment">//424058530</span><br>        System.out.println(a.date.hashCode()); <span class="hljs-comment">//-194351978</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fa</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">50</span>;<br>    <span class="hljs-keyword">public</span> Date date = <span class="hljs-keyword">new</span> Date();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();<br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这个过程中的浅拷贝与深拷贝</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210610134314.png" style="zoom:67%;" /><h2 id="接口与抽象类的相同点"><a class="header-anchor" href="#接口与抽象类的相同点">¶</a>接口与抽象类的相同点</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210610134451.png" style="zoom: 50%;" /><h2 id="接口与抽象类的不同点"><a class="header-anchor" href="#接口与抽象类的不同点">¶</a>接口与抽象类的不同点</h2><table><thead><tr><th></th><th>接口</th><th>抽象类</th></tr></thead><tbody><tr><td>成员数据</td><td>必须常量</td><td>既可常量，也可变量</td></tr><tr><td>成员方法</td><td>不能有方法体的普通方法</td><td>完全可以包含普通方法</td></tr><tr><td>构造方法</td><td>不能够包含</td><td>可以包含，但不能被 <code>abstract</code> 修饰，且不能用来创建实例</td></tr><tr><td>共同的根</td><td>无</td><td><code>Object</code></td></tr><tr><td>初始化块</td><td>不能</td><td>可以</td></tr><tr><td>实现与继承</td><td>一个类可直接实现多个接口，一个接口可继承多个接口</td><td>一个类最多只有一个直接父类</td></tr></tbody></table><h2 id="李氏替换原则"><a class="header-anchor" href="#李氏替换原则">¶</a>李氏替换原则</h2><p>主要用于判断两个类之间是否符合继承关系。父类出现的地方，子类可以将其替换，且程序的行为不会发生改变。</p><p>可以理解为，若一个类继承了另一个类，两者的行为应该是一致的。子类不能添加任何父类没有的<strong>附加约束</strong>（比如正方形在设置长度或宽度时要受到长宽相等的约束）。</p><p>若违背该原则，应该将两个类共有属性及方法提炼出来作为抽象父类，各自继承父类并重写属于自己的方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chapter-1-概述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chapter-1-概述&quot;&gt;¶&lt;/a&gt;Chapter 1 概述&lt;/h1&gt;
&lt;h2 id=&quot;Java跨平台&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#</summary>
      
    
    
    
    <category term="Java" scheme="https://j-strawhat.github.io/categories/Java/"/>
    
    <category term="JavaSE" scheme="https://j-strawhat.github.io/categories/Java/JavaSE/"/>
    
    
    <category term="JavaSE" scheme="https://j-strawhat.github.io/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>数电简要总结</title>
    <link href="https://j-strawhat.github.io/posts/c6047a43/"/>
    <id>https://j-strawhat.github.io/posts/c6047a43/</id>
    <published>2021-05-26T14:00:00.000Z</published>
    <updated>2021-07-20T10:02:13.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chap-1-数制和码制"><a class="header-anchor" href="#Chap-1-数制和码制">¶</a>Chap 1. 数制和码制</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210526221408.png" style="zoom: 67%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210526223541.png" style="zoom: 67%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527000847.png" style="zoom: 50%;" /><blockquote><p>ASCII是一组七位二进制代码，共127个</p></blockquote><h2 id="Chap-2-逻辑代数"><a class="header-anchor" href="#Chap-2-逻辑代数">¶</a>Chap 2. 逻辑代数</h2><h3 id="常用公式"><a class="header-anchor" href="#常用公式">¶</a>常用公式</h3><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>+</mo><mi>B</mi><mo>=</mo><mi>A</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">A+B=A+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>  或者 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>B</mi><mo>=</mo><mi>A</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">AB=AC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，均不能推出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo>=</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">B=C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>+</mo><mi>B</mi><mi>C</mi><mo>=</mo><mo stretchy="false">(</mo><mi>A</mi><mo>+</mo><mi>B</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>A</mi><mo>+</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A+BC=(A+B)(A+C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span></p><blockquote><p>证明：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>右式</mtext><mo>=</mo><mi>A</mi><mi>A</mi><mo>+</mo><mi>A</mi><mi>C</mi><mo>+</mo><mi>A</mi><mi>B</mi><mo>+</mo><mi>B</mi><mi>C</mi><mo>=</mo><mi>A</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>C</mi><mo>+</mo><mi>B</mi><mo stretchy="false">)</mo><mo>+</mo><mi>B</mi><mi>C</mi><mo>=</mo><mi>A</mi><mo>+</mo><mi>B</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">右式=AA+AC+AB+BC=A(1+C+B)+BC=A+BC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">右式</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">AA</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span></span></span></span></p></blockquote></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>A</mi><mo>+</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mo>+</mo><mi>A</mi><mi>B</mi><mo>=</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">A(A+B)=A+AB=A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>+</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mi>B</mi><mo>=</mo><mi>A</mi><mo>+</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A+\overline{A}B=A+B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527093141.png" style="zoom:50%;" /></blockquote></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>B</mi><mo>+</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mi>C</mi><mo>+</mo><mi>B</mi><mi>C</mi><mi>D</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>=</mo><mi>A</mi><mi>B</mi><mo>+</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mi>C</mi></mrow><annotation encoding="application/x-tex">AB+\overline{A}C+BCD...=AB+\overline{A}C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">...</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><blockquote><p>应用：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi><mo>=</mo><mi>A</mi><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mi>B</mi><mtext>（与</mtext><mo>−</mo><mtext>或式）</mtext><mo>=</mo><mi>A</mi><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mi>B</mi><mo>+</mo><mi>A</mi><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mi>B</mi><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover><mo>=</mo><mo stretchy="false">(</mo><mi>A</mi><mo>+</mo><mi>B</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mtext>或</mtext><mo>−</mo><mtext>与式</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Y=A\overline{B}+\overline{C}B（与-或式）=A\overline{B}+\overline{C}B+A\overline{C}+B\overline{B}=(A+B)(\overline{B}+\overline{C})(或-与式)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord cjk_fallback">（与</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">或式）</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord cjk_fallback">或</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">与式</span><span class="mclose">)</span></span></span></span></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527104306.png" style="zoom: 50%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210527104901439.png" alt="image-20210527104901439" style="zoom:50%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527105743.png" style="zoom:50%;" /></blockquote></li></ul><h3 id="三个基本定理"><a class="header-anchor" href="#三个基本定理">¶</a>三个基本定理</h3><ul><li><p>代入定理：将逻辑等式两边的某一变量均用同一逻辑函数替代，等式仍然成立。</p></li><li><p>反演定理：任意逻辑函数式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>，将 “<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">⋅</span></span></span></span>&quot;换成 “+”，”+“换成”<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">⋅</span></span></span></span>&quot;，“0&quot;换成&quot;1”，“1&quot;换成&quot;0”，<strong>原变量换成反变量，反变量换成原变量</strong>，得到反函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span></p><blockquote><p>不改变原运算次序，不属于单变量的反号要保留。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527094529.png" style="zoom:67%;" /></blockquote></li><li><p>对偶定理：若两逻辑式相等，则它们的对偶式也相等。</p><p>其中，对偶式：任意逻辑函数式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>，将 “<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">⋅</span></span></span></span>&quot;换成 “+”，”+“换成”<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">⋅</span></span></span></span>&quot;，“0&quot;换成&quot;1”，“1&quot;换成&quot;0”，得到对偶式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>Y</mi><mi>D</mi></msup></mrow><annotation encoding="application/x-tex">Y^D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span></span></span></span></span></span></span></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527094804.png" style="zoom: 50%;" /></li></ul><h3 id="最小项"><a class="header-anchor" href="#最小项">¶</a>最小项</h3><p>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 个变量的逻辑函数共有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span> 个最小项</p><h3 id="卡诺图"><a class="header-anchor" href="#卡诺图">¶</a>卡诺图</h3><p>五变量卡诺图：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527110845.png" style="zoom: 67%;" /><h2 id="Chap-3-门电路"><a class="header-anchor" href="#Chap-3-门电路">¶</a>Chap 3. 门电路</h2><p>半导体三极管作为开关元件时工作在<strong>饱和</strong>状态和<strong>截止</strong>状态。</p><p>三态门的输出有三个状态：高电平、低电平、高阻态。</p><p><strong>集电极开路</strong>与非门（OC）门：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210526213859.png"/><p>在TTL电路中，OC门是可直接相连完成<strong>线与</strong>逻辑功能的门电路。（CMOS的OD门同理）</p><table><thead><tr><th>集成门电路</th><th>输出结构门电路</th><th>缺点</th><th>优点</th></tr></thead><tbody><tr><td>TTL（三极管-三极管逻辑）</td><td>OC门</td><td>功耗大</td><td>开关速度高，抗干扰能力强，带负载的能力强</td></tr><tr><td>CMOS（简称为HC）</td><td>OD门</td><td>工作速度稍低</td><td>制造工艺简单、<strong>功耗小</strong>、输入阻抗高、<strong>集成度高</strong>、电源电压范围宽等</td></tr></tbody></table><p>对于TTL门电路，输入电压小于0.4V，或者阻值小于0.7K欧，相当于接<strong>低电平</strong>；输入电压大于2.4V，相当于接高电平。</p><blockquote><p>门电路若出现“倒三角”符号，则属于三态门。若使能端无效，输出<strong>高阻态</strong>；若使能端有效，正常输出高低电平。</p></blockquote><p>对于CMOS门电路，高电平接近电源电压，低电平接近0V。</p><p>针对于<strong>悬空</strong>，TTL门电路的悬空相当于接入高电平，CMOS门电路<strong>不允许悬空</strong>。</p><p>【附】</p><p>存储器容量=字数*位数，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 条地址线，即有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>个存储空间（字数）；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>条数据线，则有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 位。</p><h2 id="Chap-4-组合逻辑电路"><a class="header-anchor" href="#Chap-4-组合逻辑电路">¶</a>Chap 4. 组合逻辑电路</h2><h3 id="零、总表"><a class="header-anchor" href="#零、总表">¶</a>零、总表</h3><table><thead><tr><th>功能</th><th>型号</th></tr></thead><tbody><tr><td>优先编码器</td><td>74HC148</td></tr><tr><td>3线-8线译码器</td><td>74HC138</td></tr><tr><td>显示译码器</td><td>7448</td></tr><tr><td>双4选1数据选择器</td><td>74GC153</td></tr><tr><td>全加器</td><td>74HC183</td></tr></tbody></table><h3 id="一、编码器"><a class="header-anchor" href="#一、编码器">¶</a>一、编码器</h3><p><strong>逻辑功能</strong>：将输入的每一个高、低电平信号编成一个对应的二进制代码。（译码器反之）</p><p>普通编码器</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527185720.png" style="zoom:80%;" /><p>优先编码器，实例：74HC148</p><blockquote><p>允许多个输入端同时有效（低电平），优先级最高为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>I</mi><mn>7</mn></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{I_7}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：选通输入端；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mi>s</mi></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>：选通输出端；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mrow><mi>E</mi><mi>X</mi></mrow></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_{EX}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">EX</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>：输出拓展端</p></blockquote><p>⭐️正常工作：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover><mo>=</mo><mn>0</mn><mtext>，</mtext><mover accent="true"><msub><mi>Y</mi><mi>s</mi></msub><mo stretchy="true">‾</mo></mover><mo>=</mo><mn>1</mn><mtext>，</mtext><mover accent="true"><msub><mi>Y</mi><mrow><mi>E</mi><mi>X</mi></mrow></msub><mo stretchy="true">‾</mo></mover><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\overline{S}=0，\overline{Y_s}=1，\overline{Y_{EX}}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord cjk_fallback">，</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">EX</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527190627.png" style="zoom:80%;" /><blockquote><p>若要拓展多片，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mi>s</mi></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>相连，前一片无编码输入（输入全1）时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mi>s</mi></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>输出为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>为0</p></blockquote><h3 id="二、译码器"><a class="header-anchor" href="#二、译码器">¶</a>二、译码器</h3><h4 id="3线-8线译码器"><a class="header-anchor" href="#3线-8线译码器">¶</a>3线-8线译码器</h4><p>实例：74HC138</p><p>⭐️正常工作：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><mo>=</mo><mn>0</mn><mtext>，</mtext><mover accent="true"><msub><mi>S</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mo>+</mo><mover accent="true"><msub><mi>S</mi><mn>3</mn></msub><mo stretchy="true">‾</mo></mover><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">S_1=0，\overline{S_2}+\overline{S_3}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p><blockquote><p>要得到最小项表达式，需要对输出端进行与非</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527192002.png" style="zoom:80%;" /><blockquote><p>若拓展多片，增加一个输入端<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">D_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<strong>同时</strong>控制其中一片的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>S</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mtext>、</mtext><mover accent="true"><msub><mi>S</mi><mn>3</mn></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S_2}、\overline{S_3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>以及另一片的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">S_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></blockquote><h4 id="显示译码器"><a class="header-anchor" href="#显示译码器">¶</a>显示译码器</h4><p>实例：7448（输出高电平译码，配接共阴极数码管）</p><p>灭灯输入控制端<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>B</mi><mi>I</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{BI}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：无论输入状态如何，数码管熄灭</p><p>灭零输出端 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>R</mi><mi>B</mi><mi>O</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{RBO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">RBO</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：为零时，将本应显示的零熄灭</p><h3 id="三、数据选择器"><a class="header-anchor" href="#三、数据选择器">¶</a>三、数据选择器</h3><p>双4选1数据选择器74HC153</p><p><strong>逻辑功能</strong>：根据给定的输入地址代码，从一组输入信号中选出指定的一个送至输出端</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527195318.png" style="zoom: 67%;" /><h3 id="四、竞争与冒险"><a class="header-anchor" href="#四、竞争与冒险">¶</a>四、竞争与冒险</h3><ul><li><p>竞争：两个输入信号同时向相反的逻辑电平跳变</p></li><li><p>竞争-冒险：由于竞争而在电路输出端可能产生尖峰脉冲的现象。</p></li><li><p>消除竞争-冒险的方法：接入滤波电容、引入选通脉冲、修改逻辑设计。</p></li></ul><h2 id="Chap-5-触发器"><a class="header-anchor" href="#Chap-5-触发器">¶</a>Chap 5. 触发器</h2><p>触发器的<strong>空翻</strong>：在CP有效期间，若同步触发器的输入信号发生多次变化时，其输出状态也会相应产生多次变化。</p><h2 id="Chap-6-时序逻辑电路"><a class="header-anchor" href="#Chap-6-时序逻辑电路">¶</a>Chap 6. 时序逻辑电路</h2><p>基本单元：触发器</p><p>时序逻辑电路通常包含组合电路和存储电路</p><p>按<strong>输出信号特点分类</strong>：</p><ul><li>米利型：与输入信号有关</li><li>穆尔型：输出信号只取决于电路的状态</li></ul><p>逻辑电路的方程组：输出方程、驱动方程、状态方程</p><p>状态转换表：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527201851.png" style="zoom:80%;" /><p>总表：</p><table><thead><tr><th>功能</th><th>型号</th></tr></thead><tbody><tr><td>双向移位寄存器</td><td>74HC194A</td></tr><tr><td>同步十进制加法计数器</td><td>74LS160</td></tr><tr><td>4位（16进制）同步二进制计数器</td><td>74LS161（ET=0时，保持且C=0）</td></tr><tr><td>集成同步十进制可逆计数器</td><td>74LS190</td></tr><tr><td>四位二进制可逆计数器</td><td>74LS191</td></tr></tbody></table><p>任意进制<strong>设计</strong>方法：</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>&lt;</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">M&lt;N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>：置零法、置数法、进位C置数法（置位法）</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>&gt;</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">M&gt;N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>：整体清零法或整体置数法、分解法</p></li></ol><p>芯片<strong>级联</strong>方法：</p><p>串行进位方式、并行进位方式</p><h2 id="Chap-7-FPGA"><a class="header-anchor" href="#Chap-7-FPGA">¶</a>Chap 7. FPGA</h2><p>可编程逻辑器件（PLD）及专用集成电路（ASIC）的出现，设计方式转变为“电子设计自动化”（Electronic Design Automation，EDA）。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210526212707.png"/><blockquote><p>CPLD — Complex Programmable Logic Device ，复杂可编程逻辑器件</p><p>FPGA — Field Programmable Gate Array 现场可编程门阵列，一种集成电路芯片</p></blockquote><p>其中，硬件描述语言（HDL）是EDA技术的重要组成部分，常见的硬件描述语言包括Verilog、VHDL等。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210526212737.png"/><p>模块(module)是Verilog HDL 语言中描述电路的基本单元，而模块的两种描述方式：行为描述方式、结构描述方式。</p><h3 id="Verilog"><a class="header-anchor" href="#Verilog">¶</a>Verilog</h3><p>**零、**模板</p><blockquote><p>设计</p></blockquote><blockquote><p>设计具有异步清零端的上升沿触发的T触发器</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> tff_aync_reset(t, clk, reset, q);<br>    <span class="hljs-keyword">input</span> t, clk, reset;<br>    <span class="hljs-keyword">output</span> q;<br>    <span class="hljs-keyword">reg</span> q;<br>    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> reset)<br>        <span class="hljs-keyword">if</span>(~reset)<br>            <span class="hljs-keyword">begin</span><br>                q &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>            <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">begin</span><br>                q &lt;= !q;<br>            <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>**一、**数据类型若不做说明的话，默认是 <code>wire</code> 型的（电路间的连线）</p><p><strong>二、</strong><code>assign</code> 语句作为连续赋值语句（即总处于激活状态），一旦表达式中操作数中<strong>有变化</strong>，立即计算、赋值。</p><blockquote><p>注意：赋值目标必须是 <code>wire</code> 型</p></blockquote><p><code>always</code> 语句又称过程块（不是总处于激活状态），当满足激活条件时才能被执行，否则被挂起。</p><blockquote><p>注意：赋值目标必须是 <code>reg</code> 型</p></blockquote><p>其中，激活条件分两种：边沿敏感、电平敏感（即信号列表中任一个信号有变化）</p><p>此外，该过程块还能够使用 <code>if</code>、<code>case</code> 等行为描述语句，还能够描述边沿变化。</p><blockquote><p>当 <code>always</code> 语句块包含多条赋值语句需用：<code>begin</code> 和 <code>end</code> 包括起来，如：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">always</span> @(a, b, cin)<br><span class="hljs-keyword">begin</span><br>    s = a ^ b ^ cin;<br>    cout = (a &amp; b)|(a &amp; cin)|(b &amp; cin);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></blockquote><p>**三、**阻塞赋值 <code>=</code> 是语句顺序执行，前面执行完才能执行后面，如：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">赋值目标<span class="hljs-number">1</span> = 表达式<span class="hljs-number">1</span>;<br>赋值目标<span class="hljs-number">2</span> = 表达式<span class="hljs-number">2</span>; <span class="hljs-comment">//先执行</span><br></code></pre></td></tr></table></figure><p>非阻塞赋值 <code>&lt;=</code>：所有语句并行执行。</p><p><strong>四、<strong>逻辑性（关系）运算结果可能是 <code>1</code> 、<code>0</code>、</strong><code>x</code>（不确定）</strong>。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">Y = (<span class="hljs-number">3</span> &lt;= <span class="hljs-number">1&#x27;bx</span>); <span class="hljs-comment">//结果为x</span><br></code></pre></td></tr></table></figure><blockquote><p>当然，逻辑值还有 <code>z</code>（高阻态）</p></blockquote><p>区别 <code>==</code> 与 <code>===</code>（case等于），第一个运算符的结果是上述三种，而第二个运算符结果只能 <code>1</code> 或 <code>0</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">Y = (<span class="hljs-number">1&#x27;b1</span> == <span class="hljs-number">1&#x27;bx</span>); <span class="hljs-comment">//结果为x</span><br>Y = (<span class="hljs-number">1&#x27;b1</span> === <span class="hljs-number">1&#x27;bx</span>); <span class="hljs-comment">//结果为0</span><br>Y = (<span class="hljs-number">1&#x27;bx</span> === <span class="hljs-number">1&#x27;bx</span>); <span class="hljs-comment">//结果为1</span><br></code></pre></td></tr></table></figure><p><strong>五、</strong><code>&#123;&#125;</code> 为拼接复制运算符，能够将多个操作数拼接起来，举例如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> &#123;CO, S&#125; = A + B + CI;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Chap-1-数制和码制&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chap-1-数制和码制&quot;&gt;¶&lt;/a&gt;Chap 1. 数制和码制&lt;/h2&gt;
&lt;img src=&quot;https://gitee.com/j__strawhat/MyImages</summary>
      
    
    
    
    <category term="其他知识技术分享" scheme="https://j-strawhat.github.io/categories/%E5%85%B6%E4%BB%96%E7%9F%A5%E8%AF%86%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    <category term="计算机电路基础" scheme="https://j-strawhat.github.io/categories/%E5%85%B6%E4%BB%96%E7%9F%A5%E8%AF%86%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="电路" scheme="https://j-strawhat.github.io/tags/%E7%94%B5%E8%B7%AF/"/>
    
    <category term="数电" scheme="https://j-strawhat.github.io/tags/%E6%95%B0%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis 学习笔记</title>
    <link href="https://j-strawhat.github.io/posts/c714d83/"/>
    <id>https://j-strawhat.github.io/posts/c714d83/</id>
    <published>2021-03-07T05:38:53.000Z</published>
    <updated>2021-07-20T10:02:13.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-1-框架概述"><a class="header-anchor" href="#Chapter-1-框架概述">¶</a>Chapter 1. 框架概述</h1><h2 id="1-1-三层架构"><a class="header-anchor" href="#1-1-三层架构">¶</a>1.1 三层架构</h2><p>三层架构所包含的三层：</p><ul><li><strong>界面层</strong>（User Interface Layer）：主要功能为接收用户的数据，显示请求的处理结果。</li><li><strong>业务逻辑层</strong>（Business Logic Layer）：接收表示传递过来的数据，检查数据，计算业务逻辑，调用数据访问层获取数据。</li><li><strong>数据访问层</strong>（Data Access Layer）：与数据库打交道，主要实现对数据的增、删、改、查。将存储在数据库中的数据提交给业务层，同时将业务层处理的数据保存到数据库。</li></ul><p>处理请求的交互：</p><p>用户-&gt;界面层-&gt;业务逻辑层-&gt;数据访问层-&gt;DB数据库</p><h2 id="1-2-框架定义"><a class="header-anchor" href="#1-2-框架定义">¶</a>1.2 框架定义</h2><p>框架（Framework），是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法。另一种认为，框架可被应用开发者定制的应用骨架、模板。</p><p>简单的说，框架其实是半成品软件，就是一组组件，供你使用完成你自己的系统。但它是安全的，可复用的，不断升级的软件。</p><h2 id="1-3-常用框架"><a class="header-anchor" href="#1-3-常用框架">¶</a>1.3 常用框架</h2><ul><li>MyBatis 框架：基于 Java 的持久层框架，内部封装了 JDBC。它通过 XML 或 注解 两种方式将需执行的 SQL 语句配置起来，并通过 Java 对象和 SQL 的动态参数进行映射生成最终执行的 SQL 语句，最后再由 MyBatis 框架执行 SQL 并将结果映射到 Java 对象并返回</li><li>Spring 框架：解决业务对象与功能模块之间的耦合。Spring 是一个轻量级控制反转（IOC）和面向切面（AOP）的容器。</li><li>Spring MVC 框架：为 Spring 框架提供了构建 Web 应用程序的能力。</li></ul><h1 id="Chapter-2-MyBatis-概述"><a class="header-anchor" href="#Chapter-2-MyBatis-概述">¶</a>Chapter 2. MyBatis 概述</h1><h2 id="2-1-MyBatis-简介"><a class="header-anchor" href="#2-1-MyBatis-简介">¶</a>2.1 MyBatis 简介</h2><p>MyBatis 是一个优秀的基于 Java 的持久层框架，内部封装了 <strong>JDBC</strong>，开发者只需要关注 SQL 语句本身，而 MyBatis 已经代替开发者完成了这些任务：</p><ol><li><p>注册数据库的驱动，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>创建 JDBC 中必须使用的 <code>Connection</code>、<code>Statement</code>、<code>ResultSet</code> 对象。</p></li><li><p>从 XML 中获取 SQL 并执行 SQL 语句，将 <code>ResultSet</code> 结果转换为 Java 对象</p></li><li><p>关闭资源，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ResultSet.close();<br>Statement.close();<br>Connection.close();<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-2-快速入门"><a class="header-anchor" href="#2-2-快速入门">¶</a>2.2 快速入门</h2><h3 id="2-2-1-创建-MySQL-数据库的表（略）"><a class="header-anchor" href="#2-2-1-创建-MySQL-数据库的表（略）">¶</a>2.2.1 创建 MySQL 数据库的表（略）</h3><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210308162016315.png" alt="image-20210308162016315"></p><h3 id="2-2-2-创建-Maven-工程"><a class="header-anchor" href="#2-2-2-创建-Maven-工程">¶</a>2.2.2 创建 Maven 工程</h3><p>首先创建 Maven 空项目，再新建 Module，填写好坐标（gav）</p><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210308162451286.png" alt="image-20210308162451286"></p><h3 id="2-2-3-添加依赖"><a class="header-anchor" href="#2-2-3-添加依赖">¶</a>2.2.3 添加依赖</h3><p>在 <code>pom.xml</code> 中加入 MySQL、MyBatis 的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-4-加入Maven插件"><a class="header-anchor" href="#2-2-4-加入Maven插件">¶</a>2.2.4 加入Maven插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span> <span class="hljs-comment">&lt;!--包括目录下的 .properties、.xml 文件都会被扫描到--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-5-编写-Student-实体类"><a class="header-anchor" href="#2-2-5-编写-Student-实体类">¶</a>2.2.5 编写 Student 实体类</h3><p>在 domain 包中创建该文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;<br><span class="hljs-keyword">private</span> Integer id; <span class="hljs-comment">//属性名尽量与列名相同</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-6-编写-Dao-接口-StudentDao"><a class="header-anchor" href="#2-2-6-编写-Dao-接口-StudentDao">¶</a>2.2.6 编写 Dao 接口 StudentDao</h3><p>在 dao 包中创建该文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentDao</span> </span>&#123;<br>    <span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectStudents</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//查询所有数据</span><br>    <span class="hljs-function">Student <span class="hljs-title">selectStudentById</span><span class="hljs-params">(Integer id)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertStudent</span><span class="hljs-params">(Student student)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于Mapper的动态代理方式，无需编写 Dao 的实现类</p></blockquote><h3 id="2-2-7-编写-Dao-接口-Mapper-映射文件来映射SQL语句"><a class="header-anchor" href="#2-2-7-编写-Dao-接口-Mapper-映射文件来映射SQL语句">¶</a>2.2.7 编写 Dao 接口 Mapper 映射文件来映射SQL语句</h3><p>注意：</p><ol><li>在 dao 包中创建文件 StudentDao.xml</li><li>StudentDao.xml <strong>文件名称</strong>要与接口 StudentDao 一样（区分大小写）</li></ol><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;top.JoyDee.dao.StudentDao&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--命名空间，应使用dao接口的全限定名称，实现与dao接口绑定，并隔离其他的不同语句--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudents&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;top.JoyDee.domain.Student&quot;</span>&gt;</span><br>        select id,name,email,age from student order by id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--将已映射的 select 语句匹配到对应名称、参数和返回类型的方法--&gt;</span><br>    <span class="hljs-comment">&lt;!--接下来，你就可以用top.JoyDee.dao.StudentDao.selectStudents()来调用这个映射语句了--&gt;</span><br><span class="hljs-comment">&lt;!--id即为dao接口的方法名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentById&quot;</span> <span class="hljs-attr">parameterType</span> = <span class="hljs-string">&quot;java.lang.Integer&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;top.JoyDee.domain.Student&quot;</span>&gt;</span><br>        select id,name,email,age from student where id = #&#123;studentId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertStudent&quot;</span>&gt;</span><br>        insert into student values(#&#123;id&#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;age&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在IDEA中可以设置代码模板：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210307133745919.png"/></blockquote><h3 id="2-2-8-创建-MyBatis-主配置文件"><a class="header-anchor" href="#2-2-8-创建-MyBatis-主配置文件">¶</a>2.2.8 创建 MyBatis 主配置文件</h3><p>在项目 src/main 下创建 resources 目录，然后在该目录下创建主配置文件 mabatis.xml（名称自定义）</p><blockquote><p>创建resources 目录时别忘记右键设置其为 resources root</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210419174151.png" style="zoom:67%;" /></blockquote><p>其内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--settings标签能够控制MyBatis全局行为--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;settings&gt;</span><br><span class="hljs-comment">        设置MyBatis的输出日志</span><br><span class="hljs-comment">        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;</span><br><span class="hljs-comment">    &lt;/settings&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--设置别名，为 Java 类型设置一个缩写名字，降低冗余的全限定类名书写--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;top.JoyDee.domain&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--name:实体类所在的包名--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--sql mapper(sql映射文件)的位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--name:该包中的所有mapper.xml一次都能加载--&gt;</span><br>        <span class="hljs-comment">&lt;!--使用package的要求：</span><br><span class="hljs-comment">            1.mapper文件名和dao接口名必须完全一样，包括大小写</span><br><span class="hljs-comment">            2.mapper文件和dao接口必须在同一目录下</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;top.JoyDee.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-9-使用数据库属性配置文件"><a class="header-anchor" href="#2-2-9-使用数据库属性配置文件">¶</a>2.2.9 使用数据库属性配置文件</h3><p>为方便对数据库连接的管理，DB连接的“四要素”数据一般都存放在一个专门的属性文件中，而 MyBatis 主配置文件需从这个属性文件中读取这些数据，配置环境并获取数据源。</p><p>在 classpath 路径下的 resources 目录创建 jdbc.properties 文件（名称自定义）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/springdb?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-meta">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><h3 id="2-2-10-创建-MyBatisUtil-工具类"><a class="header-anchor" href="#2-2-10-创建-MyBatisUtil-工具类">¶</a>2.2.10 创建 MyBatisUtil 工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>&#123;<br>    <span class="hljs-comment">//定义SqlSessionFactory</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory factory = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">static</span> &#123; <span class="hljs-comment">//使用静态代码块保证SqlSessionFactory是单例类</span><br>        String config = <span class="hljs-string">&quot;mybatis.xml&quot;</span>; <span class="hljs-comment">//mybatis主配置文件</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//使用Resources工具类来读取主配置文件</span><br>            InputStream in = Resources.getResourceAsStream(config);<br>            <span class="hljs-comment">//创建SqlSessionFactoryBuilder对象，目的是获取SqlSessionFactory</span><br>            factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(in);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//获取SqlSession，SqlSession能够执行SQL语句</span><br>        SqlSession sqlSession = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span>(factory != <span class="hljs-keyword">null</span>)&#123;<br>            sqlSession = factory.openSession();<br>        &#125;<br>        <span class="hljs-keyword">return</span> sqlSession;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-10-创建测试类"><a class="header-anchor" href="#2-2-10-创建测试类">¶</a>2.2.10 创建测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMyBatis</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectStudent</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//调用MyBatisUtils自定义工具类，获取SqlSession，从而执行SQL语句</span><br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        <span class="hljs-comment">//调用SqlSession的getMapper()方法，来获取代理对象，从而获取指定接口的实现类对象</span><br>        StudentDao dao = sqlSession.getMapper(StudentDao.class);<br>        List&lt;Student&gt; students = dao.selectStudents();<br>        <span class="hljs-keyword">for</span>(Student stu : students)&#123;<br>            System.out.println(stu);<br>        &#125;<br>        sqlSession.close();<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsertStudent</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        StudentDao dao = sqlSession.getMapper(StudentDao.class);<br>        <br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        student.setId(<span class="hljs-number">309</span>);<br>        student.setAge(<span class="hljs-number">20</span>);<br>        student.setName(<span class="hljs-string">&quot;Ace&quot;</span>);<br>        student.setEmail(<span class="hljs-string">&quot;ace@qq.com&quot;</span>);<br>        <br>        <span class="hljs-keyword">int</span> res = dao.insertStudent(student); <span class="hljs-comment">//传入对象</span><br>        sqlSession.commit();<br>        System.out.println(<span class="hljs-string">&quot;添加对象的数量:&quot;</span> + res);<br>        sqlSession.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="Chapter-3-MyBatis-对象分析"><a class="header-anchor" href="#Chapter-3-MyBatis-对象分析">¶</a>Chapter 3. MyBatis 对象分析</h1><h2 id="3-1-四个实例"><a class="header-anchor" href="#3-1-四个实例">¶</a>3.1 四个实例</h2><blockquote><p>当 MyBatis 与一些<strong>依赖注入框架</strong>（如 Spring），<code>SqlSession</code> 将被依赖注入框架创建并注入，此时就无需使用 <code>SqlSessionFactoryBuilder</code> 或者 <code>SqlSessionFactory</code>。</p></blockquote><h3 id="3-1-1-Resources-工具类"><a class="header-anchor" href="#3-1-1-Resources-工具类">¶</a>3.1.1 Resources 工具类</h3><p><code>Resources</code> 类，帮助开发者从类路径下、文件系统或一个 web URL 中加载资源文件。许多方法通过加载并解析资源文件，返回不同类型的IO流对象。</p><h3 id="3-1-2-SqlSessionFactoryBuilder-类"><a class="header-anchor" href="#3-1-2-SqlSessionFactoryBuilder-类">¶</a>3.1.2 SqlSessionFactoryBuilder 类</h3><p><code>SqlSessionFactoryBuilder</code> 有五个 <code>build()</code> 方法，每一种的方法能够让开发者从不同的资源中创建一个 <code>SqlSessionFactory</code> 实例，当 <code>SqlSessionFactory</code> 实例即工厂对象被创建后，<code>SqlSessionFactoryBuilder</code> 就完成了其使命，能够被销毁了。</p><h3 id="3-1-3-SqlSessionFactory-接口"><a class="header-anchor" href="#3-1-3-SqlSessionFactory-接口">¶</a>3.1.3 SqlSessionFactory 接口</h3><p><code>SqlSessionFactory</code> 接口对象是一个系统开销较大的对象，且是线程安全的，故<strong>一个应用只需一个</strong>该对象即可。</p><p>通过调用 <code>SqlSessionFactory</code> 接口的 <code>openSession()</code> 方法，就能够创建 <code>SqlSession</code> 对象了：</p><ul><li><code>openSession(true)</code>：创建一个有自动提交功能的 <code>SqlSession</code></li><li><code>openSession(false)</code> 或 <code>openSession()</code>：创建一个非自动提交功能（即需要手动提交）的 <code>SqlSession</code></li></ul><h3 id="3-1-4-SqlSession-接口"><a class="header-anchor" href="#3-1-4-SqlSession-接口">¶</a>3.1.4 SqlSession 接口</h3><p><code>SqlSession</code> 接口对象用于执行持久化操作。一个 <code>SqlSession</code> 对应着一次数据库会话，一次会话以 <code>SqlSession</code> 对象的创建开始，以 <code>SqlSession</code> 对象的关闭结束。</p><p>由于 <code>SqlSession</code> 接口对象是线程不安全的，故每次数据库会话结束前需马上调用其 <code>close()</code> 方法，将其关闭。若再次需要会话，则需要再次创建（在方法内部创建）</p><h2 id="3-2-MyBatis框架-Dao-代理"><a class="header-anchor" href="#3-2-MyBatis框架-Dao-代理">¶</a>3.2 MyBatis框架 Dao 代理</h2><p>MyBatis 框架抛开了 Dao 的实现类，直接定位到映射文件 mapper 中的相应 SQL 语句，对DB进行操作，这种对 Dao 的实现方式称为 Mapper 的动态代理方式。</p><p>Mapper 动态代理方式，无需开发者去实现 Dao 接口，而是由 MyBatis 结合映射文件 mapper 来自动生成的动态代理来实现的。故，只需要调用 <code>SqlSession</code> 的 <code>getMapper()</code> 方法，就能够获取指定接口的<strong>实现类对象</strong>，注意该方法参数为指定 Dao 接口类的 <code>class</code> 值，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">SqlSession session = factory.openSession(); <span class="hljs-comment">//获取session</span><br>StudentDao dao = session.getMapper(StudentDao.class);<br></code></pre></td></tr></table></figure><h1 id="Chapter-4-XML映射器"><a class="header-anchor" href="#Chapter-4-XML映射器">¶</a>Chapter 4. XML映射器</h1><blockquote><p>&quot;MyBatis的真正强大在于它的语句映射……让用户能更专注于SQL代码”。</p></blockquote><p>SQL 映射文件有以下这些顶级元素：</p><ul><li><code>&lt;cache&gt;</code></li><li><code>&lt;cache-ref&gt;</code></li><li><strong><code>&lt;resultMap&gt;</code></strong>：描述如何从数据库结果集中，加载对象，是最强大的元素！</li><li><code>&lt;insert&gt;</code>/<code>&lt;update&gt;</code>/<code>&lt;delete&gt;</code>/<code>&lt;select&gt;</code> ：映射插入/更新/删除/查询语句。</li></ul><h2 id="4-1-理解参数"><a class="header-anchor" href="#4-1-理解参数">¶</a>4.1 理解参数</h2><h2 id="4-2-结果映射"><a class="header-anchor" href="#4-2-结果映射">¶</a>4.2 结果映射</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chapter-1-框架概述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chapter-1-框架概述&quot;&gt;¶&lt;/a&gt;Chapter 1. 框架概述&lt;/h1&gt;
&lt;h2 id=&quot;1-1-三层架构&quot;&gt;&lt;a class=&quot;header-anchor&quot;</summary>
      
    
    
    
    <category term="DataBase" scheme="https://j-strawhat.github.io/categories/DataBase/"/>
    
    <category term="MyBatis" scheme="https://j-strawhat.github.io/categories/DataBase/MyBatis/"/>
    
    
    <category term="DataBase" scheme="https://j-strawhat.github.io/tags/DataBase/"/>
    
    <category term="SQL" scheme="https://j-strawhat.github.io/tags/SQL/"/>
    
    <category term="MyBatis" scheme="https://j-strawhat.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>「Spring系列笔记」SpringBoot 2.0</title>
    <link href="https://j-strawhat.github.io/posts/a053ea21/"/>
    <id>https://j-strawhat.github.io/posts/a053ea21/</id>
    <published>2021-03-05T08:02:00.000Z</published>
    <updated>2021-07-20T10:02:13.913Z</updated>
    
    <content type="html"><![CDATA[<p>选择 Spring Initializer</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305160654.png"/><p>父项目无需选择任何一个 Dependencies ，因为它不会作为一个具体项目去使用，而是供具体的子模块来继承。然后在父项目的 <code>pom.xml</code> 中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305184316.png"/><blockquote><p>若不添加该节点，则打包子模块时会报错</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305161917.png"/><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305162016.png"/><p>子模块记得让 Maven 来 <code>Enable Auto-Import</code></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305162304.png"/><p>此时，需要修改子项目中的继承方式：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305162748.png"/><p>修改后，继承关系为：spring_initializer ——&gt; springboot_parent ——&gt; <code>spring-boot-starter-parent</code></p><blockquote><p>继承后的好处：</p><p>修改SpringBoot 版本号，只需更改 parent 的 <code>pom.xml</code> 即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!--更改此处的版本号即可--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210305212623163.png" alt="image-20210305212623163"></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305163735.png"/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> top.joydee.controllers;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/sayhello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, SpringBoot!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305164008.png"/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"> .   ____          _            __ _ _<br> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \<br>( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \<br> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )<br>  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /<br> =========|_|==============|___/=/_/_/_/<br> :: Spring Boot ::                (v2.4.3)<br><br>2021-03-05 16:39:25.956  INFO 15928 --- [           main] t.j.SpringInitializerDemoApplication     : Starting SpringInitializerDemoApplication using Java 15 on DESKTOP-TUSDBAD with PID 15928 (E:\springboot_parent\spring_initializer_demo\target\classes started by luffy in E:\springboot_parent)<br>2021-03-05 16:39:25.959  INFO 15928 --- [           main] t.j.SpringInitializerDemoApplication     : No active profile set, falling back to default profiles: default<br>2021-03-05 16:39:26.763  INFO 15928 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)<br>2021-03-05 16:39:26.781  INFO 15928 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]<br>2021-03-05 16:39:26.782  INFO 15928 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.43]<br>2021-03-05 16:39:26.829  INFO 15928 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext<br>2021-03-05 16:39:26.830  INFO 15928 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 825 ms<br>2021-03-05 16:39:26.931  INFO 15928 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#x27;applicationTaskExecutor&#x27;<br>2021-03-05 16:39:27.060  INFO 15928 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#x27;&#x27;<br>2021-03-05 16:39:27.068  INFO 15928 --- [           main] t.j.SpringInitializerDemoApplication     : Started SpringInitializerDemoApplication in 1.561 seconds (JVM running for 2.483)<br>2021-03-05 16:40:47.192  INFO 15928 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#x27;dispatcherServlet&#x27;<br>2021-03-05 16:40:47.192  INFO 15928 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#x27;dispatcherServlet&#x27;<br>2021-03-05 16:40:47.193  INFO 15928 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms<br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305164114.png"/><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305211648.png"/><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210305222504587.png" alt="image-20210305222504587"></p><p>在相应的模块中加这个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--生成META-INF元数据，用于提供IDEA自动提示配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--依赖不会传播（继承关系上）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210305222236595.png" alt="image-20210305222236595"></p><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210305223956396.png" alt="image-20210305223956396"></p><blockquote><p>要先启动一次，让 classes 目录生成 META-INF ，IDEA才能自动提示</p></blockquote><p>yml 写法演示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">user:</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">张三</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-string">$&#123;random.int[100,200]&#125;</span> <span class="hljs-comment">#逗号别加空格</span><br>  <span class="hljs-attr">birthday:</span> <span class="hljs-number">2001</span><span class="hljs-string">/01/07</span><br>  <span class="hljs-attr">hobbies:</span> [<span class="hljs-string">睡觉</span>, <span class="hljs-string">学习</span>]<br><span class="hljs-comment">#    - 睡觉</span><br><span class="hljs-comment">#    - 学习</span><br>  <span class="hljs-attr">score:</span> &#123;<span class="hljs-attr">Math :</span> <span class="hljs-number">94.0</span>, <span class="hljs-attr">Chinese :</span> <span class="hljs-number">100.0</span>, <span class="hljs-attr">English :</span> <span class="hljs-number">94.0</span>&#125;<br>  <span class="hljs-attr">address:</span><br>    <span class="hljs-attr">id:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">desc:</span> <span class="hljs-string">$&#123;user.username&#125;的家在广州</span><br><span class="hljs-comment"># 它不支持 SPEL，只支持属性占位符</span><br><br><span class="hljs-comment"># score:</span><br><span class="hljs-comment">#    高等数学: 94.0</span><br><span class="hljs-comment">#    线性代数: 100.0</span><br><span class="hljs-comment">#    概率论与数理统计: 94.0</span><br></code></pre></td></tr></table></figure><p>热部署</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>IDEA 配置：</p><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210305235115522.png" alt="image-20210305235115522"></p><p>ctrl + shift + alt + / ,选择Registry,勾上 Compiler autoMake allow when app running</p><p>指定 webapp 作为编译的位置？</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210306153825.png"/>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;选择 Spring Initializer&lt;/p&gt;
&lt;img src=&quot;https://gitee.com/j__strawhat/MyImages/raw/master/20210305160654.png&quot;/&gt;
&lt;p&gt;父项目无需选择任何一个 Dependencies ，</summary>
      
    
    
    
    <category term="Java" scheme="https://j-strawhat.github.io/categories/Java/"/>
    
    <category term="Spring系列" scheme="https://j-strawhat.github.io/categories/Java/Spring%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/tags/JavaWeb/"/>
    
    <category term="Maven" scheme="https://j-strawhat.github.io/tags/Maven/"/>
    
    <category term="SpringBoot" scheme="https://j-strawhat.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>「JavaWeb学习笔记08」项目管理工具 Maven</title>
    <link href="https://j-strawhat.github.io/posts/5a0e1b6f/"/>
    <id>https://j-strawhat.github.io/posts/5a0e1b6f/</id>
    <published>2021-03-03T07:34:40.000Z</published>
    <updated>2021-07-20T10:02:13.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-13-Maven"><a class="header-anchor" href="#Chapter-13-Maven">¶</a>Chapter 13. Maven</h1><h2 id="13-1-Maven-概述"><a class="header-anchor" href="#13-1-Maven-概述">¶</a>13.1 Maven 概述</h2><blockquote><p>传统项目开发中，需要数量众多的 jar 包，需手动下载并引入，同时，jar 包有版本兼容的问题，一个 jar 包可能要依赖其他的 jar 包，需要手动解决。此外，多个项目间需要的 jar 包有可能重复。</p></blockquote><p>Maven 是 Apache 软件基金会组织维护的一款自动化构建工具，专注服务于 Java 平台的项目构建和依赖管理，对生产环境下多框架、多模块整合开发有重要作用。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304223736.png" style="zoom:80%;" /><ul><li>项目设置遵循统一的规则</li><li>任意工程中<strong>共享</strong></li><li>整合多个项目之间的引用关系</li><li>提供规范的管理各个常用的 <strong>jar 包及其各个版本</strong>，并且可以自动下载和引入项目中</li><li>能够将 jar 包所依赖的其他 jar 包自动下载并引入项目中</li></ul><h2 id="13-2-Maven-环境配置"><a class="header-anchor" href="#13-2-Maven-环境配置">¶</a>13.2 Maven 环境配置</h2><p>首先要确保 Java 已经安装并且配好系统变量 <code>JAVA_HOME</code></p><h3 id="13-2-1-Maven-下载"><a class="header-anchor" href="#13-2-1-Maven-下载">¶</a>13.2.1 Maven 下载</h3><p>下载地址：<a href="https://maven.apache.org/docs/history.html">https://maven.apache.org/docs/history.html</a>。笔者下载的是 <code>apache-maven-3.3.9-bin.zip</code>。</p><p>下载完后，解压到自定义（不含中文）的路径，得到 Maven 的目录树如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">apache-maven-3.3.9/<br>├── bin/               # 存放Maven的命令<br>│   ├── ...<br>│   └── mvn.cmd        # Windows命令脚本，执行Maven的构建项目<br>├── boot/              # 存放一些Maven本身的引导程序，如类加载器等<br>├── conf/              # 存放Maven的一些配置文件<br>│   ├── ...<br>│   └── settings.xml   # Maven的配置文件<br>├── lib/               # Maven本身运行所需的一些jar包<br>├── LICENSE            <br>├── NOTICE<br>└── README.txt<br></code></pre></td></tr></table></figure><h3 id="13-2-2-设置-Maven-环境变量"><a class="header-anchor" href="#13-2-2-设置-Maven-环境变量">¶</a>13.2.2 设置 Maven 环境变量</h3><p>新建系统变量 <code>MAVEN_HOME</code>，变量值为你的解压目录。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304142433.png"/><p>编辑系统变量 <code>Path</code>，添加变量值：<code>%MAVEN_HOME%\bin</code></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210303234020.png"/><p>要检查 Maven 是否安装成功，在 CMD 中输入命令：<code>mvn -v</code></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304142526.png"/><h2 id="13-3-Maven-工程"><a class="header-anchor" href="#13-3-Maven-工程">¶</a>13.3 Maven 工程</h2><h3 id="13-3-1-Maven-工程约定目录结构"><a class="header-anchor" href="#13-3-1-Maven-工程约定目录结构">¶</a>13.3.1 Maven 工程约定目录结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">你的项目/<br>├── src/                 # 源代码<br>│   ├── main             <br>│   │   ├──java          # 放入项目的源码<br>│   │   ├──webapp        # 页面素材（若是普通的JavaSE项目，无需有该目录）<br>│   │   └──resources     # 存放项目资源文件<br>│   └── test<br>│       ├──java          # 测试的源码<br>│       └──resources     # 存放测试资源文件<br>├── target/              # 项目输出的位置，存放编译生成的文件<br>├── ...<br>└── pom.xml              # Maven 项目核心配置文件<br></code></pre></td></tr></table></figure><blockquote><p>进入目录（当前目录有 <code>pom.xml</code>）后，可在CMD窗口输入 <code>tomcat:run</code> 命令运行 Maven 项目。根据提示信息，通过浏览器访问相应虚拟路径即可。</p></blockquote><h3 id="13-3-2-POM-文件"><a class="header-anchor" href="#13-3-2-POM-文件">¶</a>13.3.2 POM 文件</h3><p><strong>POM</strong>（Project Object Model，项目对象模型），是 Maven 工程的基本工作单元，是一个 XML 文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖等。</p><p>执行任务或目录时，Maven 会在当前目录中查找 <code>pom.xml</code> ，读取它，获取所需的配置信息然后执行目标。</p><table><thead><tr><th>节点</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td><code>modelVersion</code></td><td>模型版本需要设置为 4.0。</td><td></td></tr><tr><td><code>groupId</code></td><td>工程组的标识，在一个组织或项目中通常唯一。<br>一般是<code>域名的倒写+项目组名</code>，如：<code>com.baidu.appolo</code></td><td></td></tr><tr><td><code>artifactId</code></td><td>项目（模块）名称，对应 <code>groupId</code> 中<br>项目中的子项目</td><td></td></tr><tr><td><code>version</code></td><td>项目的版本号（<strong>三位</strong>数字标识），若项目<br/>还在开发中（不稳定版本），通常在版本号<br/>中带 <code>-SNAPSHOT</code></td><td></td></tr><tr><td><code>dependencies</code><br><code>dependency</code></td><td>项目有可能依赖某些 jar 包。使用该标签配置时，<br>而这种依赖配置正通过坐标来定位的。</td><td>依赖</td></tr><tr><td><code>properties</code></td><td>定义一些配置属性，可设置源码编码方式<br>（<code>project.build.sourceEncoding</code>）、<br>编译代码或运行程序所使用的JDK版本、<br>构建版本号（如<code>spring.version</code>）等</td><td>配置属性</td></tr><tr><td><code>build</code></td><td>表示与构建相关的配置，<br>如设置编译插件的 JDK 版本</td><td>构建</td></tr><tr><td><code>parent</code></td><td>多个模块需声明相同的配置，<br>来继承父工程的 POM 配置</td><td>继承`</td></tr></tbody></table><p><code>groupId</code>、<code>artifactId</code>、<code>version</code> 这一组向量定义了一个 Maven 项目的基本<strong>坐标</strong>（gav），使得从众多 Maven 项目中可<strong>唯一定位</strong>。同时，坐标也决定了将来项目在仓库中的路径及名称。</p><p>关于 <code>pom.xml</code> 的更详细信息，见<a href="https://www.runoob.com/maven/maven-pom.html">此教程</a></p><h2 id="13-4-仓库"><a class="header-anchor" href="#13-4-仓库">¶</a>13.4 仓库</h2><p>Maven 仓库是项目中依赖的第三方库，这个库所在的位置叫做仓库。它能够帮助我们管理构建（主要是 jar），放置所有 jar 文件（war、zip、pom 等）的地方。</p><p>Maven 仓库有以下几种类型：</p><h3 id="13-4-1-本地仓库"><a class="header-anchor" href="#13-4-1-本地仓库">¶</a>13.4.1 本地仓库</h3><p>Maven 的本地仓库，是在第一次执行 Maven 命令的时候才被创建。</p><p>运行 Maven 的时候，Maven 所需的任何构建优先从本地仓库寻找，若没有找到，则尝试从远程仓库下载构建至本地仓库，然后再使用本地仓库的构建。</p><p>要修改本地仓库默认位置，需在 <code>%MAVEN_HOME%\conf</code> 目录下的 <code>settings.xml</code> 文件定义另一个路径：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:/maven_repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="13-4-2-远程仓库"><a class="header-anchor" href="#13-4-2-远程仓库">¶</a>13.4.2 远程仓库</h3><p>远程仓库，需通过网络才能使用，可以为多个电脑共享使用。</p><ul><li><p>中央仓库：由 Maven 社区提供的仓库，其中包含了绝大多数流行的开源Java构件，以及源码、作者信息、SCM、信息、许可证信息等。</p></li><li><p>中央仓库的镜像：：架设在不同位置，每个洲都有若干的服务器，为中央仓库分担流量。它能够减轻中央仓库的访问，下载的压力。所在洲的用户首先访问的是本洲的镜像服务器。</p><blockquote><p>配置阿里云仓库，可以在 <code>%MAVEN_HOME%\conf\settings.xml</code> 中的 **<code>mirrors</code>**节点上添加内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>详见，可参考<a href="https://blog.0x233.cn/2017/02/03/aliyun-maven-mirror-usage/">这篇博客文章</a></p></blockquote></li><li><p>私服：在局域网环境中部署的服务器，为当前局域网范围内的所有 Maven工程服务。（公司中常使用）</p></li></ul><h3 id="13-4-3-Maven-依赖搜索顺序"><a class="header-anchor" href="#13-4-3-Maven-依赖搜索顺序">¶</a>13.4.3 Maven 依赖搜索顺序</h3><p>当我们执行 Maven 构建命令时，Maven 开始按照以下顺序查找依赖的库：</p><ul><li><strong>步骤 1</strong> － 在<strong>本地仓库</strong>中搜索，如果找不到，执行步骤 2，如果找到了则执行其他操作。</li><li><strong>步骤 2</strong> － 在<strong>中央仓库</strong>中搜索，如果找不到，并且有一个或多个远程仓库已经设置，则执行步骤 4，如果找到了则下载到本地仓库中以备将来引用。</li><li><strong>步骤 3</strong> － 如果远程仓库没有被设置，Maven 将简单的停滞处理并抛出错误（无法找到依赖的文件）。</li><li><strong>步骤 4</strong> － 在一个或多个<strong>远程仓库</strong>中搜索依赖的文件，如果找到则下载到本地仓库以备将来引用，否则 Maven 将停止处理并抛出错误（无法找到依赖的文件）。</li></ul><h2 id="13-5-Maven-指令的生命周期"><a class="header-anchor" href="#13-5-Maven-指令的生命周期">¶</a>13.5 Maven 指令的生命周期</h2><h3 id="Maven-常用命令"><a class="header-anchor" href="#Maven-常用命令">¶</a>Maven 常用命令</h3><blockquote><p>以下命令，必须在命令行进入 <code>pom.xml</code> 所在目录时，方能执行。</p></blockquote><ul><li><code>mvn clean</code>：清理 (会删除原来编译和测试的目录，即 target目录，但是已经 install到仓库里的包不会删除 )</li><li><code>mvn compile</code>：编译主程序 (会在当前目录下生成一个 target,里边存放编译主程序之后生成的字节码文件 )</li><li><code>mvn test compile</code>：编译测试程序 (会在当前目录下生成一个 target,里边存放编译测试程序之后生成的字节码文件 )</li><li><code>mvn test</code>：测试 (会生成一个目录 <code>surefire-reports</code>，保存测试结果 )</li><li><code>mvn package</code>：打包主程序 (会编译、编译测试、测试、并且按照 <code>pom.xml</code> 配置把主程序打包生成 jar 包或者 war 包 )</li><li><code>mvn install</code>：安装主程序 (会把本工程打包，并且按照本工程的坐标保存到本地仓库中 )</li><li><code>mvn deploy</code>：部署主程序 (会把本工程打包，按照本工程的坐标保存到本地库中，并且还会保存到私服仓库中。<br>还会自动把项目部署到 web 容器中 )。</li></ul><p>Maven 对项目构建过程分为三套相互独立的生命周期：</p><ul><li><p><strong>Clean Lifecycle</strong>：在进行真正的构建之前进行一些清理工作</p></li><li><p><strong>Default Lifecycle</strong>：构建的核心部分，编译，测试，打包，部署等</p><table><thead><tr><th style="text-align:left">阶段</th><th style="text-align:left">处理</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">验证 validate</td><td style="text-align:left">验证项目</td><td style="text-align:left">验证项目是否正确且所有必须信息是可用的</td></tr><tr><td style="text-align:left">编译 compile</td><td style="text-align:left">执行编译</td><td style="text-align:left">源代码编译在此阶段完成</td></tr><tr><td style="text-align:left">测试 Test</td><td style="text-align:left">测试</td><td style="text-align:left">使用适当的单元测试框架（例如JUnit）运行测试。</td></tr><tr><td style="text-align:left">包装 package</td><td style="text-align:left">打包</td><td style="text-align:left">创建JAR/WAR包如在 pom.xml 中定义提及的包</td></tr><tr><td style="text-align:left">检查 verify</td><td style="text-align:left">检查</td><td style="text-align:left">对集成测试的结果进行检查，以保证质量达标</td></tr><tr><td style="text-align:left">安装 install</td><td style="text-align:left">安装</td><td style="text-align:left">安装打包的项目到本地仓库，以供其他项目使用</td></tr><tr><td style="text-align:left">部署 deploy</td><td style="text-align:left">部署</td><td style="text-align:left">拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程</td></tr></tbody></table></li><li><p><strong>Site Lifecycle</strong>：生成项目报告，站点，发布站点。</p></li></ul><blockquote><p>在 IDEA 中右侧的 Maven 窗口，可直接点击相关指令</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304233557.png" style="zoom:67%;" /></blockquote><h2 id="13-6-依赖"><a class="header-anchor" href="#13-6-依赖">¶</a>13.6 依赖</h2><h3 id="13-6-1-引入依赖"><a class="header-anchor" href="#13-6-1-引入依赖">¶</a>13.6.1 引入依赖</h3><p>在 <a href="https://mvnrepository.com/">MVNREPOSITORY</a> 中搜索你需要的 jar ，复制其坐标（<code>groupId</code>、<code>artifactId</code>、<code>version</code> 等），到  <code>%MAVEN_HOME%\conf\settings.xml</code> 中的 **<code>dependencies</code>**节点上。</p><p>比如说：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="13-6-2-依赖范围"><a class="header-anchor" href="#13-6-2-依赖范围">¶</a>13.6.2 依赖范围</h3><p>依赖的范围：<code>compile</code>、<code>test</code>、<code>provided</code>，默认为 <code>compile</code></p><table><thead><tr><th></th><th><code>compile</code></th><th><code>test</code></th><th><code>provided</code></th></tr></thead><tbody><tr><td>对主程序是否有效</td><td>✔️</td><td>❌</td><td>✔️</td></tr><tr><td>对测试程序是否有效</td><td>✔️</td><td>✔️</td><td>✔️</td></tr><tr><td>是否参与打包</td><td>✔️</td><td>❌</td><td>❌</td></tr><tr><td>是否参与部署</td><td>✔️</td><td>❌</td><td>❌</td></tr></tbody></table><h2 id="13-7-Maven-在-IDEA-中的应用"><a class="header-anchor" href="#13-7-Maven-在-IDEA-中的应用">¶</a>13.7 Maven 在 IDEA 中的应用</h2><h3 id="13-7-1-IDEA的-Maven-配置"><a class="header-anchor" href="#13-7-1-IDEA的-Maven-配置">¶</a>13.7.1 IDEA的 Maven 配置</h3><h4 id="配置当前工程的设置"><a class="header-anchor" href="#配置当前工程的设置">¶</a>配置当前工程的设置</h4><p>在 File -&gt; Settings -&gt; Build,Execution,Deployment 中，设置如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>Maven home directory</td><td>Maven的安装目录</td></tr><tr><td>User settings file</td><td>Maven安装目录下的 <code>conf/setting.xml</code> 配置文件</td></tr><tr><td>Local repository</td><td>本机仓库的目录位置</td></tr></tbody></table><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304160414.png"/><p>此外，在 <code>Runner</code> 中设置 VM Options（默认情况下，Maven 项目创建时，会联网下载模板文件）：<code>-DarchetypeCatalog=internal</code></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304163143.png"/><h4 id="配置以后新建工程的设置"><a class="header-anchor" href="#配置以后新建工程的设置">¶</a>配置以后新建工程的设置</h4><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304161033.png"/><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304163217.png"/><h3 id="13-7-2-使用模板创建-Java-工程"><a class="header-anchor" href="#13-7-2-使用模板创建-Java-工程">¶</a>13.7.2 使用模板创建 Java 工程</h3><p>选择：<strong><code>maven-archetype-quickstart</code></strong></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304161637.png"/><blockquote><p>创建时，可对 <code>GroupId</code>、<code>ArtifactId</code>、<code>Version</code> 进行自定义设置。</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304165450.png"/><blockquote><p>模板创建的目录结构不完整，需手动补齐并添加</p></blockquote><h3 id="13-7-3-使用模板创建-Web-工程"><a class="header-anchor" href="#13-7-3-使用模板创建-Web-工程">¶</a>13.7.3 使用模板创建 Web 工程</h3><p>选择：<strong><code>maven-archetype-webapp</code></strong></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304182513.png"/><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304233952.png"/><h4 id="更改web-xml头文件版本号"><a class="header-anchor" href="#更改web-xml头文件版本号">¶</a>更改web.xml头文件版本号</h4><p>注意，IDEA创建 Maven 项目时，注意要修改 web.xml 头文件版本为4.0：</p><p>打开项目结构，然后如图修改 Web：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210313133719.png"/><p>对新创建的 web.xml 随便取个名（为了触发内容的更改），点击确定得到该文件后再重命名为 web.xml 即可。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210313133928.png"/><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210313134147.png"/><blockquote><p>若要更改默认的版本，具体方法参考<a href="https://blog.csdn.net/BaiMaTanHuaL/article/details/89384063">此篇文章</a></p></blockquote><h3 id="13-7-4-重新加载依赖"><a class="header-anchor" href="#13-7-4-重新加载依赖">¶</a>13.7.4 重新加载依赖</h3><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304190435.png" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chapter-13-Maven&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chapter-13-Maven&quot;&gt;¶&lt;/a&gt;Chapter 13. Maven&lt;/h1&gt;
&lt;h2 id=&quot;13-1-Maven-概述&quot;&gt;&lt;a class=&quot;hea</summary>
      
    
    
    
    <category term="Java" scheme="https://j-strawhat.github.io/categories/Java/"/>
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/categories/Java/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/tags/JavaWeb/"/>
    
    <category term="Maven" scheme="https://j-strawhat.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>AJAX 与 JSON</title>
    <link href="https://j-strawhat.github.io/posts/762b410/"/>
    <id>https://j-strawhat.github.io/posts/762b410/</id>
    <published>2021-03-03T00:07:27.000Z</published>
    <updated>2021-07-20T10:02:13.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AJAX"><a class="header-anchor" href="#AJAX">¶</a>AJAX</h1><h2 id="一、概述"><a class="header-anchor" href="#一、概述">¶</a>一、概述</h2><p>AJAX，Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。它并不是新的编程语言，而是一种用于创建<strong>快速动态网页</strong>的技术。</p><blockquote><p>此处的异步与同步分别指，在客户端和服务器端相互通信的基础上，</p><ul><li>同步：客户端必须等待服务器端的响应，在等待的期间客户端不能做其他操作；</li><li>异步：客户端无需等待服务器端的响应，在服务器处理请求的过程中，客户端可进行其他的操作。</li></ul></blockquote><p>AJAX ，故其<strong>最大的优点</strong>为，<strong>不重新加载</strong>整个页面的情况下，可与服务器进行少量数据交换并更新部分网页内容。AJAX，不需要任何浏览器插件，但需用户允许 <strong>JavaScript</strong> 在浏览器上执行。</p><p>AJAX，是基于现有的 Internet 标准，并且联合使用它们：</p><ul><li><strong>XMLHttpRequest 对象</strong>（异步的与服务器交换数据）</li><li>JavaScript / DOM（信息显示/交互）</li><li>CSS（给数据定义格式）</li><li>XML（作为转换数据的格式）</li></ul><h2 id="二、原生的JS实现方式"><a class="header-anchor" href="#二、原生的JS实现方式">¶</a>二、原生的JS实现方式</h2><h3 id="1-创建核心对象（固定格式）："><a class="header-anchor" href="#1-创建核心对象（固定格式）：">¶</a>1. 创建核心对象（固定格式）：</h3><blockquote><p>所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 <code>XMLHttpRequest</code> 对象。IE5 和 IE6 使用 <code>ActiveXObject</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xmlhttp;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest)&#123;<br>    <span class="hljs-comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span><br>    xmlhttp=<span class="hljs-keyword">new</span> XMLHttpRequest();<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// IE6, IE5 浏览器执行代码</span><br>    xmlhttp=<span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-建立连接："><a class="header-anchor" href="#2-建立连接：">¶</a>2. 建立连接：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">open(method, url, <span class="hljs-keyword">async</span>)<br></code></pre></td></tr></table></figure><p>（<code>XMLHttpRequest</code> 的方法）其三种参数：</p><ul><li><code>method</code>：请求的类型<ul><li>POST：<strong>请求参数</strong>需在**<code>send()</code>**方法中定义</li><li>GET：请求参数在 <strong>URL</strong> 后边拼接。<code>send()</code> 方法为空参</li></ul></li><li><code>url</code>：文件在服务器上的位置</li><li><code>async</code>：若值为 <code>true</code>，则异步；若值为 <code>false</code>，则同步，此时 JavaScript 会等到服务器<strong>响应</strong>就绪才继续执行（若服务器繁忙或缓慢，应用程序会挂起或停止）</li></ul><p>举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlhttp.open(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;ajaxServlet?username=Tom&quot;</span>, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h3 id="3-发送请求："><a class="header-anchor" href="#3-发送请求：">¶</a>3. 发送请求：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlhttp.send(string);<br></code></pre></td></tr></table></figure><p>其中 <code>string</code> 参数仅用于 POST 请求，GET 请求无需传参。</p><h3 id="4-接收并处理来自服务器的响应结果：（固定格式）"><a class="header-anchor" href="#4-接收并处理来自服务器的响应结果：（固定格式）">¶</a>4. 接收并处理来自服务器的响应结果：（固定格式）</h3><p>当服务器响应成功时，可用<code>XMLHttpRequest</code> 对象的属性来获得<strong>字符串</strong>形式的响应数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlhttp.responseText<br></code></pre></td></tr></table></figure><p>其固定格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlhttp.onreadystatechange=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-comment">//当readyState改变时，就会触发</span><br>    <span class="hljs-comment">//判断readyState就绪状态是否为4，判断status响应状态码是否为200</span><br>    <span class="hljs-keyword">if</span> (xmlhttp.readyState==<span class="hljs-number">4</span> &amp;&amp; xmlhttp.status==<span class="hljs-number">200</span>)&#123;<br>        <span class="hljs-comment">//获取服务器的响应结果</span><br>        <span class="hljs-keyword">var</span> responseText = xmlhttp.responseText;<br>        <span class="hljs-comment">//do something...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>onreadystatechange</code></td><td style="text-align:left">存储函数对象（或函数名），每当 readyState 属性<br>改变时，就会调用该函数。</td></tr><tr><td style="text-align:left"><code>readyState</code></td><td style="text-align:left">存有 <code>XMLHttpRequest</code> 的状态。从 0 到 4 发生变化。<br><code>0</code>: 请求未初始化；<code>1</code>: 服务器连接已建立；<code>2</code>: 请求<br>已接收；<code>3</code>: 请求处理中；<code>4</code>: 请求已完成，且响应已就绪</td></tr><tr><td style="text-align:left"><code>status</code></td><td style="text-align:left"><code>200</code>: “OK”；<code>404</code>: 未找到页面</td></tr></tbody></table><p>综上，完整的代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">fun</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//定义方法</span><br>    <span class="hljs-comment">//发送异步请求</span><br>    <span class="hljs-comment">//1.创建核心对象</span><br>    <span class="hljs-keyword">var</span> xmlhttp;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest)&#123;<br>        <span class="hljs-comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span><br>        xmlhttp=<span class="hljs-keyword">new</span> XMLHttpRequest();<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">// code for IE6, IE5</span><br>        xmlhttp=<span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//2. 建立连接</span><br>    xmlhttp.open(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;ajaxServlet?username=tom&quot;</span>,<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">//3.发送请求</span><br>    xmlhttp.send();<br><br>    <span class="hljs-comment">//4.接受并处理来自服务器的响应结果</span><br>    <span class="hljs-comment">//(当服务器响应成功后再获取)获取方式 ：xmlhttp.responseText</span><br>    <span class="hljs-comment">//当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。</span><br>    xmlhttp.onreadystatechange=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">//判断readyState就绪状态是否为4，判断status响应状态码是否为200</span><br>        <span class="hljs-keyword">if</span> (xmlhttp.readyState==<span class="hljs-number">4</span> &amp;&amp; xmlhttp.status==<span class="hljs-number">200</span>)&#123;<br>            <span class="hljs-keyword">var</span> responseText = xmlhttp.responseText; <span class="hljs-comment">//获取服务器的响应结果</span><br>            <span class="hljs-comment">//....</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、jQuery实现方式"><a class="header-anchor" href="#三、jQuery实现方式">¶</a>三、jQuery实现方式</h2><p>jQuery 提供了三个简便的方法，来发送异步请求。</p><h3 id="方法一"><a class="header-anchor" href="#方法一">¶</a>方法一</h3><p><code>$.ajax(&#123;键值对1, 键值对2, ... &#125;)</code></p><p>举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>   <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;ajaxServlet&quot;</span> , <span class="hljs-comment">//请求路径</span><br>   <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-comment">//请求方式</span><br>   <span class="hljs-attr">data</span>:&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;Luffy&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>&#125;, <span class="hljs-comment">//请求参数（JSON形式）</span><br>   <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">date</span>)</span>&#123;<br>       <span class="hljs-comment">//.....</span><br>   &#125;, <span class="hljs-comment">//响应成功后的回调函数</span><br>   <span class="hljs-attr">error</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-comment">//.....</span><br>   &#125;, <span class="hljs-comment">//若请求响应出现错误，会执行回调函数</span><br>   <span class="hljs-attr">dataType</span>:<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-comment">//设置接受到的响应数据的格式</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="方法二"><a class="header-anchor" href="#方法二">¶</a>方法二</h3><p><code>$.get(url, [data], [callback], [type])</code>：发送 GET 请求</p><ul><li><code>url</code>：请求路径</li><li><code>data</code>：请求参数</li><li><code>callback</code>：回调函数</li><li><code>type</code>：响应结果的类型</li></ul><p>举例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//定义方法</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">fun</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//发送异步请求，其中含有username参数</span></span><br><span class="javascript">            $.get(<span class="hljs-string">&quot;ajaxServlet&quot;</span>,&#123;<span class="hljs-attr">username</span>:<span class="hljs-string">&quot;rose&quot;</span>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">                alert(data); </span><br><span class="javascript">                <span class="hljs-comment">/*打印ajaxServlet传入的响应信息：</span></span><br><span class="hljs-comment"><span class="javascript">                response.getWriter().write(&quot;hello : &quot; + username);</span></span><br><span class="hljs-comment"><span class="javascript">                */</span></span><br><span class="javascript">            &#125;,<span class="hljs-string">&quot;text&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;发送异步请求&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;fun();&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span>&gt;</span> <span class="hljs-comment">&lt;!--输入框--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/jQuery与Ajax演示01.gif"/><h3 id="方法三"><a class="header-anchor" href="#方法三">¶</a>方法三</h3><p><code>$.post(url, [data], [callback], [type])</code>：发送 POST 请求</p><h1 id="JSON"><a class="header-anchor" href="#JSON">¶</a>JSON</h1><h2 id="一、概述-2"><a class="header-anchor" href="#一、概述-2">¶</a>一、概述</h2><p>JSON（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation，JavaScript 对象表示法）是用于将<strong>结构化数据</strong>表示为 JavaScript 对象的标准格式。</p><p>它通常用于在网站上表示和传输数据（例如从服务器向客户端发送一些数据，因此可以将其显示在网页上）。JSON 解析器和 JSON 库支持许多不同的编程语言。</p><p>它可以作为一个对象或者字符串存在，又可以被储存在它自己的文件中，一个文本文件，拓展名为：<code>.json</code>。其 MIME 类型为 <code>application/json</code></p><p>和 XML 相比，JSON 具有<strong>自我描述性</strong>。但不同之处在于，JSON 更短，且读写的速度更快。</p><h2 id="二、语法"><a class="header-anchor" href="#二、语法">¶</a>二、语法</h2><h3 id="1-语法规则"><a class="header-anchor" href="#1-语法规则">¶</a>1. 语法规则</h3><ul><li><p>数据在 键值对 中，其书写格式为：<code>key : value</code>。比如：<code>&quot;name&quot;:&quot;Luffy&quot;</code></p></li><li><p>数据由<strong>逗号</strong>分隔，取值类型可以：</p><ul><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>布尔值（<code>true</code> 或 <code>false</code>）</li><li>数组</li><li>对象</li><li><code>null</code></li></ul></li><li><p><strong>字符串和属性名称</strong>周围使用双引号 <code>&quot;&quot;</code>。</p></li><li><p>大括号 <code>&#123;&#125;</code> 保存<strong>对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Luffy&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>,<br>    <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>中括号 <code>[]</code> 保存<strong>数组</strong>，数组可以包含多个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> persons = [<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Luffy&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Nami&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">19</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Zoro&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">25</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;<br>];<br><span class="hljs-keyword">var</span> school = &#123;<br>    <span class="hljs-string">&quot;persons&quot;</span>:[<br>        &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Luffy&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Nami&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">19</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Zoro&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">25</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;<br>    ]<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-获取数据"><a class="header-anchor" href="#2-获取数据">¶</a>2. 获取数据</h3><p>（一）<code>json对象.键名</code>，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Luffy&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;;<br><span class="hljs-keyword">var</span> name = person.name;<br></code></pre></td></tr></table></figure><p>（二）<strong><code>json对象[&quot;键名&quot;]</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = person[<span class="hljs-string">&quot;name&quot;</span>];<br></code></pre></td></tr></table></figure><p>（三）<code>数组对象[索引]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> school = &#123;<br>    <span class="hljs-string">&quot;persons&quot;</span>:[<br>        &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Luffy&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Nami&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">19</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Zoro&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">25</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;<br>    ]<br>&#125;;<br><span class="hljs-keyword">var</span> name = school.persons[<span class="hljs-number">2</span>].name;<br><br><span class="hljs-keyword">var</span> persons = [<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Luffy&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Nami&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">19</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Zoro&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">25</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;<br>];<br><span class="hljs-keyword">var</span> name2 = persons[<span class="hljs-number">1</span>].name;<br></code></pre></td></tr></table></figure><p>（四）遍历：举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Luffy&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> person)&#123;<br>    alert(key + <span class="hljs-string">&quot;:&quot;</span> + person[key]);<br>    <span class="hljs-comment">//注意，不能用 person.key，因为此处的key是字符串类型，就好比person.&quot;name&quot;，显然不对。</span><br>&#125;;<br><br><span class="hljs-keyword">var</span> persons = [<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Luffy&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Nami&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">19</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Zoro&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">25</span>, <span class="hljs-string">&quot;adult&quot;</span>:<span class="hljs-literal">true</span>&#125;<br>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; persons.length; i++)&#123;<br>    <span class="hljs-keyword">var</span> pe = persons[i];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> pe)&#123;<br>        alert(key + <span class="hljs-string">&quot;:&quot;</span> + pe[key]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、JSON数据和Java对象的相互转换"><a class="header-anchor" href="#三、JSON数据和Java对象的相互转换">¶</a>三、JSON数据和Java对象的相互转换</h2><h3 id="1-JSON解析器"><a class="header-anchor" href="#1-JSON解析器">¶</a>1. JSON解析器</h3><p>常见的解析器：Jsonlib，Gson，fastjson，<strong>jackson</strong></p><h3 id="2-导入-jackson-相关-jar-包"><a class="header-anchor" href="#2-导入-jackson-相关-jar-包">¶</a>2. 导入 jackson 相关 jar 包</h3><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210303202717.png" style="zoom:80%;" /><h3 id="3-JSON-转为-Java-对象"><a class="header-anchor" href="#3-JSON-转为-Java-对象">¶</a>3. JSON 转为 Java 对象</h3><p>（一）导入 jackson 的相关 jar 包后，创建 Jackson 核心对象 <code>ObjectMapper</code></p><p>（二）调用 <code>ObjectMapper</code> 的相关方法进行转换：</p><ul><li><code>readValue(json字符串数据, Class)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String jsonStr = <span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;Luffy\&quot;, \&quot;age\&quot;:20, \&quot;adult\&quot;:true&#125;&quot;</span>;<br>ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>Person person = mapper.readValue(json, Person.class); <span class="hljs-comment">//JSON转换为Person对象</span><br></code></pre></td></tr></table></figure><h3 id="4-Java-对象转换-JSON"><a class="header-anchor" href="#4-Java-对象转换-JSON">¶</a>4. Java 对象转换 JSON</h3><p>（一）导入 jackson 的相关 jar 包后，创建 Jackson 核心对象 <code>ObjectMapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br></code></pre></td></tr></table></figure><p>（二）调用 <code>ObjectMapper</code> 的相关方法进行转换：</p><p>转换方法：</p><ul><li><p><code>writeValue(参数1, obj)</code>：</p><ul><li><p><code>File</code>：将 <code>obj</code> 对象转换为 JSON 字符串，并保存到指定的文件中；</p></li><li><p><code>Writer</code>：将 <code>obj</code> 对象转换为 JSON 字符串，并将 <code>JSON</code> 数据填充到字符输出流中；</p></li><li><p><code>OutputStream</code>：将 <code>obj</code> 对象转换为 JSON 字符串，并将 <code>JSON</code> 数据填充到字节输出流中。（常用于设置响应消息的输出流）</p></li></ul></li><li><p><code>writeValueAsString(obj)</code>：将对象转为 JSON 字符串</p><blockquote><p>传入的 <code>obj</code> 可以是 <code>List</code> 或者 <code>Map</code> 等对象</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.创建Person对象（Java对象）</span><br>Person p = <span class="hljs-keyword">new</span> Person();<br>p.setName(<span class="hljs-string">&quot;Luffy&quot;</span>);<br>p.setAge(<span class="hljs-number">20</span>);<br>p.setAdult(<span class="hljs-keyword">true</span>);<br><span class="hljs-comment">//2.创建Jackson的核心对象：ObjectMapper</span><br>ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br><span class="hljs-comment">//3.转换Java对象为JSON</span><br><span class="hljs-comment">//3.1 转换为 JSON 字符串</span><br>String jsonStr = mapper.writeValueAsString(p);<br>System.out.println(jsonStr); <br><span class="hljs-comment">//3.2 写出到 D://233.txt 文件中</span><br>mapper.writeValue(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D://233.txt&quot;</span>), p);<br><span class="hljs-comment">//3.3 将Java对象转换为JSON字符串，并将JSON数据填充到字节输出流</span><br>mapper.writeValue(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;D://233.txt&quot;</span>), p);<br></code></pre></td></tr></table></figure><p>注解：</p><ul><li><code>@JsonIgnore</code>：排除被注解的属性，该属性将来不会被转换为 JSON 对象中的一个属性。</li><li><code>@JsonFormat</code>：属性值格式化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br><span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> adult;<br>    <br>    <span class="hljs-meta">@JsonIgnore</span> <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> score;<br>    <br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br>    <br>    <span class="hljs-comment">//....</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例：校验用户名是否存在"><a class="header-anchor" href="#案例：校验用户名是否存在">¶</a>案例：校验用户名是否存在</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/用户名使用校验withAjax和JSON.gif"/><blockquote><p>客户端要想将服务器响应的数据作为JSON数据来使用，有两种解决方案：</p><ul><li><p><code>$.get(type)</code>：将最后一个参数 <code>type</code> 指定为 <code>&quot;json&quot;</code></p></li><li><p>在服务器端设置 <code>MIME</code> 类型，即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setContenType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-comment">//（入口）当页面加载完成后</span></span><br><span class="javascript">            $(<span class="hljs-string">&quot;#username&quot;</span>).blur(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//绑定blur事件（鼠标焦点移开）</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> username = $(<span class="hljs-built_in">this</span>).val(); <span class="hljs-comment">//获取username文本输入框的值</span></span><br><span class="javascript">                <span class="hljs-comment">//发送AJAX请求，其中请求包含username数据</span></span><br><span class="javascript">                $.get(<span class="hljs-string">&quot;findUserServlet&quot;</span>, &#123;<span class="hljs-attr">username</span>:username&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123; <span class="hljs-comment">//回调函数，检查响应信息</span></span><br><span class="javascript">                    <span class="hljs-keyword">var</span> span = $(<span class="hljs-string">&quot;#legality_username&quot;</span>);</span><br><span class="javascript">                    <span class="hljs-comment">/* *响应中的JSON数据为：</span></span><br><span class="hljs-comment"><span class="javascript">                        &#123;&quot;isExist&quot;:true, &quot;msg&quot;:&quot;此用户名已被使用，请更换一个&quot;&#125;</span></span><br><span class="hljs-comment"><span class="javascript">                        或者</span></span><br><span class="hljs-comment"><span class="javascript">                        &#123;&quot;isExist&quot;:false, &quot;msg&quot;:&quot;用户名可用&quot;&#125;</span></span><br><span class="hljs-comment"><span class="javascript">                    */</span></span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(data.isExist)&#123;</span><br><span class="javascript">                        span.css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;#e74c3c&quot;</span>);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                        span.css(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;#52c41a&quot;</span>);</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    span.html(data.msg);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">            &#125;)</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入您的用户名&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;legality_username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-comment">&lt;!--用于显示提示信息--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入您的密码&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;注册&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>findUserServlet.java</code> 文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> top.JoyDee.servlet;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@WebServlet(&quot;/findUserServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">findUserServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        String username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>); <span class="hljs-comment">//设置响应数据格式为json，编码为utf-8！！</span><br>        Map&lt;String, Object&gt; mymap = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;Luffy&quot;</span>.equals(username))&#123; <span class="hljs-comment">//注意，此处做了简化，本应在数据库中查询username是否已存在。</span><br>            mymap.put(<span class="hljs-string">&quot;isExist&quot;</span>, <span class="hljs-keyword">true</span>); <span class="hljs-comment">//调用Map方法</span><br>            mymap.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;此用户名已被使用，请更换一个&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//未使用过的用户名</span><br>            mymap.put(<span class="hljs-string">&quot;isExist&quot;</span>, <span class="hljs-keyword">false</span>);<br>            mymap.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;用户名可用&quot;</span>);<br>        &#125;<br>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>        mapper.writeValue(response.getWriter(), mymap); <span class="hljs-comment">//将JSON数据转化为字符串，并将其设置到响应消息的输出流中。</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AJAX&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#AJAX&quot;&gt;¶&lt;/a&gt;AJAX&lt;/h1&gt;
&lt;h2 id=&quot;一、概述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#一、概述&quot;&gt;¶&lt;/a&gt;一、概述&lt;/h2&gt;
&lt;p&gt;AJA</summary>
      
    
    
    
    <category term="Web前端" scheme="https://j-strawhat.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    <category term="AJAX" scheme="https://j-strawhat.github.io/categories/Web%E5%89%8D%E7%AB%AF/AJAX/"/>
    
    
    <category term="AJAX" scheme="https://j-strawhat.github.io/tags/AJAX/"/>
    
    <category term="JSON" scheme="https://j-strawhat.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>「jQuery 学习笔记02」动画、对象遍历、事件</title>
    <link href="https://j-strawhat.github.io/posts/7b63611c/"/>
    <id>https://j-strawhat.github.io/posts/7b63611c/</id>
    <published>2021-03-01T23:35:00.000Z</published>
    <updated>2021-07-20T10:02:13.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-4-动画"><a class="header-anchor" href="#Chapter-4-动画">¶</a>Chapter 4. 动画</h1><p>其中下面各方法的三个参数：</p><ul><li><code>speed</code>：指动画的速度，预定义值有：<code>&quot;slow&quot;</code>、<code>&quot;normal&quot;</code>、<code>&quot;fast&quot;</code> 或表示动画时长的毫秒数值（如：1000）</li><li><code>easing</code>：用来指定切换效果，默认值：<code>&quot;swing&quot;</code>（动画执行效果是“先慢，中间快，最后慢”），另外的预定义值为 <code>&quot;linear&quot;</code>（动画执行速度匀速）</li><li><code>fn</code>：在动画完成时执行的<strong>函数</strong>，每个元素执行一次</li></ul><h2 id="4-1-默认的显示和隐藏方式"><a class="header-anchor" href="#4-1-默认的显示和隐藏方式">¶</a>4.1 默认的显示和隐藏方式</h2><ul><li><code>show(speed, easing, fn)</code></li><li><code>hide(speed, easing, fn)</code></li><li><code>toggle(speed, easing, fn)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <span class="hljs-built_in">setTimeout</span>(adShow, <span class="hljs-number">3000</span>); <span class="hljs-comment">//定义定时器，3s后调用adShow方法</span><br>   <span class="hljs-built_in">setTimeout</span>(adHide, <span class="hljs-number">8000</span>); <span class="hljs-comment">//8s后调用adHide方法</span><br>&#125;);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">adShow</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-comment">//显示广告</span><br>    $(<span class="hljs-string">&quot;#ad&quot;</span>).show(<span class="hljs-string">&quot;slow&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">adHide</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-comment">//隐藏广告</span><br>    $(<span class="hljs-string">&quot;#ad&quot;</span>).hide(<span class="hljs-string">&quot;slow&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-滑动的显示和隐藏方式"><a class="header-anchor" href="#4-2-滑动的显示和隐藏方式">¶</a>4.2 滑动的显示和隐藏方式</h2><ul><li><code>slideDown(speed, easing, fn)</code></li><li><code>slideUp(speed, easing, fn)</code></li><li><code>slideToggle(speed, easing, fn)</code></li></ul><h2 id="4-3-淡入淡出的显示和隐藏方式"><a class="header-anchor" href="#4-3-淡入淡出的显示和隐藏方式">¶</a>4.3 淡入淡出的显示和隐藏方式</h2><ul><li><code>fadeIn(speed, easing, fn)</code></li><li><code>fadeOut(speed, easing, fn)</code></li><li><code>fadeToggle(speed, easing, fn)</code></li></ul><p>从右到左的动画，分别是 淡入淡出、滑动、默认 的显示和隐藏方式</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/jQuery动画淡入淡出.gif" style="zoom:80%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//切换显示和隐藏div</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toggleDefault</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $(<span class="hljs-string">&quot;#showDiv&quot;</span>).toggle(<span class="hljs-number">5000</span>, <span class="hljs-string">&quot;linear&quot;</span>)</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toggleSlide</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $(<span class="hljs-string">&quot;#showDiv&quot;</span>).slideToggle(<span class="hljs-string">&quot;slow&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toggleFn</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            $(<span class="hljs-string">&quot;#showDiv&quot;</span>).fadeToggle(<span class="hljs-string">&quot;slow&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击按钮切换div显示和隐藏&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;toggleDefault()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击按钮切换div显示和隐藏&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;toggleSlide()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击按钮切换div显示和隐藏&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;toggleFn()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;showDiv&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:300px;height:300px;background:#276cda&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Chapter-5-遍历"><a class="header-anchor" href="#Chapter-5-遍历">¶</a>Chapter 5. 遍历</h1><h2 id="5-1-JS的遍历方式"><a class="header-anchor" href="#5-1-JS的遍历方式">¶</a>5.1 JS的遍历方式</h2><ul><li><code>for(初始化值; 循环结束条件; 步长)</code></li></ul><p>举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> cities = $(<span class="hljs-string">&quot;#city li&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cities.length; i++)&#123;<br>        alert(i + <span class="hljs-string">&quot;:&quot;</span> + cities[i].innerHTML);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="5-2-jQuery-的遍历方式"><a class="header-anchor" href="#5-2-jQuery-的遍历方式">¶</a>5.2 jQuery 的遍历方式</h2><p>（一）<code>jQuery对象.each(callback)</code></p><ul><li>语法：<code>jQuery对象.each(function(index, element)&#123;&#125;)</code><ul><li><code>index</code> ：元素在集合中的索引</li><li><code>element</code>：集合中的每一个元素对象</li></ul></li><li>回调函数返回值：<ul><li><code>true</code>：若当前 <code>function</code> 返回值为 <code>true</code>，则结束整个循环（相当于 <code>break</code>）</li><li><code>false</code>：若当前 <code>function</code> 返回值为 <code>false</code>，则结束本轮循环，直接进行下一轮循环（相当于 <code>continue</code>）</li></ul></li></ul><p>举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    cities.each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index, element</span>)</span>&#123;<br>        <span class="hljs-comment">//获取li对象的方式一：</span><br>        alert($(<span class="hljs-built_in">this</span>).html());<br>        <span class="hljs-comment">//获取li对象的方式二：</span><br>        alert(index + <span class="hljs-string">&quot;:&quot;</span> + $(element).html());<br>        <span class="hljs-comment">//输出遍历中每个元素的索引，及其HTML中的文本</span><br>        <br>       <span class="hljs-comment">//判断li的文本是否为&quot;广州&quot;，若是则结束循环</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;广州&quot;</span> == $(element).html())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>（二）<code>$.each(object, [callback])</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>   $.each(cities, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>alert($(<span class="hljs-built_in">this</span>).html());<br>&#125;); <br>&#125;);<br></code></pre></td></tr></table></figure><p>（三）<code>for(元素对象 of 容器对象)</code>（jQuery 3.0版本之后所提供的方式）</p><h1 id="Chapter-6-事件"><a class="header-anchor" href="#Chapter-6-事件">¶</a>Chapter 6. 事件</h1><h2 id="6-1-jQuery-标准的绑定方式"><a class="header-anchor" href="#6-1-jQuery-标准的绑定方式">¶</a>6.1 jQuery 标准的绑定方式</h2><ul><li><p><code>jQuery对象.事件方法(回调函数);</code></p><blockquote><p>注：若调用事件方法，不传递回调函数，则会触发浏览器默认行为。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>   $(<span class="hljs-string">&quot;#name&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>       alert(<span class="hljs-string">&quot;我被点击了...&quot;</span>)<br>   &#125;); <span class="hljs-comment">//获取name对象，绑定click事件</span><br>    <br>   $(<span class="hljs-string">&quot;#name&quot;</span>).mouseover(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>       alert(<span class="hljs-string">&quot;鼠标来了&quot;</span>)<br>   &#125;); <span class="hljs-comment">//为name对象绑定鼠标移动到</span><br>   <br>   $(<span class="hljs-string">&quot;#name&quot;</span>).focus(); <span class="hljs-comment">//让文本输入框获得焦点</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="6-2-on绑定事件-及-off解除绑定"><a class="header-anchor" href="#6-2-on绑定事件-及-off解除绑定">¶</a>6.2 on绑定事件 及 off解除绑定</h2><ul><li><p><code>jQuery对象.on(&quot;事件名称&quot;, 回调函数)</code></p></li><li><p><code>jQuery对象.off(&quot;事件名称&quot;)</code></p><blockquote><p>注：若 <code>off()</code> 方法不传递任何参数，则将组件上的所有事件全部解绑。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>   $(<span class="hljs-string">&quot;#btn&quot;</span>).on(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      alert(<span class="hljs-string">&quot;我被点击了...&quot;</span>);<br>   &#125;); <span class="hljs-comment">//使用on给按钮绑定单机事件</span><br>   $(<span class="hljs-string">&quot;#btn2&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      $(<span class="hljs-string">&quot;#btn&quot;</span>).off(); <span class="hljs-comment">//将btn按钮上的所有事件解绑</span><br>   &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="6-3-事件切换：toggle"><a class="header-anchor" href="#6-3-事件切换：toggle">¶</a>6.3 事件切换：toggle</h2><ul><li><p><code>jQuery对象.toggle(fn1, fn2, ...)</code>：当点击 jQuery 对象所对应的组件后，会执行 <code>fn1</code>；第二次点击时会执行 <code>fn2</code>……</p><blockquote><p>注：1.9 版本中的 <code>toggle()</code> 方法被删除，需用 jQuery Migrate（迁移）插件来恢复此功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;../js/jquery-migrate-1.0.0.js&quot;</span> type=<span class="hljs-string">&quot;text/javascript&quot;</span> charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure></blockquote></li></ul><h1 id="Chapter-7-jQuery-增强"><a class="header-anchor" href="#Chapter-7-jQuery-增强">¶</a>Chapter 7.  jQuery 增强</h1><ol><li><p><code>$.fn.extend(object)</code>：对象进行方法拓展，举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.fn.extend(&#123; <br>    <span class="hljs-attr">check</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">//定义的check()方法，使得所有jQuery对象均可调用该方法</span><br>        <span class="hljs-built_in">this</span>.prop(<span class="hljs-string">&quot;checked&quot;</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">//复选框选中</span><br>    &#125;, <span class="hljs-comment">//其中this对象，为“调用该方法”的jQuery对象</span><br>    <span class="hljs-attr">uncheck</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.prop(<span class="hljs-string">&quot;checked&quot;</span>, <span class="hljs-literal">false</span>); <span class="hljs-comment">//复选框不选中</span><br>    &#125;<br>&#125;);<br>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>   $(<span class="hljs-string">&quot;#btn-check&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      $(<span class="hljs-string">&quot;input[type=&#x27;checkbox&#x27;]&quot;</span>).check();<br>   &#125;); <span class="hljs-comment">//获取复选框对象，并将其全部置为选择</span><br>    <br>   $(<span class="hljs-string">&quot;#btn-uncheck&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      $(<span class="hljs-string">&quot;input[type=&#x27;checkbox&#x27;]&quot;</span>).uncheck();<br>   &#125;); <span class="hljs-comment">//选择所有复选框对象,并将其全部置为取消选择</span><br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p><code>$.extend(object)</code>：全局进行方法拓展，举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.extend(&#123;<br>   <span class="hljs-attr">max</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>)</span>&#123;<br>       <span class="hljs-keyword">return</span> a &gt;= b ? a : b;<br>   &#125;,<br>   <span class="hljs-attr">max</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>)</span>&#123;<br>       <span class="hljs-keyword">return</span> a &lt;= b ? a : b;<br>   &#125;<br>&#125;);<br><span class="hljs-keyword">var</span> mymax = $.max(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">var</span> mymin = $.min(<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chapter-4-动画&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chapter-4-动画&quot;&gt;¶&lt;/a&gt;Chapter 4. 动画&lt;/h1&gt;
&lt;p&gt;其中下面各方法的三个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;speed&lt;/code&gt;</summary>
      
    
    
    
    <category term="Web前端" scheme="https://j-strawhat.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    <category term="jQuery" scheme="https://j-strawhat.github.io/categories/Web%E5%89%8D%E7%AB%AF/jQuery/"/>
    
    
    <category term="jQuery" scheme="https://j-strawhat.github.io/tags/jQuery/"/>
    
    <category term="JS" scheme="https://j-strawhat.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>「jQuery 学习笔记01」选择器、DOM操作</title>
    <link href="https://j-strawhat.github.io/posts/8246653c/"/>
    <id>https://j-strawhat.github.io/posts/8246653c/</id>
    <published>2021-02-28T19:42:00.000Z</published>
    <updated>2021-07-20T10:02:13.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-1-概述"><a class="header-anchor" href="#Chapter-1-概述">¶</a>Chapter 1. 概述</h1><h2 id="1-1-概念"><a class="header-anchor" href="#1-1-概念">¶</a>1.1 概念</h2><p>jQuery 是一个快速、简洁的 JavaScript 框架，是继 Prototype 之后又一个优秀的 JavaScript 代码库。</p><p>它封装了 JavaScript 常用的功能代码，提供一种简便的 JavaScript 设计模式，优化 HTML 文档操作、事件处理、动画设计和 Ajax 交互。</p><h2 id="1-2-快速入门"><a class="header-anchor" href="#1-2-快速入门">¶</a>1.2 快速入门</h2><ol><li><p>（下载并）引入 jQuery 到网页中，可使用两种方法：</p><ul><li><p>从 <a href="https://jquery.com/download/">https://jquery.com/download/</a> 下载 jQuery 库</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery-1.10.2.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>从 CDN（内容分发网络） 中载入 jQuery，如：<a href="https://www.jsdelivr.com/package/npm/jquery">jsdelivr</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>使用：</p><p>jQuery 基础语法：<code>$(selector).action()</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>jQuery学习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;div1&quot;</span>&gt;</span>我是div1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;div2&quot;</span>&gt;</span>我是div2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div1 = $(<span class="hljs-string">&quot;#div1&quot;</span>);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> div2 = $(<span class="hljs-string">&quot;#div2&quot;</span>);</span><br><span class="javascript">    alert(div1.html() + <span class="hljs-string">&quot; AND &quot;</span> + div2.html());</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="1-3-jQuery-对象和-DOM-对象"><a class="header-anchor" href="#1-3-jQuery-对象和-DOM-对象">¶</a>1.3 jQuery 对象和 DOM 对象</h2><p>在 JavaScript 中，通过 <code>getElementById()</code>、<code>getElementByClassName()</code> 和 <code>querySelector()</code> 等方法来获取页面中的 HTML 元素，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> menuDiv = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;menuDiv&quot;</span>);<br></code></pre></td></tr></table></figure><p>jQuery 对象和 DOM 对象的方法是不通用的。</p><p>两者相互转换：</p><ul><li><p>将 jQuery 对象转换为 JS 对象：</p><p><code>jQuery对象[索引]</code> 或者 <code>jQuery对象.get(索引)</code>：将 jQuery 对象转换成 DOM 对象时，可把 jQuery 对象看作一个 DOM 对象数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> $divs = $(<span class="hljs-string">&quot;div&quot;</span>); <span class="hljs-comment">//通过jQuery方式，来获取div标签的所有HTML元素对象</span><br>$divs[<span class="hljs-number">0</span>].innerHTML = <span class="hljs-string">&quot;我变成DOM对象了!&quot;</span>;<br>$divs.get(<span class="hljs-number">1</span>).innerHTML = <span class="hljs-string">&quot;我也变成DOM对象了!&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>将 DOM 对象转换为 jQuery 对象：</p><p><code>$(你的DOM对象)</code>：该方法将 DOM 对象封装起来，并返回一个 jQuery 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> divs = <span class="hljs-built_in">document</span>.getElementByTagName(<span class="hljs-string">&quot;div&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; divs.length; i++)&#123;<br>    $(divs[i]).html(<span class="hljs-string">&quot;我变成jQuey对象啦!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="Chapter-2-选择器"><a class="header-anchor" href="#Chapter-2-选择器">¶</a>Chapter 2. 选择器</h1><h2 id="2-1-基础语法"><a class="header-anchor" href="#2-1-基础语法">¶</a>2.1 基础语法</h2><h3 id="2-1-1-事件绑定"><a class="header-anchor" href="#2-1-1-事件绑定">¶</a>2.1.1 事件绑定</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//获取元素（以 b1 按钮为例）</span><br>$(<span class="hljs-string">&quot;#b1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-comment">//click方法接收方法对象</span><br>    alert(<span class="hljs-string">&quot;b1按钮被点击啦!&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-1-2-入口函数"><a class="header-anchor" href="#2-1-2-入口函数">¶</a>2.1.2 入口函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//执行代码</span><br>&#125;);<br>或者<br>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//执行代码</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>等效于 JavaScript 的入口函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//执行代码</span><br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th></th><th><code>window.onload</code></th><th><code>$(document).ready()</code></th></tr></thead><tbody><tr><td>执行时机</td><td>必须等待网页<strong>全部加载完毕</strong><br>（包括图片等），然后再执<br>行包裹代码</td><td>只需等待网页中 <strong>DOM结构加载完毕</strong><br>就能执行包裹的代码。</td></tr><tr><td>执行次数</td><td>只能执行一次，若代码中有<br>第二个<code>window.onload</code> ，则<br>第一个的执行会被覆盖。</td><td>可执行<strong>多次</strong>，第 N 次都不会被<br>上一次执行所覆盖</td></tr></tbody></table><blockquote><p>程序的执行顺序是：加载完页面（其中包括定义在 HTML 头中 JS，比 body 优先加载）–&gt;jQuery的入口函数</p></blockquote><h3 id="2-1-3-样式控制：CSS-方法"><a class="header-anchor" href="#2-1-3-样式控制：CSS-方法">¶</a>2.1.3 样式控制：CSS 方法</h3><p>举例使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#div1&quot;</span>).css(<span class="hljs-string">&quot;backgroundColor&quot;</span>, <span class="hljs-string">&quot;pink&quot;</span>);<br>或<br>$(<span class="hljs-string">&quot;#div1&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="2-2-选择器"><a class="header-anchor" href="#2-2-选择器">¶</a>2.2 选择器</h2><h3 id="2-2-1-基本选择器"><a class="header-anchor" href="#2-2-1-基本选择器">¶</a>2.2.1 基本选择器</h3><table><thead><tr><th>选择器</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>标签选择器</td><td><code>$(&quot;html标签名&quot;)</code></td><td>根据元素的标签名进行匹配</td></tr><tr><td>id 选择器</td><td><code>$(&quot;#id属性值&quot;)</code></td><td></td></tr><tr><td>类选择器</td><td><code>$(&quot;.class属性值&quot;)</code></td><td></td></tr><tr><td>并集选择器</td><td><code>$(&quot;选择器1,选择器2,...&quot;)</code></td><td>将每个选择器匹配的结果合并在一起返回</td></tr><tr><td>通配选择器</td><td><code>$(&quot;*&quot;)</code></td><td>匹配页面的所有元素，包括 HTML、head、body 等</td></tr></tbody></table><h3 id="2-2-2-层级选择器"><a class="header-anchor" href="#2-2-2-层级选择器">¶</a>2.2.2 层级选择器</h3><table><thead><tr><th>选择器</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>后代选择器</td><td><code>$(&quot;ancestor descendant&quot;)</code></td><td>获得 <code>ancestor</code> 元素中所有子元素</td></tr><tr><td>子选择器</td><td><code>$(&quot;parent &gt; child&quot;)</code></td><td>选取 <code>parent</code> 元素中的<strong>直接</strong>子元素</td></tr><tr><td>选择下一个兄弟</td><td><code>$(&quot;prev+next&quot;)</code></td><td>选取紧邻 <code>prev</code> 元素之后的 <code>next</code> 元素</td></tr><tr><td>选择下面所有兄弟</td><td><code>$(&quot;prev~siblings&quot;)</code></td><td>选取 <code>prev</code> 元素之后的 <code>siblings</code> 兄弟元素</td></tr></tbody></table><h3 id="2-2-3-属性选择器"><a class="header-anchor" href="#2-2-3-属性选择器">¶</a>2.2.3 属性选择器</h3><table><thead><tr><th>选择器</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>属性名称选择器</td><td><code>$(&quot;A[属性名]&quot;)</code></td><td></td></tr><tr><td>属性选择器</td><td><code>$(&quot;A[属性名='值']&quot;)</code></td><td></td></tr><tr><td></td><td><code>$(&quot;A[属性名!='值']&quot;)</code></td><td></td></tr><tr><td></td><td><code>$(&quot;A[属性名^='值']&quot;)</code></td><td>选取属性以某个值开始的元素</td></tr><tr><td></td><td><code>$(&quot;A[属性名$='值']&quot;)</code></td><td>选取属性以某个值结尾的元素</td></tr><tr><td></td><td><code>$(&quot;A[属性名*='值']&quot;)</code></td><td>选取属性中包含某个值的元素</td></tr><tr><td>复合属性选择器</td><td><code>$(&quot;A[属性名1='值'][...]...&quot;)</code></td><td>需要<strong>同时满足</strong>多个条件时使用</td></tr></tbody></table><h3 id="2-2-4-简单过滤选择器"><a class="header-anchor" href="#2-2-4-简单过滤选择器">¶</a>2.2.4 简单过滤选择器</h3><table><thead><tr><th>选择器</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>首元素选择器</td><td><code>:first</code></td><td></td></tr><tr><td>尾元素选择器</td><td><code>:last</code></td><td></td></tr><tr><td>非元素选择器</td><td><code>:not(selector)</code></td><td></td></tr><tr><td>偶数选择器</td><td><code>:even</code></td><td>从0开始计数</td></tr><tr><td>奇数选择器</td><td><code>:odd</code></td><td>从1开始计数</td></tr><tr><td>等于索引选择器</td><td><code>:eq(index)</code></td><td></td></tr><tr><td>大于索引选择器</td><td><code>:gt(index)</code></td><td></td></tr><tr><td>小于索引选择器</td><td><code>:lt(index)</code></td><td></td></tr><tr><td>标题选择器</td><td><code>:header</code></td><td>获取标题(h1~h6)元素</td></tr></tbody></table><h3 id="2-2-5-内容过滤选择器"><a class="header-anchor" href="#2-2-5-内容过滤选择器">¶</a>2.2.5 内容过滤选择器</h3><table><thead><tr><th>语法</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td><code>:contains(text)</code></td><td>选取包含 <code>text</code> 内容的元素。</td><td><code>$(&quot;td:contains('滑雪')&quot;)</code></td></tr><tr><td><code>:has(selector)</code></td><td>选取含有 <code>selector</code> 所匹配的元素。</td><td><code>$(&quot;td:has('span')&quot;)</code></td></tr><tr><td><code>:empty</code></td><td>选取所有<strong>不包含</strong>文本或子元素的空元素</td><td><code>$(&quot;td:empty&quot;)</code></td></tr><tr><td><code>:parent</code></td><td>选取含有子元素或文本的元素</td><td></td></tr></tbody></table><h3 id="2-2-6-表单过滤选择器"><a class="header-anchor" href="#2-2-6-表单过滤选择器">¶</a>2.2.6 表单过滤选择器</h3><table><thead><tr><th>选择器</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>可用元素选择器</td><td><code>:enabled</code></td><td>选取表单中属性为可用的元素</td></tr><tr><td>不可用元素选择器</td><td><code>:disabled</code></td><td>选完表单中属性不可用的元素</td></tr><tr><td>选中选择器</td><td><code>:checked</code></td><td>选取表单中被选中的元素（单选按钮、复选框）</td></tr><tr><td>选中选择器</td><td><code>:selected</code></td><td>选取表单中被选中的选项元素（下拉列表）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">$(function()&#123;<br>    $(<span class="hljs-string">&#x27;#b1&#x27;</span>).click(function()&#123;<br>       $(<span class="hljs-string">&quot;input[type=&#x27;text&#x27;]:enabled&quot;</span>) .val(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    &#125;); <span class="hljs-comment">//改变表单内可用的&lt;input&gt;元素的值</span><br>    $(<span class="hljs-string">&#x27;#b2&#x27;</span>).click(function()&#123;<br>       alert($(<span class="hljs-string">&quot;input[type=&#x27;checkbox&#x27;]:checked&quot;</span>).length); <br>    &#125;); <span class="hljs-comment">//获取复选框选中的个数</span><br>    $(<span class="hljs-string">&#x27;#b3&#x27;</span>).click(function()&#123;<br>       alert($(<span class="hljs-string">&quot;#job &gt; option:selected&quot;</span>).length); <br>    &#125;); <span class="hljs-comment">//获取下拉复选框选中的个数</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="案例：隔行换色"><a class="header-anchor" href="#案例：隔行换色">¶</a>案例：隔行换色</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210302133306.png" style="zoom:80%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//需求：将数据行的奇数行背景色设置为 pink，偶数行背景色设置为 yellow</span></span><br><span class="javascript">            $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">//1. 获取数据行（第一行开始）的奇数行（从0计数）的tr，设置背景色为pink</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;tr:gt(1):odd&quot;</span>).css(<span class="hljs-string">&quot;backgroundColor&quot;</span>,<span class="hljs-string">&quot;pink&quot;</span>);</span><br><span class="javascript">                <span class="hljs-comment">//2. 获取数据行的偶数行的tr,设置背景色为yellow</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;tr:gt(1):even&quot;</span>).css(<span class="hljs-string">&quot;backgroundColor&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tab1&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;删除&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: #999999;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>分类ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>分类名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>分类描述<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>手机数码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>手机数码类商品<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>|<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>电脑办公<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>电脑办公类商品<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>|<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>鞋靴箱包<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>鞋靴箱包类商品<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>|<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>家居饰品<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>家居饰品类商品<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>|<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="案例：全选与全不选"><a class="header-anchor" href="#案例：全选与全不选">¶</a>案例：全选与全不选</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//分析：需要保证下边的选中状态和第一个复选框的选中状态一致即可</span></span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectAll</span>(<span class="hljs-params">obj</span>)</span>&#123; <span class="hljs-comment">//传入this对象是为了获取首行的选中状态</span></span><br><span class="javascript">                <span class="hljs-comment">//选择下边的复选框，即class属性为itemSelect</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;.itemSelect&quot;</span>).prop(<span class="hljs-string">&quot;checked&quot;</span>,obj.checked);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tab1&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;删除&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span> <span class="hljs-comment">&lt;!--此处的this用得很妙--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;selectAll(this)&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>分类ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>分类名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>分类描述<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;itemSelect&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>手机数码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>手机数码类商品<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>|<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;itemSelect&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>电脑办公<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>电脑办公类商品<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>|<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;itemSelect&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>鞋靴箱包<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>鞋靴箱包类商品<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>|<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Chapter-3-DOM-操作"><a class="header-anchor" href="#Chapter-3-DOM-操作">¶</a>Chapter 3. DOM 操作</h1><h2 id="3-1-内容操作"><a class="header-anchor" href="#3-1-内容操作">¶</a>3.1 内容操作</h2><ul><li><code>html()</code>：获取/设置元素的标签体内容</li><li><code>text()</code>：获取/设置元素的标签体纯文本内容</li><li><code>val()</code>：获取/设置元素的 <code>value</code> 值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> value = $(<span class="hljs-string">&quot;#myinput&quot;</span>).val(); <span class="hljs-comment">//获取id为myinput的value值</span><br>    $(<span class="hljs-string">&quot;#myinput&quot;</span>).val(<span class="hljs-string">&quot;Luffy&quot;</span>); <span class="hljs-comment">//设置它的value值为&quot;Luffy&quot;</span><br><br>    <span class="hljs-keyword">var</span> html = $(<span class="hljs-string">&quot;#mydiv&quot;</span>).html(); <span class="hljs-comment">//获取id为mydiv的标签体内容</span><br>    $(<span class="hljs-string">&quot;#mydiv&quot;</span>).html(<span class="hljs-string">&quot;&lt;p&gt;aaaa&lt;/p&gt;&quot;</span>); <span class="hljs-comment">//设置它的标签体内容</span><br><br>    <span class="hljs-comment">//&lt;div id = &quot;mydiv&quot;&gt;&lt;p&gt;&lt;a href = &quot;#&quot;&gt;文本&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</span><br>    <span class="hljs-keyword">var</span> text = $(<span class="hljs-string">&quot;#mydiv&quot;</span>).text(); <span class="hljs-comment">//返回值：&quot;文本&quot;</span><br>    $(<span class="hljs-string">&quot;#mydiv&quot;</span>).text(<span class="hljs-string">&quot;bbb&quot;</span>);<br>    <span class="hljs-comment">//此时变为：&lt;div id = &quot;mydiv&quot;&gt;bbb&lt;/div&gt;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="3-2-属性操作"><a class="header-anchor" href="#3-2-属性操作">¶</a>3.2 属性操作</h2><p>（一）通用属性操作</p><ul><li><p><code>attr()</code>：获取/设置元素的<strong>自定义</strong>属性</p></li><li><p><code>prop()</code>：获取/设置元素的<strong>固有</strong>属性</p></li><li><p><code>removeAttr()</code>：删除元素的<strong>自定义</strong>属性</p></li><li><p><code>removeProp()</code>：删除元素的<strong>固有</strong>属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>jQuery学习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> name = $(<span class="hljs-string">&quot;#gz&quot;</span>).attr(<span class="hljs-string">&quot;name&quot;</span>); <span class="hljs-comment">//获取广州节点的name属性</span></span><br><span class="javascript">            $(<span class="hljs-string">&quot;#gz&quot;</span>).attr(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;LargerGuangzhou&quot;</span>); <span class="hljs-comment">//设置广州节点的name属性为LargerGuanggzhou</span></span><br><span class="javascript">            $(<span class="hljs-string">&quot;#hn&quot;</span>).attr(<span class="hljs-string">&quot;discription&quot;</span>, <span class="hljs-string">&quot;school&quot;</span>); <span class="hljs-comment">//新增湖南节点的discription属性</span></span><br><span class="javascript">            $(<span class="hljs-string">&quot;#hn&quot;</span>).removeAttr(<span class="hljs-string">&quot;name&quot;</span>); <span class="hljs-comment">//删除它的name属性</span></span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> checked = $(<span class="hljs-string">&quot;#hobbies&quot;</span>).prop(<span class="hljs-string">&quot;checked&quot;</span>); <span class="hljs-comment">//获取（或新增）id为hobby的复选框的选中状态</span></span><br><span class="javascript">            alert(checked);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;gz&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;Guangzhou&quot;</span> <span class="hljs-attr">xxx</span>=<span class="hljs-string">&quot;yyy&quot;</span>&gt;</span>我是广州<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;hn&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;Hunan&quot;</span> &gt;</span>我是湖南<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;hobbies&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>（二）对 class 属性操作</p><ul><li><p><code>addClass()</code>：添加 class 属性值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#mybutton&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-string">&quot;#NoOne&quot;</span>).prop(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;secondClass&quot;</span>);<br>&#125;);<br><span class="hljs-comment">//等效于</span><br>$(<span class="hljs-string">&quot;#mybutton&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-string">&quot;#NoOne&quot;</span>).addClass(<span class="hljs-string">&quot;secondClass&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p><code>removeClass()</code>：删除 class 属性值</p></li><li><p><code>toggleClass(&quot;属性&quot;)</code>：若元素对象原本就存在该属性，则该方法能够使该属性删除；若元素对象本不存在该属性，则该方法能够添加该属性。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/jQuery切换样式.gif"/></li></ul><h2 id="3-3-CRUD-操作"><a class="header-anchor" href="#3-3-CRUD-操作">¶</a>3.3 CRUD 操作</h2><ul><li><p><code>clone()</code>：生成被选元素的副本，包含子节点、文本和属性。</p></li><li><p><code>append()</code>：在被选元素<strong>内部</strong>结尾插入内容</p><blockquote><p>若内容是已经存在的标签对象，则 <code>append()</code> 会使该对象的位置发生变化</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;s1&quot;</span>&gt;</span>s1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-string">&quot;p&quot;</span>).append(<span class="hljs-string">&#x27;&lt;span class=&quot;s2&quot;&gt;s2&lt;/span&gt;&#x27;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果展示的 HTML 为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;s1&quot;</span>&gt;</span>s1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;s2&quot;</span>&gt;</span>s2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>prepend()</code>：在被选元素<strong>内部</strong>开头插入内容</p></li><li><p><code>after()</code>：在被选元素<strong>外部</strong>之后插入内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;s1&quot;</span>&gt;</span>s1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-string">&quot;p&quot;</span>).after(<span class="hljs-string">&#x27;&lt;span class=&quot;s2&quot;&gt;s2&lt;/span&gt;&#x27;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果展示的 HTML 为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;s1&quot;</span>&gt;</span>s1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;s2&quot;</span>&gt;</span>s2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>before()</code>：在被选元素<strong>外部</strong>之前插入内容</p></li></ul><h2 id="案例：表情选择"><a class="header-anchor" href="#案例：表情选择">¶</a>案例：表情选择</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/jQuery添加标签.gif" style="zoom:80%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>QQ表情选择<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">    *&#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<span class="hljs-attribute">list-style</span>: none;&#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.emoji</span>&#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">50px</span>;&#125;</span><br><span class="css">    <span class="hljs-selector-tag">ul</span>&#123;<span class="hljs-attribute">overflow</span>: hidden;&#125;</span><br><span class="css">    <span class="hljs-selector-tag">li</span>&#123;<span class="hljs-attribute">float</span>: left;<span class="hljs-attribute">width</span>: <span class="hljs-number">48px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">48px</span>;<span class="hljs-attribute">cursor</span>: pointer;&#125;</span><br><span class="css">    <span class="hljs-selector-class">.emoji</span> <span class="hljs-selector-tag">img</span>&#123; <span class="hljs-attribute">cursor</span>: pointer; &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//需求：点击qq表情，将其追加到发言框中</span></span><br><span class="javascript">        $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//1.给img图片添加onclick事件</span></span><br><span class="javascript">            $(<span class="hljs-string">&quot;ul img&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">//2.追加到p标签中即可。</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;.word&quot;</span>).append($(<span class="hljs-built_in">this</span>).clone());</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;emoji&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/01.gif&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/02.gif&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/03.gif&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/04.gif&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/05.gif&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/06.gif&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/07.gif&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/08.gif&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/09.gif&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/10.gif&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/11.gif&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/12.gif&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>请发言：<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/12.gif&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;22&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="案例：多选下拉列表的项进行左右移动"><a class="header-anchor" href="#案例：多选下拉列表的项进行左右移动">¶</a>案例：多选下拉列表的项进行左右移动</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/jQuery多选下拉列表的项进行左右移动.gif" style="zoom:80%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-id">#leftName</span> , <span class="hljs-selector-id">#btn</span>,<span class="hljs-selector-id">#rightName</span>&#123;</span><br><span class="css"><span class="hljs-attribute">float</span>: left;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-id">#toRight</span>,<span class="hljs-selector-id">#toLeft</span>&#123;</span><br><span class="css"><span class="hljs-attribute">margin-top</span>:<span class="hljs-number">100px</span> ;</span><br><span class="css"><span class="hljs-attribute">margin-left</span>:<span class="hljs-number">30px</span>;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.border</span>&#123;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//需求：实现下拉列表选中条目左右选择功能</span></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//toRight</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#toRight&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//获取右边的下拉列表对象，append(左边下拉列表选中的option)</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#rightName&quot;</span>).append($(<span class="hljs-string">&quot;#leftName &gt; option:selected&quot;</span>));</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">                <span class="hljs-comment">//toLeft</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;#toLeft&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-comment">//appendTo   获取右边选中的option，将其移动到左边下拉列表中</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#rightName &gt; option:selected&quot;</span>).appendTo($(<span class="hljs-string">&quot;#leftName&quot;</span>));</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;border&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;leftName&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;toRight&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;--&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;toLeft&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&lt;--&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rightName&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>钱七<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chapter-1-概述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chapter-1-概述&quot;&gt;¶&lt;/a&gt;Chapter 1. 概述&lt;/h1&gt;
&lt;h2 id=&quot;1-1-概念&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#</summary>
      
    
    
    
    <category term="Web前端" scheme="https://j-strawhat.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    <category term="jQuery" scheme="https://j-strawhat.github.io/categories/Web%E5%89%8D%E7%AB%AF/jQuery/"/>
    
    
    <category term="jQuery" scheme="https://j-strawhat.github.io/tags/jQuery/"/>
    
    <category term="JS" scheme="https://j-strawhat.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>「JavaWeb学习笔记07」过滤器(Filter)与监听器(Listener)</title>
    <link href="https://j-strawhat.github.io/posts/a0ce7ad9/"/>
    <id>https://j-strawhat.github.io/posts/a0ce7ad9/</id>
    <published>2021-02-25T22:15:00.000Z</published>
    <updated>2021-07-20T10:02:13.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-12-过滤器-Filter-与监听器-Listener"><a class="header-anchor" href="#Chapter-12-过滤器-Filter-与监听器-Listener">¶</a>Chapter 12. 过滤器 Filter 与监听器(Listener)</h1><h2 id="12-1-过滤器概述"><a class="header-anchor" href="#12-1-过滤器概述">¶</a>12.1 过滤器概述</h2><p>过滤器，能够对一部分客户请求先进行<strong>预处理操作</strong>，然后再把请求转发给响应的 Web 组件，等到 Web 组件生成了响应结果后，过滤器还能对响应结果进行<strong>检查和修改</strong>，然后再把修改后的响应结果发送给客户。</p><blockquote><p>各个 Web 组件中的相同操作可放到同一个过滤器中来完成，这样即能减少重复编码。</p></blockquote><p>具体来说，过滤器为 Web 组件（如 Servlet、JSP 或 HTML）提供如下过滤功能：</p><ul><li>在 Web 组件被调用之前<strong>检查</strong> ServletRequest 对象，<strong>修改</strong>请求头和请求正文的内容，或者对请求进行<strong>预处理</strong>操作。</li><li>在 Web 组件被调用之后<strong>检查</strong> ServletResponse 对象，<strong>修改</strong>响应头和响应正文。</li></ul><h2 id="12-2-Filter-快速入门"><a class="header-anchor" href="#12-2-Filter-快速入门">¶</a>12.2 Filter 快速入门</h2><p>所有自定义的过滤器必须实现 <code>javax.servlet.Filter</code> 接口，该接口含三个过滤器类必须实现的方法，见下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><span class="hljs-comment">//当客户请求访问的URL与过滤器映射的URL匹配时，会先调用过滤器的doFilter()</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterDemo1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br> <span class="hljs-comment">//过滤器的初始方法，该方法可通过 config 参数来读取 web.xml 文件中为过滤器配置的初始化参数</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        <br>        <span class="hljs-comment">//该方法完成实际的过滤操作，FilterChain 参数用于访问后续过滤器或Web组件</span><br><br>        <span class="hljs-comment">/*  执行流程  */</span><br>        <span class="hljs-comment">//①执行过滤器</span><br>        <br>        <span class="hljs-comment">//②执行放行后的资源</span><br>        filterChain.doFilter(servletRequest,servletResponse);<br>        <br>        <span class="hljs-comment">//③回来后，执行过滤器放行下边的代码</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//销毁过滤器对象前调用该方法，该方法可释放过滤器占用的资源</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，两次启动原因：Tomcat 配置里面勾选了 “after launch” 选项，导致在服务器启动，自动访问了一次 <code>index.jsp</code></p><p>当然，过滤器<strong>映射的 URL</strong> ，可在 <code>web\WEB-INF</code> 目录下的 <code>web.xml</code> 文档中配置：</p><blockquote><p>在 <code>web.xml</code> 文件中，必须先<strong>配置所有过滤器</strong>，再配置 Servlet 。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>cn.itcast.web.filter.FilterDemo1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>demo1<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 拦截路径 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="12-3-过滤器生命周期"><a class="header-anchor" href="#12-3-过滤器生命周期">¶</a>12.3 过滤器生命周期</h2><p>过滤器由 Servlet 容器创建，在它的生命周期中包含以下三个阶段：</p><ul><li><strong>初始化阶段</strong>：当 Web 应用启动时，Servlet 容器会加载过滤器类，创建过滤器配置对象（<code>FilterConfig</code>）和过滤器对象，并调用过滤器对象的 <code>init(FilterConfig config)</code> 方法</li><li><strong>运行时阶段</strong>：当客户请求访问的 URL 与为过滤器映射的 URL 匹配时，Servlet 容器将先调用过滤器的 <code>doFilter</code> 方法。</li><li><strong>销毁阶段</strong>：当 Web 应用终止时，Servlet 容器将先调用过滤器对象的 <code>destroy()</code> 方法，然后销毁过滤器对象。</li></ul><h2 id="12-4-过滤器的相关拦截配置"><a class="header-anchor" href="#12-4-过滤器的相关拦截配置">¶</a>12.4 过滤器的相关拦截配置</h2><h3 id="12-4-1-拦截路径配置"><a class="header-anchor" href="#12-4-1-拦截路径配置">¶</a>12.4.1 拦截路径配置</h3><ol><li>具体资源路径：<code>/index.jsp</code> ，只有访问 <code>index.jsp</code> 资源时，过滤器才会被执行。</li><li>拦截目录：<code>/user/*</code> ，访问 <code>/user</code> 下的所有资源时，过滤器都会被执行。</li><li>后缀名拦截：<code>*.jsp</code>，访问所有后缀名为 <code>jsp</code> 资源时，过滤器都会被执行。</li><li>拦截所有资源：<code>/*</code>，访问所有资源时，过滤器都会被执行。</li></ol><h3 id="12-4-2-拦截方式配置"><a class="header-anchor" href="#12-4-2-拦截方式配置">¶</a>12.4.2 拦截方式配置</h3><p>即以什么方式访问资源时会拦截。</p><ul><li>注解配置：设置 <code>dispatcherTypes</code> 属性：<ul><li><code>REQUEST</code>：默认值，浏览器直接请求资源</li><li><code>FORWARD</code>：转发访问资源</li><li><code>INCLUDE</code>：包含访问资源</li><li><code>ERROR</code>：错误跳转资源</li><li><code>ASYNC</code>：异步访问资源</li></ul></li><li><code>web.xml</code> 配置：设置 <code>&lt;dispatcher&gt;&lt;/dispatcher&gt;</code> 标签即可。</li></ul><h2 id="12-5-过滤器链"><a class="header-anchor" href="#12-5-过滤器链">¶</a>12.5 过滤器链</h2><p>过滤器优先级问题：</p><ul><li>注解配置：按照类名的字符串字典序比较，字典序小的先执行。</li><li><code>web.xml</code> 配置：<code>&lt;filter-mapping&gt;</code> 谁定义在上边，谁先执行。</li></ul><p>假设过滤器 A的优先级高于过滤器 B，则执行顺序如下，类似于栈的后进先出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> 过滤器A<br><span class="hljs-number">2.</span> 过滤器B<br><span class="hljs-number">3.</span> 资源执行<br><span class="hljs-number">4.</span> 过滤器B<br><span class="hljs-number">5.</span> 过滤器A<br></code></pre></td></tr></table></figure><h2 id="案例演示：登陆验证"><a class="header-anchor" href="#案例演示：登陆验证">¶</a>案例演示：登陆验证</h2><h3 id="需求"><a class="header-anchor" href="#需求">¶</a>需求</h3><p>必须要确保用户已经登陆，才能访问项目的其他资源。</p><blockquote><p>若不进行验证，但用户知道某些资源的路径，便能够直接越过登陆进行访问了。</p></blockquote><p>若用户：</p><ul><li>已经登陆，则直接放行。</li><li>没有登陆，强制跳转到登陆页面，并提示“您尚未登陆，请先登陆”</li></ul><h3 id="代码示例"><a class="header-anchor" href="#代码示例">¶</a>代码示例</h3><blockquote><p>通过下面的过滤器代码，能够体现过滤器的作用。同时，也进一步体会 Session 跟踪客户状态的作用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        HttpServletRequest request = (HttpServletRequest) req; <span class="hljs-comment">//强转</span><br>        String uri = request.getRequestURI(); <span class="hljs-comment">//获取请求的【路径】</span><br>        <span class="hljs-keyword">if</span>(uri.contains(<span class="hljs-string">&quot;/login.jsp&quot;</span>) || uri.contains(<span class="hljs-string">&quot;/loginServlet&quot;</span>) || uri.contains(<span class="hljs-string">&quot;/css/&quot;</span>) <br>        || uri.contains(<span class="hljs-string">&quot;/js/&quot;</span>) || uri.contains(<span class="hljs-string">&quot;/fonts/&quot;</span>) || uri.contains(<span class="hljs-string">&quot;/checkCodeServlet&quot;</span>))&#123;<br>            <span class="hljs-comment">//判断请求路径是否为登陆相关的资源路径，注意排除掉CSS/JS等静态资源</span><br>            chain.doFilter(req, resp);  <span class="hljs-comment">//若是，说明用户请求登陆，放行即可</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//不包含，需要验证用户是否已经登陆</span><br>            Object user = request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<span class="hljs-comment">//从Session中获取user信息</span><br>            <span class="hljs-keyword">if</span>(user != <span class="hljs-keyword">null</span>)&#123;  <span class="hljs-comment">//若已经存在user信息</span><br>                chain.doFilter(req, resp); <span class="hljs-comment">//则直接放行</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//若不存在user信息，需要跳转登陆页面并给予登陆提示信息</span><br>                request.setAttribute(<span class="hljs-string">&quot;login_msg&quot;</span>, <span class="hljs-string">&quot;您尚未登陆，请先登陆!&quot;</span>);<br>                request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request, resp);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//chain.doFilter(req, resp);</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-6-动态代理"><a class="header-anchor" href="#12-6-动态代理">¶</a>12.6 动态代理</h2><h3 id="12-6-1-相关概念"><a class="header-anchor" href="#12-6-1-相关概念">¶</a>12.6.1 相关概念</h3><ul><li>设计模式：一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结，是对面向对象设计中反复出现的问题的解决方案。</li><li>抽象角色：通过接口或抽象类声明真实角色实现的业务方法。</li><li>真实角色：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。</li><li>代理角色：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以<strong>附加自己的操作</strong>，达到增强真实角色功能的目的。</li></ul><p>关于代理，分两种实现方式：</p><ul><li>静态代理：有一个类文件描述代理模式</li><li>动态代理：在内存中形成代理类</li></ul><h3 id="12-6-2-动态代理的实现步骤"><a class="header-anchor" href="#12-6-2-动态代理的实现步骤">¶</a>12.6.2 动态代理的实现步骤</h3><ol><li>代理对象和真实对象实现<strong>相同的接口</strong>；</li><li>代理对象 = <code>Proxy.newProxyInstance()</code></li><li>使用代理对象调用真实对象的方法</li><li>增强真实对象的方法，分三种增强：<ul><li>增强参数列表</li><li>增强返回值类型</li><li>增强方法体执行逻辑</li></ul></li></ol><p>具体见下面代码。</p><h3 id="案例演示：敏感词屏蔽"><a class="header-anchor" href="#案例演示：敏感词屏蔽">¶</a>案例演示：敏感词屏蔽</h3><p>需求：对新录入的数据进行敏感词过滤，使得敏感词替换为 <code>***</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SensitiveWordsFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;(); <span class="hljs-comment">//敏感词汇集合</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 通过 ServletContext 获取文件真实路径</span><br>            ServletContext servletContext = filterConfig.getServletContext();<br>            String realPath = servletContext.getRealPath(<span class="hljs-string">&quot;/WEB-INF/classes/敏感词汇.txt&quot;</span>);<br>            <span class="hljs-comment">//2. 字符缓冲流与文件建立联系</span><br>            BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(realPath));<br>            <span class="hljs-comment">//3. 将敏感词汇文件中的每一个敏感词（独占一行）添加到list集合</span><br>            String line = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">while</span>((line = br.readLine()) != <span class="hljs-keyword">null</span>)&#123;<br>                list.add(line);<br>            &#125;<br>            br.close();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        <span class="hljs-comment">//1. 创建代理对象，增强 getParameter 方法中的【返回值】</span><br>        ServletRequest proxy_req = (ServletRequest) <br>            Proxy.newProxyInstance(req.getClass().getClassLoader(),<br>            req.getClass().getInterfaces(), <br>            <span class="hljs-keyword">new</span> InvocationHandler() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                    <span class="hljs-keyword">if</span>(method.getName().equals(<span class="hljs-string">&quot;getParameter&quot;</span>))&#123; <span class="hljs-comment">//判断是否为getParameter方法</span><br>                        String parameter = (String) method.invoke(req, args); <br>                        <span class="hljs-comment">//获取原方法的返回值（即请求参数）</span><br>                        <span class="hljs-keyword">if</span>(parameter != <span class="hljs-keyword">null</span>)&#123;<br>                            <span class="hljs-keyword">for</span>(String sensitive_str : list)&#123; <span class="hljs-comment">//遍历敏感词汇集合</span><br>                                <span class="hljs-keyword">if</span>(parameter.contains(sensitive_str)) <span class="hljs-comment">//若请求参数中含有敏感词，将其替换为***</span><br>                                    parameter = parameter.replaceAll(sensitive_str, <span class="hljs-string">&quot;***&quot;</span>);<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">return</span> parameter;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> method.invoke(req, args);<br>                &#125;<br>        &#125;);<br>        <span class="hljs-comment">//2. 过滤器放行</span><br>        chain.doFilter(proxy_req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-7-监听器-Listener"><a class="header-anchor" href="#12-7-监听器-Listener">¶</a>12.7 监听器 Listener</h2><h3 id="12-7-1-事件监听机制"><a class="header-anchor" href="#12-7-1-事件监听机制">¶</a>12.7.1 事件监听机制</h3><ul><li>事件</li><li>事件源：事件发生的地方</li><li>监听器：一个对象</li><li>注册监听：将事件、事件源、监听器绑定在一起。当事件源上发生某个事件后，执行监听器代码。</li></ul><h3 id="12-7-2-ServletContextListener"><a class="header-anchor" href="#12-7-2-ServletContextListener">¶</a>12.7.2 ServletContextListener</h3><p><code>ServletContextListener</code> 监听 ServletContext 对象的创建和销毁</p><h4 id="方法"><a class="header-anchor" href="#方法">¶</a>方法</h4><ul><li><code>void contextDestroyed(ServletContextEvent sce)</code>：ServletContext 对象被销毁之前会调用该方法</li><li><code>void contextInitialized(ServletContextEvent sce)</code>：ServletContext 对象创建后会调用该方法</li></ul><h4 id="步骤"><a class="header-anchor" href="#步骤">¶</a>步骤</h4><ol><li><p>定义一个类，实现 <code>ServletContextListener</code> 接口</p></li><li><p>覆写上述两个方法</p></li><li><p>配置方式：</p><p>方式一——<code>web.xml</code> 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span><br>        cn.itcast.web.listener.ContextLoaderListener<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式二——注解：<code>@WebListener</code></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chapter-12-过滤器-Filter-与监听器-Listener&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chapter-12-过滤器-Filter-与监听器-Listener&quot;&gt;¶&lt;/a&gt;Chapter 12. 过滤器 Filte</summary>
      
    
    
    
    <category term="Java" scheme="https://j-strawhat.github.io/categories/Java/"/>
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/categories/Java/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>「JavaWeb学习笔记06」JSP技术、MVC</title>
    <link href="https://j-strawhat.github.io/posts/30be733a/"/>
    <id>https://j-strawhat.github.io/posts/30be733a/</id>
    <published>2021-02-25T07:55:00.000Z</published>
    <updated>2021-07-20T10:02:13.905Z</updated>
    
    <content type="html"><![CDATA[<p>以后再填坑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以后再填坑。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Java" scheme="https://j-strawhat.github.io/categories/Java/"/>
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/categories/Java/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/tags/JavaWeb/"/>
    
    <category term="JSP" scheme="https://j-strawhat.github.io/tags/JSP/"/>
    
    <category term="JSTL" scheme="https://j-strawhat.github.io/tags/JSTL/"/>
    
    <category term="EL表达式" scheme="https://j-strawhat.github.io/tags/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>「JavaWeb学习笔记05」会话及其技术应用</title>
    <link href="https://j-strawhat.github.io/posts/39c34c5f/"/>
    <id>https://j-strawhat.github.io/posts/39c34c5f/</id>
    <published>2021-02-25T01:28:00.000Z</published>
    <updated>2021-07-20T10:02:13.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-8-会话技术"><a class="header-anchor" href="#Chapter-8-会话技术">¶</a>Chapter 8. 会话技术</h1><h2 id="8-1-会话机制"><a class="header-anchor" href="#8-1-会话机制">¶</a>8.1 会话机制</h2><p>HTTP 是<strong>无状态</strong>的协议（对于事务处理没有<strong>记忆能力</strong>），必须在 HTTP 请求中加入一些额外的用于跟踪客户状态的数据。</p><p>在 Web 开发中，<strong>会话机制</strong>，便是用于<strong>跟踪客户状态</strong>的普遍解决方案（使用 ASP、PHP 或 JSP 开发的 Web 应用都可以运用会话机制）。</p><p><strong>会话</strong>，指在一段时间内，单个客户与 Web 应用的<strong>一连串相关的交互过程</strong>。在一个会话中，客户可能会多次请求访问 Web 应用的同一个网页，也有可能请求方法同一个 Web 应用中的多个网页。</p><h2 id="8-2-Cookie"><a class="header-anchor" href="#8-2-Cookie">¶</a>8.2 Cookie</h2><h3 id="8-2-1-Cookie基本运作机制"><a class="header-anchor" href="#8-2-1-Cookie基本运作机制">¶</a>8.2.1 Cookie基本运作机制</h3><p>Cookie，是在客户端访问 Web 服务器时，<strong>服务器在客户端硬盘上存放的信息</strong>。而服务器可根据 Cookie 来跟踪客户状态，这对于需<strong>区别客户</strong>的场合十分有用。</p><p>当客户端<strong>首次</strong>请求访问服务器时，服务器现在客户端存放包含该客户的相关信息的Cookie，以后客户端每次请求访问服务器时，都会在 <strong>HTTP 请求数据中</strong>包含 Cookie，服务器解析 HTTP 请求中的 Cookie，便能获得关于客户的<strong>少量</strong>相关信息。（在不登录的情况下，完成服务器对客户的身份识别）</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210226195225.png" style="zoom:80%;" /><blockquote><p>Cookie 作用，就类似于健身馆向会员发送的会员卡（存储了该会员的编号、姓名等信息），以后每次客户到健身馆需出示会员卡，健身馆依据会员卡信息判断是否允许客户健身。</p></blockquote><p>服务器对客户端进行读写 Cookie 操作，会给客户端带来安全隐患，服务器可能会向客户端发送包含恶意代码的 Cookie 数据，此外，服务器可能会依据客户端的 Cookie 来窃取用户的保密信息。</p><h3 id="8-2-2-Cookie-相关方法"><a class="header-anchor" href="#8-2-2-Cookie-相关方法">¶</a>8.2.2 Cookie 相关方法</h3><p>Tomcat 作为 Web 服务器，对 Cookie 提供良好支持，Java Servlet API  为 Servlet 访问 Cookie 提供简单易用的接口。</p><p>Cookie 用 <code>javax.servlet.http.Cookie</code> 类来表示，每个 Cookie 对象包含一个 Cookie 名字（调用 <code>getName()</code> 方法）及 Cookie 值（调用 <code>getValue()</code> 方法）。</p><ul><li><p>Cookie 类的构造方法中，第一个参数为 Cookie 名字，第二个为 Cookie 值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie theCookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;Luffy&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>调用 <code>HttpServletResponse</code> 的方法，将 Cookie 添加到 HTTP 响应结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.addCookie(theCookie);<br></code></pre></td></tr></table></figure></li><li><p>调用 <code>HttpServletResquest</code> 的方法，从 HTTP 请求中获取所有的 Cookie：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie cookies[] = request.getCookies();<br></code></pre></td></tr></table></figure></li></ul><p>代码演示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/CookieDemo1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//1. 创建Cookie对象</span><br>        Cookie c = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;secret&quot;</span>); <span class="hljs-comment">//传入的字符串尽量不要含空白符</span><br>        <span class="hljs-comment">//2. 发送Cookie</span><br>        response.addCookie(c);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/CookieDemo2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieDemo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//3. 获取Cookie</span><br>        Cookie[] cookies = request.getCookies();<br>        <span class="hljs-keyword">if</span>(cookies != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">for</span>(Cookie ce : cookies)&#123;<br>                System.out.println(ce.getName() + <span class="hljs-string">&quot;:&quot;</span> + ce.getValue());<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210225175912.png"/><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210225180033.png"/><h4 id="共享问题"><a class="header-anchor" href="#共享问题">¶</a>共享问题</h4><ol><li><p>若 <strong>同一个Tomcat 服务器</strong>中，部署了多个 Web 应用，那么 <strong>默认情况</strong>下， Cookie 不能共享。</p><ul><li><code>setPath(String path)</code>：设置 Cookie 的获取范围，默认情况下，设置当前的虚拟目录。若希望将该 Cookie 共享，则可将 <code>path</code> 设置为 <code>&quot;/&quot;</code>（Tomcat 服务器根路径）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 创建Cookie对象</span><br>Cookie c = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;secret&quot;</span>); <span class="hljs-comment">//传入的字符串尽量不要含空白符</span><br><span class="hljs-comment">//2. 设置path，让当前服务器下部署的所有项目均能够共享Cookie</span><br>c.setPath(<span class="hljs-string">&quot;/&quot;</span>); <br><span class="hljs-comment">//3. 发送Cookie</span><br>response.addCookie(c);<br></code></pre></td></tr></table></figure></li><li><p>对于 <strong>不同的 Tomcat 服务器</strong></p><ul><li><code>setDomain(String path)</code>：若设置一级域名相同，则可以实现多个特定服务器间的 Cookie 共享，如：（注意，参数 <code>path</code> 必须以 <code>.</code> 开头）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">cookie.setDomain(<span class="hljs-string">&quot;.baidu.com&quot;</span>);<br><span class="hljs-comment">//此时，tieba.baidu.com和news.baidu.com中可共享该Cookie</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="细节问题"><a class="header-anchor" href="#细节问题">¶</a>细节问题</h4><ul><li>能够创建<strong>多个</strong> Cookie 对象，多次调用 <code>addCookie()</code> 方法发送 Cookie 即可</li><li>Cookie 若要存储 <strong>中文数据</strong>、特殊字符，应使用 URL 编码存储。读取 Cookie 时，再解码解析信息</li></ul><h3 id="8-2-3-Cookie-有效期"><a class="header-anchor" href="#8-2-3-Cookie-有效期">¶</a>8.2.3 Cookie 有效期</h3><p>当 Servlet 向客户端写 Cookie 时，还可通过 Cookie 类的 <code>setMaxAge(int expiry)</code> 方法来设置 Cookie 的有效期。</p><p>传入参数 <code>expiry</code> 以<strong>秒</strong>为单位，它的值具有以下含义：</p><ul><li>正数：指示浏览器在客户端硬盘上保存 Cookie 的时间为 <code>expiry</code></li><li>零：指示浏览器删除当前 Cookie</li><li>负数（默认值）：指示浏览器不要把 Cookie 保存到客户端硬盘，Cookie 仅仅存在于 <strong>当前浏览器进程</strong> 中，当浏览器进程关闭，Cookie 也消失。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 创建Cookie对象</span><br>Cookie c = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;secret&quot;</span>); <span class="hljs-comment">//传入的字符串尽量不要含空白符</span><br><span class="hljs-comment">//2. 设置Cookie存活时间</span><br>c.setMaxAge(<span class="hljs-number">30</span>); <span class="hljs-comment">//将Cookie持久化存放到硬盘，30s后会自动删除Cookie文件</span><br><span class="hljs-comment">//3. 发送Cookie</span><br>response.addCookie(c);<br></code></pre></td></tr></table></figure><h3 id="8-2-4-案例演示：记忆上次访问时间"><a class="header-anchor" href="#8-2-4-案例演示：记忆上次访问时间">¶</a>8.2.4 案例演示：记忆上次访问时间</h3><p>需求：</p><p>访问一个 Servlet ，若是首次访问，则提示：您好，欢迎您首次访问；若非首次访问，则提示：欢迎回来，您上次访问时间为：yyyy年MM月dd日 HH:mm:ss</p><p>此处只给出 Servlet 的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/HelloCookie&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloCookie</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//设置响应的消息体的数据格式以及编码</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        Cookie[] cookies = request.getCookies();<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>        <span class="hljs-keyword">if</span>(cookies != <span class="hljs-keyword">null</span> &amp;&amp; cookies.length &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span>(Cookie ce : cookies)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;lastTime&quot;</span>.equals(ce.getName()))&#123;<br>                    flag = <span class="hljs-keyword">true</span>;<br>                    String curDate = URLDecoder.decode(ce.getValue(), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>                    response.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;欢迎回来，您上次访问时间为:&quot;</span> + curDate + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!flag) response.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;您好，欢迎您首次访问&lt;/h1&gt;&quot;</span>);<br><br>        Date date = <span class="hljs-keyword">new</span> Date();<span class="hljs-comment">//分配Date对象并自动设置时间</span><br>        SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>); <span class="hljs-comment">//日期格式化对象</span><br>        String strDate = sdf.format(date); <span class="hljs-comment">//将Date对象格式化为字符串</span><br>        System.out.println(<span class="hljs-string">&quot;URL编码前:&quot;</span> + strDate);<br>        strDate = URLEncoder.encode(strDate, <span class="hljs-string">&quot;utf-8&quot;</span>); <span class="hljs-comment">//URL编码</span><br>        System.out.println(<span class="hljs-string">&quot;URL编码后:&quot;</span> + strDate);<br><br>        Cookie lastTimeCk = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;lastTime&quot;</span>, strDate);<br>        lastTimeCk.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span>); <span class="hljs-comment">//设置Cookie存活时间：1 month</span><br>        response.addCookie(lastTimeCk);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-3-Session"><a class="header-anchor" href="#8-3-Session">¶</a>8.3 Session</h2><h3 id="8-3-1-会话的运作机制"><a class="header-anchor" href="#8-3-1-会话的运作机制">¶</a>8.3.1 会话的运作机制</h3><p>Servlet 规范指定了基于 Java 的会话的具体运作机制，在 Servlet API 中定义了代表会话的 <code>javax.servlet.http.HttpSession</code> 接口，Servlet <strong>容器</strong>必须实现这一接口。</p><p>会话的运作流程如下：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210226213418.png" style="zoom:80%;" /><ol><li>一个浏览器进程<strong>第一次请求</strong>访问某个 Web 应用中的任意一个支持会话的网页，<strong>Servlet 容器</strong>试图<strong>寻找 HTTP 请求</strong>中表示 Session ID 的 Cookie 。但由于还不存在该 Cookie，故认为一个新的会话开始，于是创建了一个 <code>HttpSession</code> 对象，为它分配<strong>唯一的Session ID</strong> ，并将 Session ID 作为 Cookie 添加到 <strong>HTTP 响应结果</strong>中。</li><li>当浏览器接收到 HTTP 响应结果后，会把其中表示 Session ID 的 <strong>Cookie 保存到客户端</strong></li><li>浏览器进程继续请求访问 刚刚 Web 应用中的任意一个支持会话的网页，在<strong>本次 HTTP 请求中会包含表示 Session ID 的Cookie</strong>。Servlet 容器同时也成功寻找了该 Cookie，于是认为本次请求已经处于一个会话了，故不再创建新的 <code>HttpServlet</code> 对象，而是从 <strong>Cookie 中获取 Session ID</strong>，并根据其找到内存中对应的 <code>HttpServlet</code> 对象</li><li>浏览器进程重复步骤3，直到当前会话被销毁，<code>HttpServlet</code> 对象就会结束生命周期。</li></ol><blockquote><p>简而言之，Session 是基于 Cookie 实现的，Session 存储在 服务器端，而 Session ID 会被存储到客户端的 Cookie 中</p></blockquote><h3 id="8-3-2-HttpSession-相关方法"><a class="header-anchor" href="#8-3-2-HttpSession-相关方法">¶</a>8.3.2 HttpSession 相关方法</h3><ul><li>获取 <code>HttpSession</code> 对象：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HttpSession session = request.getSession();<br></code></pre></td></tr></table></figure><p><code>HttpSession</code> 接口的以下方法用于向<strong>会话范围</strong>内存取共享数据：</p><ol><li>返回会话范围内与参数 <code>name</code> 匹配的共享数据：<code>Object getAttribute(String name) </code></li><li>向会话范围内存放共享数据：<code>void setAttribute(String name, Object value)</code></li><li>删除会话范围内的一个共享数据：<code>void removeAttribute(String name)</code></li></ol><h3 id="8-3-4-HttpSession-的生命周期"><a class="header-anchor" href="#8-3-4-HttpSession-的生命周期">¶</a>8.3.4 HttpSession 的生命周期</h3><p>以下情况，会<strong>开始一个新的会话</strong>，即 Servlet 容器会创建一个新的  <code>HttpSession</code> 对象：</p><ul><li>一个浏览器进程第一次访问 Web 应用中的支持会话的任意一个网页；</li><li>当浏览器进程与 Web 应用的一次会话已经被销毁后，浏览器进程再次访问 Web 应用中的支持会话的任意一个网页。</li></ul><p>以下情况，<strong>会话被销毁</strong>，即 Servlet 容器使得 <code>HttpSession</code> 对象结束生命周期，并且存放在会话范围内的共享数据也都被销毁：</p><ul><li><p>浏览器进程被终止；</p><blockquote><p>当会话开始后，若浏览器进程突然关闭，Servlet 容器端无法立即执照浏览器进程已经被关闭，故 Servlet 容器端的 <code>HttpSession</code> 对象不会立即结束生命周期，该对话进入不活动状态，等到超过了 <code>setMaxInactiveInterval(int interval)</code> 设置的时间，会话就会过期而被 Servlet 容器销毁。</p></blockquote></li><li><p>服务器端执行 <code>HttpSession</code> 对象的 <code>invalidate()</code> 方法；</p><blockquote><p>当 Tomcat 中的 Web 应用被终止时，它的会话不会被销毁，而是被 Tomcat 持久化到永久性存储设备中，当 Web 应用重启时，Tomcat 会重新加载这些会话。</p></blockquote></li><li><p>会话过期：当会话开始后，若一段时间内，客户一直没有和 Web 应用交互，即一直没有请求访问 Web 应用中的支持会话的任意一个网页，那么 Servlet 容器会自动销毁这个会话。</p><blockquote><p><code>HttpSession</code> 类的 <code>setMaxInactiveInterval(int interval)</code> 方法，用于设置允许会话保持不活动状态的时间（以秒为单位）</p></blockquote></li></ul><h3 id="8-3-5-Cookie-与-Session-的区别"><a class="header-anchor" href="#8-3-5-Cookie-与-Session-的区别">¶</a>8.3.5 Cookie 与 Session 的区别</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Cookie</th><th style="text-align:center">Session</th></tr></thead><tbody><tr><td style="text-align:center">安全性</td><td style="text-align:center">存储在客户端</td><td style="text-align:center">存储在服务器端，<br>更加安全</td></tr><tr><td style="text-align:center">存值类型</td><td style="text-align:center">只支持字符串数据，<br>其他类型数据需转换为字符串</td><td style="text-align:center">存任意数据类型</td></tr><tr><td style="text-align:center">有效期</td><td style="text-align:center">长时间保持<br>（如默认登陆）</td><td style="text-align:center">短时间</td></tr><tr><td style="text-align:center">存储大小</td><td style="text-align:center">单个 Cookie 不超过 4K</td><td style="text-align:center">比 Cookie 高</td></tr></tbody></table><h3 id="8-3-6-案例演示：验证码与页面跳转"><a class="header-anchor" href="#8-3-6-案例演示：验证码与页面跳转">¶</a>8.3.6 案例演示：验证码与页面跳转</h3><p>需求：</p><ol><li>带有验证码的登陆页面 <code>login.jsp</code></li><li>用户输入用户名、密码及验证码后：<ul><li>若用户名和密码输入有误，跳转到登陆页面，并提示：用户名或密码错误</li><li>若<strong>验证码输入有误</strong>，跳转登陆页面，提示：验证码错误</li><li>若全部输入正确，跳转到主页 <code>success.jsp</code>，提示：<code>用户名</code>，欢迎您</li></ul></li></ol><p>此处只给出了 <code>LoginServlet</code> 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/loginServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//1.设置request编码</span><br>        request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-comment">//2.获取参数</span><br>        String username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password = request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        User LoginUser = <span class="hljs-keyword">new</span> User(username, password);<br>        String checkCode = request.getParameter(<span class="hljs-string">&quot;checkCode&quot;</span>);<br>        <span class="hljs-comment">//3.先获取生成的验证码</span><br>        HttpSession session = request.getSession();<br>        String checkCode_session = (String) session.getAttribute(<span class="hljs-string">&quot;checkCode_session&quot;</span>);<br>        <span class="hljs-comment">//删除session中存储的验证码（保证登陆失败重定向后，验证码图片不是原来的）</span><br>        session.removeAttribute(<span class="hljs-string">&quot;checkCode_session&quot;</span>);<br>        <span class="hljs-comment">//3.先判断验证码（忽略大小写）是否正确</span><br>        <span class="hljs-keyword">if</span>(checkCode_session!= <span class="hljs-keyword">null</span> &amp;&amp; checkCode_session.equalsIgnoreCase(checkCode))&#123;<br>            User resUser = <span class="hljs-keyword">new</span> UserDao().login(loginUser); <span class="hljs-comment">//判断用户名和密码是否一致</span><br>            <span class="hljs-keyword">if</span>(resUser != <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-comment">//登录成功，则将用户信息存到 session，并通过响应重定向到success.jsp</span><br>                session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>,username);<br>                response.sendRedirect(request.getContextPath()+<span class="hljs-string">&quot;/success.jsp&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//登录失败，将提示信息存到【请求】，并将请求转发到登陆页面</span><br>                session.setAttribute(<span class="hljs-string">&quot;login_error&quot;</span>, <span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>                response.sendRedirect(request.getContextPath() + <span class="hljs-string">&quot;/login.jsp&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//验证码不一致，将提示信息存到【请求】，并将请求转发到登陆页面</span><br>            session.setAttribute(<span class="hljs-string">&quot;cc_error&quot;</span>, <span class="hljs-string">&quot;验证码错误&quot;</span>);<br>            response.sendRedirect(request.getContextPath() + <span class="hljs-string">&quot;/login.jsp&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chapter-8-会话技术&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chapter-8-会话技术&quot;&gt;¶&lt;/a&gt;Chapter 8. 会话技术&lt;/h1&gt;
&lt;h2 id=&quot;8-1-会话机制&quot;&gt;&lt;a class=&quot;header-anchor&quot;</summary>
      
    
    
    
    <category term="Java" scheme="https://j-strawhat.github.io/categories/Java/"/>
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/categories/Java/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/tags/JavaWeb/"/>
    
    <category term="Cookie" scheme="https://j-strawhat.github.io/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>「JavaWeb学习笔记04」请求与响应</title>
    <link href="https://j-strawhat.github.io/posts/9ab123b/"/>
    <id>https://j-strawhat.github.io/posts/9ab123b/</id>
    <published>2021-02-21T02:30:00.000Z</published>
    <updated>2021-07-20T10:02:13.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-5-HTTP"><a class="header-anchor" href="#Chapter-5-HTTP">¶</a>Chapter 5. HTTP</h1><h2 id="5-1-HTTP-概述"><a class="header-anchor" href="#5-1-HTTP-概述">¶</a>5.1 HTTP 概述</h2><p>HTTP 协议（Hypertext Transfer Protocol，超文本传输协议），顾名思义，即关于如何在网络上传输超文本（即 HTML 文档）的协议。</p><p>HTTP协议，规定了 Web 的基本运作过程，以及<strong>浏览器与 Web 服务器</strong>之间的通信细节。</p><p>特点：</p><ol><li><p>在分层的网络体系结构中，HTTP协议位于<strong>应用层</strong>，建立在 <strong>TCP/IP 协议的基础上</strong>。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210223012555.png"/></li><li><p>默认端口号是 <strong><code>80</code></strong>。</p></li><li><p>HTTP 协议，规定 Web 基本运作过程基于<strong>客户/服务器</strong>通信模式：客户端主动发出 HTTP 请求，服务器端接收 HTTP 请求，再返回相应的 HTTP 响应结果。</p><blockquote><p>举个例子，当用户再浏览器输入 URL 地址：<code>http://www.javathinker.org/java/book.html</code> 后：</p><ol><li>浏览器与网络上的域名为 <code>www.javathinker.org</code> 的 Web 服务器建立 <strong>TCP 连接</strong>。</li><li>浏览器发出要求访问 <code>java/book.html</code> 的 <strong>HTTP 请求</strong>。</li><li>Web 服务器在接收到 HTTP 请求后，解析 HTTP 请求，然后发回包含 <code>book.html</code> 文件数据的 <strong>HTTP 响应</strong>。</li><li>浏览器在接收到 HTTP 相应后，解析 HTTP 响应，并在窗口中展示 <code>book.html</code> 文件。</li><li>浏览器与 Web 服务器之间的 TCP 连接关闭</li></ol></blockquote></li></ol><p>历史版本：</p><ul><li>1.0：每一次请求相应都会建立新的连接</li><li>1.1：复用连接</li></ul><h2 id="5-2-HTTP-请求格式"><a class="header-anchor" href="#5-2-HTTP-请求格式">¶</a>5.2 HTTP 请求格式</h2><p>HTTP 请求由三部分构成：</p><ul><li>请求行</li><li>请求头（Request Header）</li><li>请求正文（Request Content）</li></ul><p>通过火狐浏览器的开发者工具，我们能够看到下面的 HTTP 请求的例子：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210221221751029.png"/><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/MyEEProjects_war_exploded/login.html</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/MyEEProjects_war_exploded/login.html<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br><span class="ini"><span class="hljs-attr">username</span>=Luffy&amp;submit=submit</span><br></code></pre></td></tr></table></figure><h3 id="5-2-1-请求行"><a class="header-anchor" href="#5-2-1-请求行">¶</a>5.2.1 请求行</h3><p>HTTP 请求的第一行即为 <strong>请求行</strong>，它包括 <strong>请求方式</strong>、<strong>URI</strong>（URL 是 URI 的一个子类别）、<strong>协议版本</strong> 这三项内容，以空格分开：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/MyEEProjects_war_exploded/login.html</span> <span class="hljs-meta">HTTP/1.1</span><br></code></pre></td></tr></table></figure><blockquote><p>UR<strong>I</strong>（统一资源定位<strong>符</strong>），用于标识要访问的网络资源。在HTTP请求中，通常只要给出服务器的根目录的相对目录即可，以 <code>/</code> 开头。</p></blockquote><p>HTTP请求有7种请求方式，常用的有两种：</p><ul><li><code>GET</code>：<ol><li>请求参数在<strong>请求行</strong>中，可理解为 紧跟在 URL 后；</li><li>请求的 URL 长度有限制（不适用于文件的上传）</li><li>不太安全</li></ol></li><li><code>POST</code>：<ol><li>请求参数在<strong>请求体</strong>中</li><li>请求的 URL 长度没有限制</li><li>相对安全</li></ol></li></ul><h3 id="5-2-2-请求头"><a class="header-anchor" href="#5-2-2-请求头">¶</a>5.2.2 请求头</h3><p>请求头包含许多有关客户端环境和请求正文的有用信息。例如：请求头可以声明浏览器的类型、所用语言、请求正文的类型，以及请求正文的长度等。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:8080 <br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://localhost/MyEEProjects_war_exploded/login.html<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br></code></pre></td></tr></table></figure><p>常用的请求头：</p><ol><li><code>User-Agent</code>：浏览器告诉服务器，所使用的浏览器版本信息。通过该请求头，可以在服务器端获取该头的信息，解决浏览器的兼容性问题。</li><li><code>Referer</code>：告诉服务器，当前请求从哪里来。作用：①防盗链；②统计工作</li></ol><h3 id="5-2-3-请求正文"><a class="header-anchor" href="#5-2-3-请求正文">¶</a>5.2.3 请求正文</h3><p>HTTP 协议规定，请求头和请求正文间必须以<strong>空行分割</strong>（即只有 CRLF 符号的行），非常重要，表示了请求头已经结束，接下来是请求正文。</p><blockquote><p>CRLF，是指回车符和行结束符 <code>&quot;\r\n&quot;</code></p></blockquote><p>在请求正文中可以包含客户以 <code>POST</code> 方式提交的表单数据（参数）：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">username=Luffy&amp;submit=submit<br></code></pre></td></tr></table></figure><p><code>GET</code> 请求，是没有请求体的。</p><h2 id="5-3-HTTP-响应格式"><a class="header-anchor" href="#5-3-HTTP-响应格式">¶</a>5.3 HTTP 响应格式</h2><p>HTTP 响应，也由 三个部分 构成，分别是：</p><ul><li>响应行</li><li>响应头（Response Header）</li><li>响应体（Response Content）</li></ul><p>一个 HTTP 响应的例子：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html;charset=UTF-8<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>124<br><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Wed, 24 Feb 2021 14:36:20 GMT<br><span class="hljs-attribute">Keep-Alive</span><span class="hljs-punctuation">: </span>timeout=20<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Tomcat服务器启动啦<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">H1</span>&gt;</span>Hello, World!<span class="hljs-tag">&lt;/<span class="hljs-name">H1</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="5-3-1-响应行"><a class="header-anchor" href="#5-3-1-响应行">¶</a>5.3.1 响应行</h3><p>HTTP 响应行的第一行包括<strong>服务器使用的 HTTP 协议的版本</strong>、<strong>状态代码</strong>，以及<strong>对状态代码的描述</strong>，这3项内容之间以空格分隔，如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK<br></code></pre></td></tr></table></figure><p>状态代码是一个 三位 整数，以 <code>1</code>、<code>2</code>、<code>3</code>、<code>4</code>、<code>5</code> 开头。</p><ul><li><code>1xx</code>：信息提示，代表请求已被接受，需要继续处理。临时的响应。</li><li><code>2xx</code>：相应成功，表名服务器成功地接收了客户端请求。如：<code>200</code>——相应成功。</li><li><code>3xx</code>：重定向。如：<code>302</code>——重定向、<code>304</code>——访问缓存。</li><li><code>4xx</code>：客户端错误。如：<code>404</code>——请求路径没有对应资源；<code>405</code>——服务器不支持客户的请求方式，没有对应的 <code>doXxx</code> 方法。</li><li><code>5xx</code>：服务器错误，表名服务器由于遇到某种错误而不能响应客户端请求。如：<code>500</code>——服务器内部出现异常</li></ul><h3 id="5-3-2-响应头"><a class="header-anchor" href="#5-3-2-响应头">¶</a>5.3.2 响应头</h3><p>响应头包含许多有用的信息。常见的响应头：</p><ul><li><code>Content-Type</code>：服务器告诉客户端，本次响应体<strong>数据格式</strong>以及<strong>编码格式</strong>。</li><li><code>Content-disposition</code>：服务器告诉客户端以什么格式打开响应体数据。有这些值：<ul><li><code>in-line</code>：默认值，在当前页面内打开。</li><li><strong><code>attachment;filename=xxx</code></strong>：以附件形式打开响应体。常用于文件下载</li></ul></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/html;charset=UTF-8 //正文类型<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>124 //正文长度<br></code></pre></td></tr></table></figure><h3 id="5-3-3-响应体（响应正文）"><a class="header-anchor" href="#5-3-3-响应体（响应正文）">¶</a>5.3.3 响应体（响应正文）</h3><p>响应正文就是服务器返回的具体数据，它是浏览器<strong>真正请求访问的信息</strong>，最常见的是 HTML 文档：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Tomcat服务器启动啦<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">H1</span>&gt;</span>Hello, World!<span class="hljs-tag">&lt;/<span class="hljs-name">H1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-4-正文部分的-MIME-类型"><a class="header-anchor" href="#5-4-正文部分的-MIME-类型">¶</a>5.4 正文部分的 MIME 类型</h2><p>如何保证接收方能看得懂发送方发送的正文数据？HTTP 协议采用 MIME 协议来规范正文的数据格式。</p><p>MIME（Multipurpose Internet Mail Extension），指<strong>多用途网络邮件拓展协议</strong>。此处的邮件不单指 E-Mail，还包括应用层协议在网络上传输的数据（如，HTTP 协议中的请求正文和响应正文，也可看做邮件），而 MIME 正是规定了邮件的标准数据格式。</p><p>遵守 MIME 协议的数据类型统称为 <strong>MIME 类型</strong>。在 HTTP 请求头及响应头中的 <code>Content-type</code> 项正是指定正文部分的 MIME 类型。</p><p>MIME 类型的格式往往是 <code>大类型/小类型</code> ，它与 <strong>文件拓展名</strong> 有一定关系。如：<code>.pdf</code> 文件拓展名，对应于 MIME 类型的 <code>application/pdf</code>；<code>.jpg</code> 、<code>jpeg</code>对应 <code>image/jpeg</code></p><h3 id="获取-MIME-类型的方法"><a class="header-anchor" href="#获取-MIME-类型的方法">¶</a>获取 MIME 类型的方法</h3><ul><li><code>String getMimeType(String file)</code>：传入参数为文件名称字符串，该方法能够通过文件名称识别并返回对应的 MIME 类型串。</li></ul><h1 id="Chapter-6-Request"><a class="header-anchor" href="#Chapter-6-Request">¶</a>Chapter 6. Request</h1><h2 id="6-1-ServletRequest-概述"><a class="header-anchor" href="#6-1-ServletRequest-概述">¶</a>6.1 ServletRequest 概述</h2><p>在 Servlet 接口的 <code>service(ServletRequest request, ServletResponse response)</code> 方法中，有一个 <code>ServletRequest</code> 类型的参数。</p><p><code>ServletRequest</code> 类表示来自<strong>客户端的请求</strong>。当 Servlet 容器接收到客户端要求访问特定的 Servlet 的请求时，容器先解析客户端的原始请求数据，把它包装成一个 <code>ServletRequest</code> 对象。当容器调用 <code>service()</code> 方法时，便将该对象作为参数传入。</p><p><code>ServletRequest</code> 接口，及其子接口 <code>HttpServletRequest</code> 接口，提供了一系列用于<strong>读取客户端请求数据</strong>的方法。我们下文姑且讨论的是 <code>HttpServletRequest</code>  接口。</p><h2 id="6-2-（常用的）获取请求消息数据的相关方法"><a class="header-anchor" href="#6-2-（常用的）获取请求消息数据的相关方法">¶</a>6.2 （常用的）获取请求消息数据的相关方法</h2><h3 id="6-2-1-获取请求行数据"><a class="header-anchor" href="#6-2-1-获取请求行数据">¶</a>6.2.1 获取请求行数据</h3><ul><li><p>获取请求方式（如 <code>GET</code>）：<code>String getMethod()</code></p></li><li><p>⭐️获取客户端所请求访问的 Web 应用的 <strong>URL 入口（即虚拟目录）</strong>： <code>String getContextPath()</code></p><blockquote><p>如客户端访问 URL 为：<code>http://localhost:8080/helloapp/info</code>，那么该方法返回 <code>&quot;/helloapp&quot;</code></p></blockquote></li><li><p>获取 HTTP 请求中的查询字符串，即 URL 中的 <code>&quot;?&quot;</code> 后面的内容：<code>String getQueryString()</code></p><blockquote><p>如客户端访问的URL为：<code>http://localhost:8080/helloapp/info?username=Tom</code>，那么该方法返回 <code>&quot;username=Tom&quot;</code></p></blockquote></li><li><p>⭐️获取请求 <strong>URI</strong>：</p><ul><li><code>String getRequestURI()</code></li><li><code>StringBuffer getRequestURL()</code></li></ul><blockquote><p>如客户端访问 URL 为：<code>http://localhost:8080/helloapp/info</code>，那么<code>getRequestURI()</code>方法返回 <code>&quot;/helloapp/info&quot;</code>。而 <code>getRequestURL()</code> 方法返回 <code>&quot;http://localhost:8080/helloapp/info&quot;</code></p></blockquote></li></ul><h3 id="6-2-2-获取请求头数据"><a class="header-anchor" href="#6-2-2-获取请求头数据">¶</a>6.2.2 获取请求头数据</h3><ul><li>⭐️通过请求头的名称获取相应的请求头的值：<code>String getHeader(String name)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/RequestDemo01&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDemo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//....</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">/* 演示获取请求头数据：user-agent */</span><br>        String agent = request.getHeader(<span class="hljs-string">&quot;user-agent&quot;</span>); <span class="hljs-comment">//传入参数不区分大小写</span><br>        <span class="hljs-comment">//判断 agent 浏览器版本</span><br>        <span class="hljs-keyword">if</span>(agent.contains(<span class="hljs-string">&quot;Chrome&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;谷歌来了!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(agent.contains(<span class="hljs-string">&quot;Firefox&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;火狐来了!&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">/* 演示获取请求头数据：referer */</span><br>        String referer = request.getHeader(<span class="hljs-string">&quot;referer&quot;</span>);<br>        <span class="hljs-keyword">if</span>(referer != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(referer.contains(<span class="hljs-string">&quot;/bilibili&quot;</span>))&#123;<br>                response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>                response.getWriter().write(<span class="hljs-string">&quot;加载视频中....&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>                response.getWriter().write(<span class="hljs-string">&quot;无法在此网站上播放视频....&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-3-获取请求参数的通用方法"><a class="header-anchor" href="#6-2-3-获取请求参数的通用方法">¶</a>6.2.3 获取请求参数的通用方法</h3><p>无论 <code>GET</code> 还是 <code>POST</code> 请求方式，都可以使用下列方法来获取请求参数。</p><ul><li>根据参数名称获取<strong>参数值</strong>：<code>String getParameter(String name)</code>  （适用于单个参数，如 <code>username=Luffy</code> ）</li><li>根据参数名称获取参数值<strong>数组</strong>：<code>String[] getParameterValues(String name)</code>（适用于“复选框”的数据，如 <code>hobby=xx&amp;hobby=gsd</code>）</li><li>获取<strong>所有</strong>请求的参数名称：<code>Enumeration&lt;String&gt; getParameterNames()</code></li><li>获取所有参数的 <code>Map</code> 集合：<code>Map&lt;String, String[]&gt; getParameterMap()</code></li></ul><p>代码演示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> top.JoyDee.LearningRequest;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-meta">@WebServlet(&quot;/RequestDemo03&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestDemo03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//POST 方式获取请求参数</span><br>        String username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;得到用户名：&quot;</span> + username);<br>        String[] tasks = request.getParameterValues(<span class="hljs-string">&quot;task&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;得到该用户的任务完成情况：&quot;</span>);<br>        <span class="hljs-keyword">for</span>(String task_e : tasks)&#123;<br>            System.out.println(task_e);<br>        &#125;<br>        <span class="hljs-comment">//获取所有请求的参数名称及相应的值</span><br>        Enumeration&lt;String&gt; parameterNames = request.getParameterNames();<br>        <span class="hljs-keyword">while</span>(parameterNames.hasMoreElements())&#123;<br>            String name = parameterNames.nextElement();<br>            String[] value = request.getParameterValues(name);<br>            System.out.println(name + <span class="hljs-string">&quot;-----&quot;</span> + value[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-comment">//获取所有参数的map集合</span><br>        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();<br>        Set&lt;String&gt; keyset = parameterMap.keySet(); <span class="hljs-comment">//遍历</span><br>        <span class="hljs-keyword">for</span>(String name : keyset)&#123;<br>            String[] values = parameterMap.get(name);<br>            System.out.println(<span class="hljs-string">&quot;该参数对应的值为:&quot;</span>);<br>            <span class="hljs-keyword">for</span>(String val : values)&#123;<br>                System.out.println(val);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;-------------&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//GET 方式获取请求参数</span><br>        <span class="hljs-keyword">this</span>.doPost(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210223162233.png" style="zoom:67%;" /><h3 id="⭐️6-2-4-中文乱码问题"><a class="header-anchor" href="#⭐️6-2-4-中文乱码问题">¶</a>⭐️6.2.4 中文乱码问题</h3><ul><li><p><code>GET</code> 方式：Tomcat 8 已将 <code>GET</code> 方式乱码问题解决了</p></li><li><p><code>POST</code> 方式：在获取其他参数前，需要设置 <code>request</code> 的编码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-3-获取-ServletContext"><a class="header-anchor" href="#6-3-获取-ServletContext">¶</a>6.3 获取 ServletContext</h2><ul><li><code>ServletContext getServletContext()</code></li></ul><h2 id="6-4-转发和共享"><a class="header-anchor" href="#6-4-转发和共享">¶</a>6.4 转发和共享</h2><p>Web 应用在响应客户端的一个请求时，有可能响应过程很复杂，<strong>需要多个 Web 组件共同协作</strong>，才能生成响应结果。</p><h3 id="6-4-1-请求转发"><a class="header-anchor" href="#6-4-1-请求转发">¶</a>6.4.1 请求转发</h3><p>请求转发，Servlet（源组件）先对客户端请求做一些预处理操作，然后把请求转发到其他 Web 组件（目标组件）来完成包括生成响应结果在内的后续操作。</p><p>特点：</p><ol><li>源组件和目标组件处理的都是<strong>同一个</strong>客户请求，故浏览器<strong>地址栏路径</strong>不发生变化。</li><li>只能转发到当前服务器<strong>内部</strong>组件中。其中，目标组件都可以为 Servlet、JSP 或 HTML 文档</li></ol><p>转发步骤：</p><ol><li><p>通过 <code>request</code> 对象获取 请求转发器 对象：<code>RequestDispatcher getRequestDispatcher(String path)</code></p><blockquote><p>注意，此处方法是来自 <code>request</code> 的，其传入参数 <code>path</code> 既可以是绝对路径（以 <code>/</code> 开头），也可以使 相对路径。</p></blockquote></li><li><p>通过 <code>RequestDispatcher</code> 对象调用此方法，来进行转发：<code>forward(ServletRequest request, ServletResponse response)</code></p></li></ol><h3 id="6-4-2-共享数据"><a class="header-anchor" href="#6-4-2-共享数据">¶</a>6.4.2 共享数据</h3><p>域对象 ：一个有作用范围的对象，可在范围内共享数据。</p><p><strong>请求范围</strong>：服务器端响应一次客户请求的过程，从 Servlet 容器接收到一个客户请求开始，到返回相应结果结束。具体实现上，请求范围与 <code>ServletRequest</code> 及 <code>ServletResponse</code> 对象的生命周期对应。</p><blockquote><p>请求范围内的<strong>共享数据</strong>可作为 <code>ServletRequest</code> 对象的属性而存在。Web 组件只要<strong>共享同一个</strong> <code>ServletRequest</code> 对象，也就能共享请求范围内的共享数据。</p></blockquote><p>相关方法：</p><ul><li>在请求范围内保存一个属性，参数 <code>name</code> 表示属性名，参数 <code>object</code> 表示属性值：<code>void setAttribute(String name, Object obj)</code></li><li>根据 <code>name</code> 参数给定的属性名，返回请求范围内的匹配的属性值：<code>Object getAttribute(String name)</code></li><li>从请求范围内删除一个属性：<code>void removeAttribute(String name)</code></li></ul><h3 id="6-4-3-举例"><a class="header-anchor" href="#6-4-3-举例">¶</a>6.4.3 举例</h3><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210225001117.png" style="zoom:67%;" /><p>如上廖雪峰老师的图，一个映射<code>/morning</code> 的 <code>ForwardServlet</code> 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//存储数据到request域中</span><br>request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Hello, another Servlet!&quot;</span>);<br><span class="hljs-comment">//转发请求</span><br>request.getRequestDispatcher(<span class="hljs-string">&quot;/hello&quot;</span>).forward(request, response);<br><span class="hljs-comment">//前面两句可以合并~</span><br></code></pre></td></tr></table></figure><p><code>ForwardServlet</code> 收到请求后，它并不发送响应，而是将请求和响应转发给另一个映射为为<code>/hello</code>的 <code>HelloServlet</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取数据</span><br>Object msg = request.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="⭐️6-5-用户登录案例"><a class="header-anchor" href="#⭐️6-5-用户登录案例">¶</a>⭐️6.5 用户登录案例</h2><p>源码及相关导包可到我的仓库查看：<a href="https://github.com/J-StrawHat/LoginProject">https://github.com/J-StrawHat/LoginProject</a></p><h3 id="任务需求"><a class="header-anchor" href="#任务需求">¶</a>任务需求</h3><ol><li>编写 <code>login.html</code> 登录页面，包含两个用户输入框：<code>username</code> 与 <code>passwo；rd</code>。</li><li>登录页面中，如果用户：<ul><li>登录成功，则跳转到 <code>SuccessServlet</code> ，页面展示为：登录成功！<code>用户名</code>，欢迎您！</li><li>登录失败，则跳转到 <code>FailServlet</code> ，页面展示为：登录失败，用户名或密码错误</li></ul></li><li>使用 Druid <strong>数据库连接池</strong>技术，操作 MySQL中已经创建好的 <code>userlist</code> 表；</li><li>使用 <strong>JdbcTemplate 技术</strong>封装 JDBC；</li></ol><h3 id="页面效果"><a class="header-anchor" href="#页面效果">¶</a>页面效果</h3><p>用户输入<strong>已注册好</strong>的信息：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210223222436.png"/><p>登录成功：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210223222448.png"/><p>登录失败：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210223222508.png"/><h3 id="环境配置"><a class="header-anchor" href="#环境配置">¶</a>环境配置</h3><ul><li>Java EE version：Java EE 7</li><li>Tomcat：8.5.63</li><li>Servlet：3.1</li><li>MySQL：5.7.30</li></ul><h3 id="附加"><a class="header-anchor" href="#附加">¶</a>附加</h3><p>一、预先设计好的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br><br><span class="hljs-keyword">CREATE</span> DATABASE mydb;<br>USE mydb;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> userlist(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>PASSWORD <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br><br><span class="hljs-keyword">DESC</span> userlist;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> userlist <span class="hljs-keyword">VALUES</span>(<span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;Luffy&#x27;</span>, <span class="hljs-string">&#x27;66666&#x27;</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> userlist;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210223182146.png"/><p>并增加一条数据：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210223182409.png"/><p>二、源代码中使用了 BeanUtils 简化封装 JavaBean</p><p>在 <code>src\top\JoyDee\web\servlet\LoginServlet.java</code> 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2. 获取所有请求参数</span><br>Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();<br><span class="hljs-comment">//3.1 创建 User 对象</span><br>User loginUser = <span class="hljs-keyword">new</span> User();<br><span class="hljs-comment">//3.2 使用 BeanUtils 封装</span><br><span class="hljs-keyword">try</span> &#123;<br>    BeanUtils.populate(loginUser, parameterMap);<br>&#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Chapter-7-Response"><a class="header-anchor" href="#Chapter-7-Response">¶</a>Chapter 7. Response</h1><p>在 Servlet 接口的 <code>service(ServletRequest request, ServletResponse response)</code> 方法中，另一个参数是 <code>ServletResponse</code> 类型的。</p><p>当 Servlet 容器接收到客户端要求访问特定 Servlet 的请求时，容器会创建一个 <code>ServletResponse</code> 对象，并把它作为参数传给 Servlet 的 <code>service()</code> 方法。Servlet 通过 <code>ServletResponse</code>  对象来<strong>生成响应结果</strong>。</p><p>在 <code>ServletResponse</code> 接口 及其子接口 <code>HttpServletResponse</code> ，定义了一系列与设置响应结果相关的方法。</p><h2 id="7-1-（常用）设置响应结果相关的方法"><a class="header-anchor" href="#7-1-（常用）设置响应结果相关的方法">¶</a>7.1 （常用）设置响应结果相关的方法</h2><ul><li><p>设置状态码：<code>setStatus(int sc)</code></p></li><li><p>设置响应头：<code>setHeader(String name, String value)</code></p></li><li><p>设置响应体，步骤如下：</p><ol><li><p>获取输出流：</p><p>字符输出流：<code>PrintWriter getWriter()</code></p><p>字节输出流：<code>ServletOutputStream getOutputStream()</code></p></li><li><p>使用输出流，将数据输出到客户端浏览器</p></li></ol><blockquote><p>在 Tomcat 实现中，若 Servlet 的 <code>service()</code> 方法没有调用上述的输出流<code>PrintWriter</code> 或 <code>ServletOutputStream</code> 的 <code>close()</code> 方法，那么 Tomcat 在调用完 Servlet 的 <code>service()</code> 方法后，<strong>会关闭上述的输出流</strong>，以确保 Servlet 输出的所有数据被提交给客户。</p></blockquote></li></ul><h3 id="中文乱码问题"><a class="header-anchor" href="#中文乱码问题">¶</a>中文乱码问题</h3><p>由于 <code>response</code> 及其相关方法来自 Tomcat ，故字符默认编码为 ISO-8859-1，在使用输出流将数据输出到浏览器时，有可能导致输出的中文乱码。</p><p>故，在获取（无论字节还是字符）输出流<strong>之前</strong>，需要设置响应体数据的编码，其方法浓缩为一条语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br></code></pre></td></tr></table></figure><p>举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/ResponseDemo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//0. 获取流对象之前，将流的默认编码：ISO-8859-1 更改为: utf-8</span><br>        <span class="hljs-comment">//response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><br>        <span class="hljs-comment">//同时，要告诉【浏览器】，服务器发送的消息体数据的编码。建议浏览器去使用开发人员制定的编码进行解码。</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br><br>        <span class="hljs-comment">//1. 获取字符输出流</span><br>        PrintWriter pw = response.getWriter();<br>        <span class="hljs-comment">//2. 输出数据</span><br>        pw.write(<span class="hljs-string">&quot;&lt;h1&gt;你好, Response!&lt;/h1&gt;&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210224175730.png"/><h2 id="7-2-重定向"><a class="header-anchor" href="#7-2-重定向">¶</a>7.2 重定向</h2><p>HTTP 协议规定重定向机制，其运作流程如下：</p><ol><li>用户再浏览器输入特定 URL，请求访问服务器端的某个组件</li><li>服务器端的组件返回一个<strong>状态代码为 <code>302</code></strong> 的响应结果（即表明，让浏览器端再请求访问另一个 Web 组件），同时响应结果中还<strong>提供了另一 Wen 组件的 URL</strong>（这另一组件有可能是同一 Web 服务器，也有可能不在同一个 Web 服务器上）</li><li>当浏览器端接收到这种响应结果后，再立即<strong>自动请求</strong>访问另一个 Web 组件。</li><li>浏览器端接收到来自另一 Web 组件的响应结果。</li></ol><p>如下图所示：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210225114927.png" style="zoom:67%;" /><p><code>HttpServletResponse</code> 接口有一方法便是用于实现重定向：</p><ul><li><code>sendRedirect(String location)</code></li></ul><h3 id="⭐️重定向与转发的区别"><a class="header-anchor" href="#⭐️重定向与转发的区别">¶</a>⭐️重定向与转发的区别</h3><blockquote><p>注意，重定向和请求转发之后的代码<strong>都会运行</strong>，直到<strong>方法结束或者遇到了return语句</strong></p></blockquote><table><thead><tr><th style="text-align:center">转发（<code>forward</code>）</th><th style="text-align:center">重定向（<code>redirect</code>）</th></tr></thead><tbody><tr><td style="text-align:center">浏览器地址栏不变</td><td style="text-align:center">浏览器地址栏发生变化</td></tr><tr><td style="text-align:center">只能访问当前服务器下的资源</td><td style="text-align:center">可访问其他站点（服务器）资源</td></tr><tr><td style="text-align:center">一次请求，可使用<br><code>request</code>对象共享数据</td><td style="text-align:center">两次请求，<strong>无法共享</strong></td></tr></tbody></table><blockquote><p>可理解为，你有一个问题问老师，转发：老师不会，她去问了另一老师，然后再给你解答；重定向：老师说我不会，你去问另一老师。</p></blockquote><p>【2021/3/16 更新】在学习 SSM 框架时，又对重定向有新的理解。重定向是为了防止多次刷新增加服务器压力，防止恶意请求攻击的，不是为了传参的（若需要传参，则相应的 JSP 页面需使用 <code>$&#123;param&#125;</code>）。<code>WEB-INF</code> 目录是受到保护的，不能被外部直接访问到，只能被服务器内部访问到。</p><p>代码写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">request.getRequestDispatcher(<span class="hljs-string">&quot;xxx&quot;</span>).forward(request, response); <span class="hljs-comment">//转发</span><br>response.sendRedirect(<span class="hljs-string">&quot;xxxx&quot;</span>); <span class="hljs-comment">//重定向</span><br></code></pre></td></tr></table></figure><p>选择重定向作为页面跳转的理由之一：（引用自<a href="https://zhuanlan.zhihu.com/p/40114605">dubx的文章</a>）</p><blockquote><p>假如开发者在 Servlet 中做了耗时间的查询数据库操作，然后放到 Session 里面去，让目标页面拿 Session 显示给用户。</p><p>此时若使用转发，那么在刷新这个页面的时候，该 Servlet 又会被请求一遍，也就说把“查询数据库-&gt;设置 Session ”这个步骤再做一遍，而实际上是毫无意义的。</p><p>重定向则不会有问题，由于重定向之后的是一个 JSP 页面，刷新页面无非是让页面重新加载一次罢了。</p></blockquote><blockquote></blockquote><h2 id="⭐️关于路径"><a class="header-anchor" href="#⭐️关于路径">¶</a>⭐️关于路径</h2><h3 id="路径分类"><a class="header-anchor" href="#路径分类">¶</a>路径分类</h3><p>（一）相对路径：不以 <code>/</code> 开头，而是以 <code>.</code> 开头。如：<code>./index.html</code></p><p>规则：需要找到当前资源和目标资源之间的相对位置关系。</p><ul><li><code>./</code>：为当前目录，其中⭐️ <strong><code>./</code> 可以省略不写</strong></li><li><code>../</code>：后退一级目录</li></ul><p>（二）绝对路径：以 <code>/</code> 开头的路径，如：<code>http://localhost/day15/responseDemo2</code>  简写为 <code>/day15/responseDemo2</code></p><p>规则：判定请求从哪里发出</p><ul><li><p>若给客户端浏览器使用：需要加上 虚拟目录（项目的<strong>入口</strong>的映射路径），如：<code>&lt;a&gt;</code>、<code>&lt;form&gt;</code> 重定向 等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;/day15/responseDemo&quot;</span>&gt;</span>前往登陆<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!--浏览器点击（说明请求来自于客户端浏览器）--&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.sendRedirect(<span class="hljs-string">&quot;/day15/responseDemo&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>给服务器使用：无需加 虚拟目录，如 转发路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">request.getRequestDispatcher(<span class="hljs-string">&quot;/responseDemo2&quot;</span>).forward(request, response);<br></code></pre></td></tr></table></figure></li></ul><h3 id="动态获取虚拟目录"><a class="header-anchor" href="#动态获取虚拟目录">¶</a>动态获取虚拟目录</h3><p>如上的绝对路径中，若将项目中的代码将虚拟目录“写死”了，改动较大。为解决该问题，可调用 <strong><code>request</code></strong> 的方法获取动态的虚拟目录字符串：</p><ul><li><p><code>getContextPath()</code>：（Request 章节中有提及）返回客户端所请求访问的 Web 应用的 URL 入口。</p><blockquote><p>如客户端访问 URL 为：<code>http://localhost:8080/helloapp/info</code>，那么该方法返回 <code>&quot;/helloapp&quot;</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String contextPath = request.getContextPath(); <span class="hljs-comment">//注意是从 request 获取</span><br>response.sendRedirect(contextPath + <span class="hljs-string">&quot;/responseDemo2&quot;</span>); <span class="hljs-comment">//调用的 response 的重定向方法</span><br></code></pre></td></tr></table></figure></li><li><p>在 HTML 页面中，利用 EL 表达式：<code>$&#123;pageContext.request.contextPath&#125;</code>，同样能够取得这个 URL 入口：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/some.do&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br><span class="hljs-comment">&lt;!--相当于拼接上你的项目地址--&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>另外， <code>ServletContext</code> 的 <code>getRealPath(String path)</code> 方法是，根据虚拟路径，返回文件系统中的一个真实路径</p><h2 id="7-3-文件下载案例"><a class="header-anchor" href="#7-3-文件下载案例">¶</a>7.3 文件下载案例</h2><h3 id="需求"><a class="header-anchor" href="#需求">¶</a>需求</h3><ol><li>页面显示超链接</li><li>点击超链接后<strong>弹出下载提示框</strong></li><li>完成图片文件下载</li></ol><h3 id="步骤："><a class="header-anchor" href="#步骤：">¶</a>步骤：</h3><ol><li>定义 <code>download.html</code> 页面，编辑超链接元素的 <code>href</code> 属性，<strong>指向 <code>Servlet</code></strong>，<strong>传递资源名称</strong> <code>filename</code></li><li>定义 <code>Servlet</code>：<ul><li>获取传递的参数，即文件名称</li><li>使用<strong>字节输入流</strong>加载文件进内存</li><li>指定 <code>response </code> <strong>响应头</strong>：<ul><li><code>content-type=文件的MIME类型</code></li><li><code>content-disposition:attachment;filename=文件名</code></li></ul></li><li>将数据写出到 <code>response </code> 的输出流</li></ul></li></ol><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210225133525.png"/><p><code>download.html</code> 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Download Here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;/MyEEP/imgs/a.jpg&quot;</span>&gt;</span>图片预览<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;/MyEEP/DownloadServlet?filename=a.jpg&quot;</span>&gt;</span>下载图片<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>DownloadServlet.java</code> 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> top.JoyDee.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/DownloadServlet&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DownloadServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//1. 获取请求参数，文件名称</span><br>        String filename = request.getParameter(<span class="hljs-string">&quot;filename&quot;</span>);<br>        <span class="hljs-comment">//2. 使用字节输入流加载文件进内存</span><br>        <span class="hljs-comment">//2.1 找到文件服务器路径</span><br>        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();<br>        String realPath = servletContext.getRealPath(<span class="hljs-string">&quot;/imgs/&quot;</span>+filename);<br>        <span class="hljs-comment">//2.2 用字节输入流将服务器中的文件进行关联</span><br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(realPath);<br><br>        <span class="hljs-comment">//3. 设置response的响应头</span><br>        <span class="hljs-comment">//3.1 设置响应头类型：content-type，从而指定下载文件的类型</span><br>        String mimeType = servletContext.getMimeType(filename);<br>        response.setHeader(<span class="hljs-string">&quot;content-type&quot;</span>, mimeType);<br>        <span class="hljs-comment">//3.2 设置响应头打开方式：content-disposition</span><br>        response.setHeader(<span class="hljs-string">&quot;content-disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + filename);<br><br>        <span class="hljs-comment">//4. 将输入流的数据写出到输出流中</span><br>        ServletOutputStream sos = response.getOutputStream();<br>        <span class="hljs-keyword">byte</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">8</span>];<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>((len = fis.read(buff)) != -<span class="hljs-number">1</span>)&#123; <span class="hljs-comment">//读入一个字节数组，返回实际读入的字节数</span><br>            sos.write(buff, <span class="hljs-number">0</span>, len); <span class="hljs-comment">//写出知道了长度为len的字节数组（从0开始）</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">this</span>.doPost(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chapter-5-HTTP&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chapter-5-HTTP&quot;&gt;¶&lt;/a&gt;Chapter 5. HTTP&lt;/h1&gt;
&lt;h2 id=&quot;5-1-HTTP-概述&quot;&gt;&lt;a class=&quot;header-anch</summary>
      
    
    
    
    <category term="Java" scheme="https://j-strawhat.github.io/categories/Java/"/>
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/categories/Java/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/tags/JavaWeb/"/>
    
    <category term="HTTP" scheme="https://j-strawhat.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>「JavaWeb学习笔记03」Tomcat使用与Servlet基础</title>
    <link href="https://j-strawhat.github.io/posts/3fbfdb1e/"/>
    <id>https://j-strawhat.github.io/posts/3fbfdb1e/</id>
    <published>2021-02-20T05:03:00.000Z</published>
    <updated>2021-07-20T10:02:13.905Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Web</strong> 是一种分布式应用架构，旨在共享发布在网络上的各个Web服务器中的所有互相链接的信息。<strong>WWW（World Wide Web）</strong>  是指全球范围内的 Web，它以 <strong>Internet</strong> 为网络平台。</p><p>Internet 是来自世界各地的众多相互连接的计算机和其他设备的集合，而 WWW 则是 Internet 上的一种分布式应用架构。</p><p>《Tomcat 与 Java Web 开发技术详解（第2版）》讲述，为了能让 Web 服务器与 Web 应用这两个不同的软件系统协作，首先应该由一个中介方制订 Web 应用与 Web 服务器进行协作的标准接口，而Servlet 就是其中最主要的一个接口。中介方规定：</p><ul><li>Web 服务器，可访问任意一个 Web 应用中实现的 Servlet 接口的类</li><li>Web 应用中用于被 Web 服务器动态调用的程序代码位于 Servlet 接口的实现类中。</li></ul><p>而 SUN 公司，把一系列标准 Java 接口和规约，统称为<strong>Servlet 规范</strong>。它把能够发布和运行 JavaWeb 应用的 Web 服务器，统称为 <strong>Servlet 容器</strong>（最主要特征，是动态执行 JavaWeb 应用中的 Servlet 实现类中的程序代码）。由 Apache 开源软件组织创建的 <strong>Tomcat</strong> 是一个符合 Servlet 规范的优秀 Servlet 容器。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210222194738.png"/><h1 id="Chapter-3-Tomcat-服务器的安装与配置"><a class="header-anchor" href="#Chapter-3-Tomcat-服务器的安装与配置">¶</a>Chapter 3. Tomcat 服务器的安装与配置</h1><h2 id="3-1-Web-服务器软件概述"><a class="header-anchor" href="#3-1-Web-服务器软件概述">¶</a>3.1 Web 服务器软件概述</h2><ul><li><p>服务器：安装了服务器软件的计算机。</p></li><li><p>服务器软件：接收用户的请求，处理请求，做出响应。</p><blockquote><p>在 Web 服务器软件中，可以部署 Web 项目，让用户通过<strong>浏览器</strong>来访问这些项目</p></blockquote></li></ul><p>常见的 Java EE 的 Web 服务器软件：</p><blockquote><p>JavaEE：Java 语言在企业级开发中使用的技术规范的总和，一共规定了 13 项大的规范。</p></blockquote><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Tomcat</th><th style="text-align:center">webLogic</th><th style="text-align:center">webSphere</th><th style="text-align:center">JBOSS</th></tr></thead><tbody><tr><td style="text-align:center">所属组织</td><td style="text-align:center">Apache 基金组织</td><td style="text-align:center">oracle 公司</td><td style="text-align:center">IBM 公司</td><td style="text-align:center">JBOSS 公司</td></tr><tr><td style="text-align:center">规模</td><td style="text-align:center">中小型 JavaEE 服务器</td><td style="text-align:center">大型 JavaEE 服务器</td><td style="text-align:center">大型 JavaEE 服务器</td><td style="text-align:center">大型 JavaEE 服务器</td></tr><tr><td style="text-align:center">规范</td><td style="text-align:center">支持少量的 JavaEE 规范<br>如：Servlet / JSP</td><td style="text-align:center">支持所有的 JavaEE 规范</td><td style="text-align:center">支持所有的 JavaEE 规范</td><td style="text-align:center">支持所有的 JavaEE 规范</td></tr><tr><td style="text-align:center">费用</td><td style="text-align:center">免费开源</td><td style="text-align:center">收费</td><td style="text-align:center">收费</td><td style="text-align:center">收费</td></tr></tbody></table><h2 id="3-2-Tomcat-的下载安装与写作"><a class="header-anchor" href="#3-2-Tomcat-的下载安装与写作">¶</a>3.2 Tomcat 的下载安装与写作</h2><h3 id="下载"><a class="header-anchor" href="#下载">¶</a>下载</h3><p>笔者下载的版本为：8.5.63，官网链接为：<a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a>，下载 Core 版（压缩包）即可</p><h3 id="安装"><a class="header-anchor" href="#安装">¶</a>安装</h3><p>将压缩包解压到自定义的目录（建议不要有中文和空格）即可。</p><p>解压后的 Tomcat 文件<strong>目录结构</strong>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">apache-tomcat-8.5.63/<br>├── bin/              # 存放可执行(脚本)文件，启动需从该目录下找到启动文件<br>│   ├── ...<br>│   ├── startup.bat   # &lt;------ Windows 启动文件<br>│   └── startup.sh    # &lt;------ Linux 启动文件<br>│<br>├── conf/             # 配置文件<br>├── lib/              # 依赖jar包<br>├── logs/             # 日志文件夹，用于监控或调试文件<br>├── temp/             # 临时文件夹<br>├── webapps/          # 重要：要在Tomcat上发布的JavaWeb应用文件（项目）<br>│   ├── docs/<br>│   ├── examples/     # Tomcat 内置项目<br>│   ├── ...<br>│   └── 用户创建的项目<br>│ <br>├── work/             # Tomcat的工作目录，存放运行时的数据<br>├── ...<br></code></pre></td></tr></table></figure><h3 id="卸载"><a class="header-anchor" href="#卸载">¶</a>卸载</h3><p>直接删除之前的目录即可，方便快捷。</p><h2 id="3-3-纯-Tomcat-的启动与关闭"><a class="header-anchor" href="#3-3-纯-Tomcat-的启动与关闭">¶</a>3.3 纯 Tomcat 的启动与关闭</h2><h3 id="启动"><a class="header-anchor" href="#启动">¶</a>启动</h3><p>双击运行 <code>Tomcat安装目录\bin\startup.bat</code> ，此时会弹出黑窗口</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210222151941.png" style="zoom:67%;" /><p>运行着bat文件，访问需用浏览器输入地址：</p><ul><li>访问自己的项目：<code>http://localhost:8080</code></li><li>访问别人的项目：<code>http://别人的ip:8080</code></li></ul><p>回车便能够看到如下网页：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210220223140.png" style="zoom:80%;" /><h4 id="启动遇到的问题："><a class="header-anchor" href="#启动遇到的问题：">¶</a>启动遇到的问题：</h4><ol><li><p>黑窗口一闪而过：</p><p>原因：可以去 <code>Tomcat安装目录\logs</code> 下查看报错信息，一般来说，是没有正确配置 <code>JAVA_HOME </code> 环境变量（请查阅 JavaSE学习笔记01 ）</p></li><li><p>端口占用问题：</p><p>暴力：在 CMD 窗口 敲下命令：<code>netstat -ano</code>。找到占用的端口号，并找到其对应的进程 ID，启动任务管理器，查看选择列（PID），杀死该进程。</p><p>温柔（不建议）：在 <code>Tomcat安装目录\conf\servel.xml</code>修改自身的端口号：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;端口号&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span> <span class="hljs-attr">connectionTimeout</span>=<span class="hljs-string">&quot;20000&quot;</span> <span class="hljs-attr">redirectPort</span>=<span class="hljs-string">&quot;8445&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>一般会将 Tomcat 的默认端口号修改为 80 。 80 端口号是 HTTP 协议的默认端口号。</p></blockquote></li></ol><h3 id="关闭"><a class="header-anchor" href="#关闭">¶</a>关闭</h3><p>正常关闭，是点击 <code>Tomcat安装目录\bin\shutdown.bat</code> 或者 在黑窗口敲下快捷键 <kbd>Ctrl+C</kbd></p><p>强制关闭，可以点击黑窗口的叉</p><h2 id="3-4-项目的部署"><a class="header-anchor" href="#3-4-项目的部署">¶</a>3.4 项目的部署</h2><ol><li><p>直接将项目放到 <code>Tomcat安装目录\webapps</code> 目录下，以后要运行查看项目时，在浏览器输入地址：<code>localhost:端口号/虚拟目录/资源文件名</code></p><blockquote><p>可以将 项目打包成 war 包，再将 war 包 放置到 webapps 目录下。（拷贝到 webapps目录后，war 包会自动地解压缩。</p></blockquote></li><li><p>在 <code>Tomcat安装目录\conf\Catalina\localhost\</code> 创建任意名称的 XML 文件，在文件中编写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">docBase</span> = <span class="hljs-string">&quot;项目的本地地址&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时，虚拟目录，即为 XML 文件的名称。浏览器访问的地址则为：<code>localhost:端口号/xml文件名称/项目文件</code></p></li><li><p>将 Tomcat 集成到 IDEA 中：创建 Java EE 的项目，然后点击 IDEA 上方的 Run - Edit Configurations：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210221000335651.png"/><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210221000519687.png"/><p>最后要点击 应用、确定</p></li></ol><h2 id="3-5-IDEA-与-Tomcat-的相关配置"><a class="header-anchor" href="#3-5-IDEA-与-Tomcat-的相关配置">¶</a>3.5 IDEA 与 Tomcat 的相关配置</h2><ol><li><p>IDEA 会为每一个 由Tomcat部署 的项目单独地建立一份配置文件。</p><p>可通过控制台的 log  查看项目的 Tomcat 配置的根目录：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210221205343912.png"/><blockquote><p><code>Using CATALINA_BASE:   &quot;C:\Users\luffy\.IntelliJIdea2019.3\system\tomcat\_LearningJavaWeb&quot;</code></p></blockquote><p>打开该目录后，进入 <code>conf</code> 文件夹便能看到 xml 配置文件</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210221205809931.png"/></li><li><p>关于 IDEA 工作空间项目 与 Tomcat 部署的 Web 项目</p><p>Tomcat 真正访问的是“ Tomcat 部署的 Web 项目”（其路径，类似于 <code>E:\LearningJavaWeb\out\artifacts\MyEEProjects_war_exploded</code>），&quot;Tomcat 部署的 Web 项目” 也同时对应着 IDEA 工作空间项目 的 <code>Web</code> 目录下所有资源。而 IDEA 工作空间项目的 <code>Web\WEB-INF</code>  的资源不能通过启动服务后被浏览器直接访问。</p><p>因此，不要将你的静态资源，放到 IDEA 工作空间项目的 <code>Web\WEB-INF</code> 目录下。</p></li><li><p>关于断点调试</p><p>在某行代码打上断点后，使用“小虫子”启动 Debug模式。</p></li></ol><h1 id="Chapter-4-Servlet-基础"><a class="header-anchor" href="#Chapter-4-Servlet-基础">¶</a>Chapter 4. Servlet 基础</h1><h2 id="4-1-Servlet-概述"><a class="header-anchor" href="#4-1-Servlet-概述">¶</a>4.1 Servlet 概述</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210222163650.png"/><blockquote><p>Servlet defines methods that all servlets must implement.</p><p>A servlet is a small Java program that runs within a Web server</p></blockquote><p>实际上，Servlet 就是一个接口，定义了 Java 类能够被浏览器访问到（Tomcat 服务器识别到）的规则。我们需要自定义一个类，实现 Servlet 接口，覆写方法。</p><p>而 Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><h3 id="Servlet-任务"><a class="header-anchor" href="#Servlet-任务">¶</a>Servlet 任务</h3><ul><li>读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。</li><li>读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。</li><li>处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。</li><li>发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。</li><li>发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。</li></ul><h2 id="4-2-快速入门"><a class="header-anchor" href="#4-2-快速入门">¶</a>4.2 快速入门</h2><h3 id="一、新建-Java-EE-项目："><a class="header-anchor" href="#一、新建-Java-EE-项目：">¶</a>一、新建 Java EE 项目：</h3><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210221000848477.png"/><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210221001103934.png"/><p>目录与项目名称创建后，点击 IDEA 上方的 Run - Edit Configurations ，再点击 Tomcat Server - Deployment ，可观察到，我们新建的项目显示为 “… war exploded”，同时下方的虚拟路径也已经配好了。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210221002022148.png"/><h3 id="二、在-src-目录下定义一个类，实现-Servlet-接口："><a class="header-anchor" href="#二、在-src-目录下定义一个类，实现-Servlet-接口：">¶</a>二、在 src 目录下定义一个类，实现 Servlet 接口：</h3><blockquote><p>src 目录，是在 开发 JavaWeb 应用阶段，开发人员自定义的目录，该目录存放<strong>所有 Java 类的源文件</strong>。当 Web 应用产品正式发布阶段，若不希望对外公开 Java 源代码，则可将 src 目录转移至其他地方。</p><p>注意， src目录下的文件，在部署时，会自动地放到**<code>/web/WEB-INF/classes</code>** 。</p><p>另外，<strong>类加载器</strong>只能获取 src 目录下的文件路径。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo01</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span> </span>&#123;<br><br>    <span class="hljs-comment">//初始化方法，在Servlet被创建时，执行。且只执行一次</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;init....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//获取ServletConfig对象(Servlet的配置对象)</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title">getServletConfig</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//提供服务的方法，每一次Servlet被访问时，执行。且可以执行多次</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, Servlet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//获取Servlet的一些信息，版本，作者等</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//销毁方法，在服务器正常关闭时，执行。且只执行一次。</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>TIPS：当写完 <code>implements Servlet</code> 时，观察到下方红线，按下快捷键<kbd>Alt+Enter</kbd> ，IDEA 就能帮你生成下列需覆写的方法。</p></blockquote><h3 id="三、配置-Servlet"><a class="header-anchor" href="#三、配置-Servlet">¶</a>三、配置 Servlet</h3><p>在 <code>web\WEB-INF</code> 目录下的 web.xml 文档中配置：</p><blockquote><p>web.xml 文档，由开发人员编写，供 Servlet 容器访问。web.xml 文件也称为 JavaWeb 应用的发布描述符文件，Servlet 容器在加载和启动 JavaWeb 应用时会读取它的 web.xml 文件，从中获取当前 Web 应用的发布信息。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.1&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--所有关于JavaWeb应用的具体配置元素都将加入到 &lt;web-app&gt; 元素中。--&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 配置Servlet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>Demo01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span> <span class="hljs-comment">&lt;!--定义Servlet的名字--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>top.JoyDee.servlet.ServletDemo01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span> <span class="hljs-comment">&lt;!--它指定Servlet的完整类名，包括包的名字--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>Demo01<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span> <span class="hljs-comment">&lt;!--指定【带映射】的Servlet的名字--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/demo1<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span> <span class="hljs-comment">&lt;!-- 该元素指定访问 Servlet 的相对URL路径，记得要以 &quot;/&quot; 开头 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在 <code>&lt;servlet&gt;</code> 元素中，可以加入 <code>&lt;load-on-startup&gt;</code> 元素，它指定当 Servlet 容器启动 Web 应用时，加载各个 Servlet 的次序。若值为<strong>正数或零</strong>，Servlet 容器优先加载数值小的 Servlet；若值为负数或没有设定，Servlet 容器将在 <strong>客户端首次访问</strong> 这个 Servlet 时加载它。</p></blockquote><h3 id="五、启动-Tomcat-服务器"><a class="header-anchor" href="#五、启动-Tomcat-服务器">¶</a>五、启动 Tomcat 服务器</h3><p>点击IDEA右上方的绿色三角形运行，一会后浏览器会弹出一个 Web 应用的入口网页（其URL 是 Web 应用的根目录名）</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210221002257471.png"/><blockquote><p><code>index.jsp</code> 就是默认的首页，对于Servlet 3.0，可以不勾选 <code>Create web.xml</code></p></blockquote><h3 id="六、访问-Servlet"><a class="header-anchor" href="#六、访问-Servlet">¶</a>六、访问 Servlet</h3><p>接着，在地址栏输入 URL 来请求访问 刚刚编写的 <code>ServletDemo01</code>，URL为： <code>localhost:端口号/虚拟路径（一般为根目录名称）/刚刚填写的url-pattern</code></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210221005803378.png"/><blockquote><p>热部署：若希望文件发生更改后，无需关闭服务器再重新开启，可以设置如下：</p><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210221002720406.png" alt="image-20210221002720406"></p></blockquote><p>整个流程即为：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210222203830443.png" style="zoom:80%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210222204003.png" style="zoom:80%;" /><h3 id="关于-Servlet-3-0"><a class="header-anchor" href="#关于-Servlet-3-0">¶</a>关于 Servlet 3.0</h3><p>该版本的 Servlet ，支持<strong>注解</strong>配置，无需用 web.xml 配置了。</p><p>步骤：</p><ol><li><p>创建 JavaEE项目，选择 Servlet 版本 3.0 以上（JavaEE 6开始支持），可以不勾选创建 web.xml</p></li><li><p>定义一个类，实现 Servlet 接口</p></li><li><p>覆写方法</p></li><li><p>在类上使用注解<code>@WebServlet(&quot;Servlet的访问路径&quot;)</code>，进行配置</p><blockquote><p>一个 Servlet 可以定义多个访问路径，如：<code>@WebServlet(&#123;&quot;/d4&quot;, &quot;/dd4&quot;, &quot;/ddd4&quot;&#125;)</code>。</p><p>其路径定义规则：</p><ol><li><code>/xxx</code>（推荐）：路径匹配</li><li><code>/xxx/xxx</code>：多层路径，目录结构，还能写成 <code>/user/*</code> （其中，<code>*</code> 为通配符，优先级较低）</li><li><code>*.do</code>：拓展名匹配，浏览器访问时要像这样输入 URL：<code>.../demo.do</code></li></ol></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/heeeeey&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletDemo02</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title">getServletConfig</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是Servlet3.0!!!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-JavaWeb应用的生命周期"><a class="header-anchor" href="#4-2-JavaWeb应用的生命周期">¶</a>4.2 JavaWeb应用的生命周期</h2><p><strong>JavaWeb 应用</strong>的生命周期，是由 Servlet 容器（Tomcat）来控制的，它包括三个阶段：</p><ul><li><p><strong>启动阶段</strong>：</p><ol><li>把 web.xml 文件中的数据加载到内存中；</li><li>为 JavaWeb 应用创建一个 Servlet 上下文对象（ServletContext，Setvlet 通过该对象来访问容器为当前 Web 应用）</li><li>对所有的 Filter 进行初始化（暂不在这讨论）</li><li>对那些需在 Web 应用启动时就被初始化的 Servlet 进行初始化（具体见下节）。</li></ol></li><li><p><strong>运行时阶段</strong>：</p><p>所有 Servlet 都处于待命状态，随时可以响应客户端的特定请求，提供相应的服务。</p><p>如客户端请求的 Servlet 还不存在，Servlet 容器会先初始化 Setvlet，然后再<strong>调用它的 <code>service()</code> 服务方法</strong></p></li><li><p><strong>终止阶段</strong>：</p><ol><li>销毁 JavaWeb 应用中所有处于运行时状态的 Servlet</li><li>销毁 JavaWeb 应用中所有处于运行时状态的 Filter</li><li>销毁所有与 JavaWeb 应用相关的对象，如 ServletContext 对象等，并且释放 Web 应用所占用的相关资源。</li></ol></li></ul><h2 id="4-3-Servlet-的生命周期"><a class="header-anchor" href="#4-3-Servlet-的生命周期">¶</a>4.3 Servlet 的生命周期</h2><p>Servlet 作为 JavaWeb 应用的最核心组件，其生命周期，同样由 Servlet 容器来控制，它包括三个阶段：</p><ul><li><p><strong>初始化阶段</strong>：（<code>init()</code>）</p><blockquote><p>下列情况之一，Servlet 才会进入初始化阶段：</p><ol><li>当前 Web 应用处于运行时阶段，特定 Servlet 被<strong>客户端首次请求访问</strong>。（多数情况）</li><li>若在 web.xml 文件中为一个 Servlet 设置 <code>&lt;load-on-startup&gt;</code> 元素，则当 <strong>Servlet 容器启动</strong> Servlet 所属 Web 应用时，就会初始化这个 Servlet。</li><li>当 Web 应用被重新启动时，Web 应用中所有 Servlet 都会在特定时刻被重新初始化</li></ol></blockquote><ol><li><p>Servlet 容器<strong>加载</strong> Servlet 类，将它的 <code>.class</code> 文件中数据读入内存中；</p></li><li><p>Servlet 容器创建 ServletConfig 对象（它包含了特定 Servlet 的初始化配置信息）。此外，Servlet 容器还会使得 ServletConfig 对象与当前 Web 应用的 ServletContext 对象进行关联。</p></li><li><p>Servlet 容器<strong>创建</strong> Servlet 对象</p></li><li><p>Servlet 容器 调用 Servlet 对象的**<code>init(ServletConfig config)</code> 方法**，同时 ServletConfig 对象与 Servlet 对象进行关联。</p></li></ol></li><li><p><strong>运行时阶段</strong>：（<code>service()</code>）</p><p>Servlet 可随时响应客户端的请求。当 Servlet <strong>容器</strong> 接收到要求访问特定 Servlet 的客户请求时，Servlet 容器会创建针对于该请求的 <strong>ServletRequest 对象和 ServletResponse 对象</strong>，然后调用相应 Servlet 对象的 <strong><code>service()</code> 方法</strong>。</p><p><code>service()</code> 方法，从 ServletRequest 对象中获得客户请求信息并处理该请求，再通过 ServletResponse 对象生成相应结果。</p><p>当Servlet 容器把 Servlet 生成的响应结果发送到客户时，Servlet 容器便销毁 ServletRequest 对象和 ServletResponse 对象。</p></li><li><p><strong>销毁阶段</strong>：（<code>destroy()</code>）</p><p>当 Web 应用被终止时，Servlet 容器会先调用 Web 应用中所有 Servlet 对象的**<code>destroy()</code> 方法**，释放 Servlet 所占用的资源。然后再销毁这些 Servlet 对象及与之关联的 ServletConfig 对象。</p></li></ul><h2 id="4-4-Servlet-体系结构"><a class="header-anchor" href="#4-4-Servlet-体系结构">¶</a>4.4 Servlet 体系结构</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210223001931.png"/><p>注意到：</p><ul><li><code>GenericServlet</code>（抽象类）：将 Servlet 接口中其他的方法做了默认空实现，只留 <code>service()</code> 方法作为抽象方法</li><li><strong><code>HttpServlet</code></strong>（抽象类）：对HTTP协议的一种封装，简化了大量操作，定义类继承 HttpServlet 时，<strong>只需要覆写 <code>doGet</code> / <code>doPost</code> 方法即可</strong>。</li></ul><p>IDEA 快捷创建<code>HttpServlet</code>：</p><p>右键新建类时，可选择 Create New Servlet，弹出窗口：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210223150318.png"/><p>但要记得，要将注解改为：<code>@WebServlet(&quot;/Servlet相对URL路径入口&quot;)</code>，或者通过 IDEA 的模板格式修改：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210225172717.png"/><h2 id="4-5-ServletContext-接口"><a class="header-anchor" href="#4-5-ServletContext-接口">¶</a>4.5 ServletContext 接口</h2><p><code>ServletContext</code> 是 Servlet 与 Servlet 容器之间直接通信的接口。在 Servlet 容器在启动一个 Web 应用时，会为其创建一个 <code>ServletContext</code> 对象，每个 Web 应用都有<strong>唯一</strong>的 <code>ServletContext</code> 对象。</p><p><code>ServletContext</code>对象，相当于 Web 应用的<strong>总管家</strong>，同一个 Web 应用中的<strong>所有 <code>Servlet</code> 对象都共享一个</strong>总管家（这些对象们，均可通过这个总管家来访问容器中的各种资源）</p><h3 id="4-5-1-获取-ServletContext"><a class="header-anchor" href="#4-5-1-获取-ServletContext">¶</a>4.5.1 获取 ServletContext</h3><ul><li><p>通过 <code>request</code> 对象来获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">request.getServletContext();<br></code></pre></td></tr></table></figure></li><li><p>通过 <code>HttpServlet</code> 对象来获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">this</span>.getServletContext();<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-5-2-相关方法"><a class="header-anchor" href="#4-5-2-相关方法">¶</a>4.5.2 相关方法</h3><p>（一）获取 MIME 类型：</p><ul><li><code>String getMimeType(String file)</code>：传入参数为文件名称字符串，该方法能够通过文件名称识别并返回对应的 MIME 类型串。</li></ul><p>（二）共享数据：</p><p><code>ServletContext</code> 对象的范围是最大的。通过这个对象，能够获取所有用户所有请求的相关数据</p><ul><li><code>setAttribute(String name,Object value)</code></li><li><code>getAttribute(String name)</code></li><li><code>removeAttribute(String name)</code></li></ul><p>（三）获取文件的真实路径</p><ul><li><p><code>getRealPath(String path)</code>：根据参数指定的<strong>虚拟路径</strong>，返回文件系统中的一个<strong>真实路径</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ServletContext context = <span class="hljs-keyword">this</span>.getServletContext(); <span class="hljs-comment">//通过HttpServlet获取</span><br>String realPath = context.getRealPath(<span class="hljs-string">&quot;/WEB-INF/classes/a.txt&quot;</span>); <span class="hljs-comment">//找到src目录下资源，对应的真实路径</span><br>File file = <span class="hljs-keyword">new</span> File(realPath);<br>System.out.println(realPath);<br><span class="hljs-comment">/* 输出结果为：</span><br><span class="hljs-comment"> * E:\LearningJavaWeb\out\artifacts\MyEEProjects_war_exploded\WEB-INF\classes\a.txt</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Web&lt;/strong&gt; 是一种分布式应用架构，旨在共享发布在网络上的各个Web服务器中的所有互相链接的信息。&lt;strong&gt;WWW（World Wide Web）&lt;/strong&gt;  是指全球范围内的 Web，它以 &lt;strong&gt;Internet&lt;/st</summary>
      
    
    
    
    <category term="Java" scheme="https://j-strawhat.github.io/categories/Java/"/>
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/categories/Java/JavaWeb/"/>
    
    
    <category term="配置" scheme="https://j-strawhat.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/tags/JavaWeb/"/>
    
    <category term="Servlet" scheme="https://j-strawhat.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>XML 学习笔记</title>
    <link href="https://j-strawhat.github.io/posts/cec783af/"/>
    <id>https://j-strawhat.github.io/posts/cec783af/</id>
    <published>2021-02-19T00:03:00.000Z</published>
    <updated>2021-07-20T10:02:13.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、XML-概述"><a class="header-anchor" href="#一、XML-概述">¶</a>一、XML 概述</h1><p>XML 指<strong>可拓展</strong>标记语言（EXtensible Markup Language），可拓展指的是，XML 标签并没有被预定义，需要自行定义标签。</p><p>XML 是 W3C 的推荐标准，语法极为严格。</p><h2 id="XML的自我描述性"><a class="header-anchor" href="#XML的自我描述性">¶</a>XML的自我描述性</h2><p>XML 标签具有自我描述性，如下举例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Nami<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>Luffy<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>Reminder<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Don&#x27;t forget go to school this weekend!<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><p>显然，上面的 XML 文档，并没有做任何事情，仅仅是包装在 XML 标签中的纯粹信息。我们需要<strong>编写软件或程序</strong>，才能传送、接收和显示出这个文档。</p><h2 id="XML-与-HTML-的区别"><a class="header-anchor" href="#XML-与-HTML-的区别">¶</a>XML 与 HTML 的区别</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">XML</th><th style="text-align:center">HTML</th></tr></thead><tbody><tr><td style="text-align:center">着重点</td><td style="text-align:center">数据的内容</td><td style="text-align:center">数据的外观</td></tr><tr><td style="text-align:center">用途</td><td style="text-align:center"><strong>传输和存储</strong>数据</td><td style="text-align:center">格式化并显示数据</td></tr><tr><td style="text-align:center">标签</td><td style="text-align:center">自定义</td><td style="text-align:center">预定义</td></tr><tr><td style="text-align:center">空格字符</td><td style="text-align:center">标签体内部的空格字符<strong>不会删减</strong></td><td style="text-align:center">将多个连续的空格字符合并为一个空格字符</td></tr><tr><td style="text-align:center">语法</td><td style="text-align:center">严格</td><td style="text-align:center">较松散</td></tr></tbody></table><h1 id="二、XML-语法"><a class="header-anchor" href="#二、XML-语法">¶</a>二、XML 语法</h1><p>XML 文档举例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">students</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">number</span> = <span class="hljs-string">&quot;strawhat_0001&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Luffy<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>male<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">number</span> = <span class="hljs-string">&quot;strawhat_0002&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nami<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>female<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">students</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="组成部分"><a class="header-anchor" href="#组成部分">¶</a>组成部分</h2><ol><li><p>文档声明</p><p>格式：<code>&lt;?xml 属性列表 ?&gt;</code>；</p><p>其中，属性列表有：</p><ul><li><code>version</code>：版本号，必须项，大部分为 <code>1.0</code></li><li><code>encoding</code>：编码方式，告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1，但我们希望是 <code>utf-8</code></li><li><code>standalone</code>：是否独立。取值若为 <code>yes</code>，则不依赖其他文件</li></ul></li><li><p>指令：结合 CSS 的（略）</p></li><li><p>标签：标签名称自定义的，其命令规则为：</p><ul><li>名称可以包含字母、数字以及其他的字符</li><li>名称不能包含空格</li><li>名称不能以数字或者标点符号开始</li><li>名称不能以**字母 xml（或者 XML、Xml 等等）**开始</li></ul><blockquote><p><strong>实用经验</strong>：XML 文档常有一个对应的数据库，其中的字段会对应 XML 文档中的元素，因而推荐使用数据库的命名规则来命名 XML 文档中元素</p></blockquote></li><li><p>属性：尽量使用元素来描述数据。而仅仅使用属性来提供与数据无关的信息。</p><p>有时候会向元素 分配 <code>ID</code> 应用，这些 <code>ID</code> 索引可用于标识 XML 元素（属性值是唯一的），它起作用的方式与 HTML 中 id 属性是一样的。</p><blockquote><p>元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。</p></blockquote></li><li><p>文本：在 XML 中，一些字符，如 <code>&lt;</code>、<code>&gt;</code>、<code>&amp;</code>、<code>'</code>、<code>&quot;</code> 等，拥有特殊的意义。若希望展示上述特殊字符，可以使用 实体引用 （如 <code>&amp;lt;</code> 来代替 <code>&lt;</code> 等），也可以使用 CDATA 区来“原样展示”内容</p><p>CDATA 区，即不应该由 XML 解析器解析的文本数据，格式为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;![CDATA[<br>数据<br>]]&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="注意事项"><a class="header-anchor" href="#注意事项">¶</a>注意事项</h2><ol><li>XML 文档的后缀名为 <code>.xml</code></li><li>XML 第一行必须定义为<strong>文档声明</strong></li><li>XML 文档中有且仅有一个根标签</li><li><strong>属性值</strong>必须使用<strong>引号</strong>(单双都可)引起来</li><li>标签必须正确关闭，如 <code>&lt;br /&gt;</code></li><li>XML 标签名称<strong>大小写敏感</strong></li></ol><h2 id="约束（XML规则）"><a class="header-anchor" href="#约束（XML规则）">¶</a>约束（XML规则）</h2><p>约束，即规定了 XML 文档书写规则。</p><p>拥有正确语法的 XML 被称为&quot;形式良好&quot;的 XML。而通过 DTD 验证的XML是&quot;合法&quot;的 XML。</p><p>以下为两种 XML 的约束技术：</p><h3 id="XML-DTD"><a class="header-anchor" href="#XML-DTD">¶</a>XML DTD</h3><p>DTD 的目的是定义 XML 文档的结构。DTD 使用一系列合法的元素来定义文档结构。（也就说，规定 XML 文档 应该按什么东西进行编写）</p><p>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p><ul><li><p>内部 DTD：将约束规则定义在 XML 文档中。如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">note</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">note</span> (<span class="hljs-meta-keyword">to</span>,<span class="hljs-meta-keyword">from</span>,<span class="hljs-meta-keyword">heading</span>,<span class="hljs-meta-keyword">body</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">to</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">from</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">heading</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">body</span> (<span class="hljs-meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Tove<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>Jani<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">heading</span>&gt;</span>Reminder<span class="hljs-tag">&lt;/<span class="hljs-name">heading</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Don&#x27;t forget me this weekend<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>外部 DTD：将约束规则定义在外部的 DTD 文件中，然后在 XML 文档中，以 <code>DOCTYOE</code> 进行声明：</p><ul><li>DTD文件若在本地：<code>&lt;!DOCTYPE 根标签名 SYSTEM &quot;DTD文件的位置&quot;&gt;</code></li><li>DTD文件若在网络：<code>&lt;!DOCTYPE 根标签名 PUBLIC &quot;DTD文件名称(自定义)&quot; &quot;DTD文件的位置URL&quot;&gt;</code></li></ul><p>如下举例：XML文档，拥有一个外部的 DTD</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">students</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;student.dtd&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--外部文档声明--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">students</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">number</span>=<span class="hljs-string">&quot;s001&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Luffy<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>hehe<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">number</span>=<span class="hljs-string">&quot;s002&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nami<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>female<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">students</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其外部的 DTD文件：<code>student.dtd</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!ELEMENT students (student*) &gt;<br>&lt;!ELEMENT student (name,age,sex)&gt;<br>&lt;!ELEMENT name (#PCDATA)&gt;<br>&lt;!ELEMENT age (#PCDATA)&gt;<br>&lt;!ELEMENT sex (#PCDATA)&gt;<br>&lt;!ATTLIST student number ID #REQUIRED&gt;<br></code></pre></td></tr></table></figure><blockquote><p>如上规定，<code>&lt;name&gt;</code>、<code>&lt;age&gt;</code>、<code>&lt;sex&gt;</code> 三个标签必须按顺序编写；<code>#PCDATA</code> 表明 标签体内容为 一字符串；<code>ATTLIST</code> 声明了属性，属性名称为 <code>number</code>，类型为 <code>ID</code>（表示该属性值必须唯一）；<code>#REQUIRED</code> 要求了该属性必须定义</p></blockquote></li></ul><h3 id="XML-Schema"><a class="header-anchor" href="#XML-Schema">¶</a>XML Schema</h3><p>相较于 DTD，Schema 对标签体的内容进行了更加严格的限定。</p><p>比如说：我希望在 <code>&lt;age&gt;</code> 标签体内容中限定只能是数字，而不能是其他的字符。对于 Schema的约束，甚至连 <code>&lt;age&gt;</code> 标签体中的数字大小有规定，又或者，对于 <code>&lt;sex&gt;</code> ，规定只有两种取值。</p><p>Schema 的约束文件名后缀为 <code>xsd</code></p><p>步骤：</p><ol><li><p>填写 XML 的根元素</p></li><li><p>引用 <code>xsi</code> 前缀，属固定格式。（如下方  <code>student.xml</code>文档的第 <code>2</code> 行）推荐取值为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br></code></pre></td></tr></table></figure></li><li><p>引入 <code>xsd</code> 文件命名空间（如下方  <code>student.xml</code>文档的第 <code>2</code> 行）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;<br></code></pre></td></tr></table></figure><blockquote><p>也就说，给路径为<code>http://www.itcast.cn/xml</code>的文件起一个别名，叫 <code>student.xsd</code></p></blockquote></li><li><p>为简化前缀，我们为每一个 <code>xsd</code> 约束声明一个前缀，作为标识。（如下方  <code>student.xml</code>文档的第 <code>4</code> 行）</p><blockquote><p>假如说，我设置 <code>xmlns:a =&quot;代替的链接&quot;</code>，那么要使用该链接下的标签 <code>&lt;age&gt;</code>，则需要像 <code>&lt;a:age&gt;</code> 这样去编写。</p><p>再比如 <code>xmlns=&quot;代替的链接&quot;</code>，那么要使用该链接下的标签 <code>&lt;age&gt;</code>，只需 <code>&lt;age&gt;</code> 这样去编写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">students</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.itcast.cn/xml  student.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">               http://www.itcast.cn/xml2  student2.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">         &quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">xmlns:a</span>=<span class="hljs-string">&quot;http://www.itcast.cn/xml&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:b</span>=<span class="hljs-string">&quot;http://www.itcast.cn/xml2&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a:name</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">a:name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">b:name</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">b:name</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">students</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote></li></ol><p>如下举例，XML 文档 <code>student.xml</code>如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">students</span>   <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.itcast.cn/xml  student.xsd&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.itcast.cn/xml&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">number</span>=<span class="hljs-string">&quot;heima_0001&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>tom<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>male<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">students</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>student.xsd</code> 文件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;xsd:schema xmlns=&quot;http://www.itcast.cn/xml&quot;<br>        xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;<br>        targetNamespace=&quot;http://www.itcast.cn/xml&quot; elementFormDefault=&quot;qualified&quot;&gt;<br>    &lt;xsd:element name=&quot;students&quot; type=&quot;studentsType&quot;/&gt;<br>    &lt;xsd:complexType name=&quot;studentsType&quot;&gt;<br>        &lt;xsd:sequence&gt;<br>            &lt;xsd:element name=&quot;student&quot; type=&quot;studentType&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;/&gt;<br>        &lt;/xsd:sequence&gt;<br>    &lt;/xsd:complexType&gt;<br>    &lt;xsd:complexType name=&quot;studentType&quot;&gt;<br>        &lt;xsd:sequence&gt;<br>            &lt;xsd:element name=&quot;name&quot; type=&quot;xsd:string&quot;/&gt;<br>            &lt;xsd:element name=&quot;age&quot; type=&quot;ageType&quot; /&gt;<br>            &lt;xsd:element name=&quot;sex&quot; type=&quot;sexType&quot; /&gt;<br>        &lt;/xsd:sequence&gt;<br>        &lt;xsd:attribute name=&quot;number&quot; type=&quot;numberType&quot; use=&quot;required&quot;/&gt;<br>    &lt;/xsd:complexType&gt;<br>    &lt;xsd:simpleType name=&quot;sexType&quot;&gt;<br>        &lt;xsd:restriction base=&quot;xsd:string&quot;&gt;<br>            &lt;xsd:enumeration value=&quot;male&quot;/&gt;<br>            &lt;xsd:enumeration value=&quot;female&quot;/&gt;<br>        &lt;/xsd:restriction&gt;<br>    &lt;/xsd:simpleType&gt;<br>    &lt;xsd:simpleType name=&quot;ageType&quot;&gt;<br>        &lt;xsd:restriction base=&quot;xsd:integer&quot;&gt;<br>            &lt;xsd:minInclusive value=&quot;0&quot;/&gt;<br>            &lt;xsd:maxInclusive value=&quot;256&quot;/&gt;<br>        &lt;/xsd:restriction&gt;<br>    &lt;/xsd:simpleType&gt;<br>    &lt;xsd:simpleType name=&quot;numberType&quot;&gt;<br>        &lt;xsd:restriction base=&quot;xsd:string&quot;&gt;<br>            &lt;xsd:pattern value=&quot;heima_\d&#123;4&#125;&quot;/&gt;<br>        &lt;/xsd:restriction&gt;<br>    &lt;/xsd:simpleType&gt;<br>&lt;/xsd:schema&gt; <br></code></pre></td></tr></table></figure><h1 id="三、解析-XML-文档"><a class="header-anchor" href="#三、解析-XML-文档">¶</a>三、解析 XML 文档</h1><p>操作 XML 文档：</p><ul><li>解析（读入）：将文档中的数据读入到内存中；</li><li>写入：将内存中的数据保存到 XML 文档中，从而实现持久化存储</li></ul><p>解析 XML 文档的方式：</p><table><thead><tr><th></th><th>DOM</th><th>SAX</th></tr></thead><tbody><tr><td>描述</td><td>将标记语言文档<strong>一次性</strong>加载进内存，<br>在内存中形成一棵 <strong>DOM</strong> 树</td><td>逐行读入，基于<strong>事件</strong>驱动</td></tr><tr><td>优点</td><td>操作方便，可对文档进行 CRUD 的所有操作</td><td>内存消耗小</td></tr><tr><td>缺点</td><td>对内存消耗较大</td><td>只能读入，不能增删改</td></tr></tbody></table><p>常见的 XML 解析器：</p><ol><li>JAXP：sun 公司提供的解析器，支持 DOM 和 SAX 两种思想</li><li>DOM4J：一款非常优秀的解析器</li><li><strong>Jsoup</strong>：Jsoup 是一款 Java 的 HTML 解析器，可直接解析某个 URL 地址、 HTML 文本内容。它提供了一套非常方便的 API，可通过 DOM，CSS 以及类似于 jQuery 的操作方法来取出并操作数据。</li><li>PULL：Android 操作系统内置的解析器，通过 SAX 方式。</li></ol><h2 id="相关对象"><a class="header-anchor" href="#相关对象">¶</a>相关对象</h2><h3 id="Jsoup-工具类"><a class="header-anchor" href="#Jsoup-工具类">¶</a>Jsoup 工具类</h3><p>能够解析 HTML 或 XML 文档，返回 <code>Document</code> 对象。其方法主要围绕于  <code>parse()</code></p><ul><li><p><code>parse(File in, String charsetName)</code>：解析 XML 或 HTML <strong>文件</strong>。</p></li><li><p><code>parse(String html)</code>：解析xml或html字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String str = <span class="hljs-string">&quot;</span><br><span class="hljs-string">    xml或HTML中的内容 </span><br><span class="hljs-string">&quot;</span>;<br>Document document = Jsoup.parse(str);<br></code></pre></td></tr></table></figure></li><li><p><code>parse(URL url, int timeoutMills)</code>：通过网络路径 URL 获取指定的 HTML 或 XML 的文档对象 （可用于爬虫）</p><blockquote><p>URL 为 统一资源定位器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;https://baike.baidu.com/item/jsoup/9012509?fr=aladdin&quot;</span>);<br><span class="hljs-comment">//传入的 URL 代表网络中的一个资源路径</span><br>Document document = Jsoup.parse(url, <span class="hljs-number">10000</span>); <span class="hljs-comment">//限定超时时间</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Document-文档对象"><a class="header-anchor" href="#Document-文档对象">¶</a>Document 文档对象</h3><p><code>Document</code> 对象代表了内存中的 DOM 树。</p><p>获取 <code>Element</code> 对象的方法有：</p><ul><li><code>getElementById(String id)</code>：根据id属性值获取唯一的 <code>element</code> 对象</li><li><code>getElementsByTag(String tagName)</code>：根据标签名称获取元素对象集合</li><li><code>getElementsByAttribute(String key)</code>：根据属性名称获取元素对象集合</li><li><code>getElementsByAttributeValue(String key, String value)</code>：根据对应的属性名和属性值获取元素对象集合</li></ul><h3 id="Elements-对象"><a class="header-anchor" href="#Elements-对象">¶</a>Elements 对象</h3><p><code>Elements</code>  对象，是元素 <code>Element</code> 对象的集合，你可以理解为 <code>ArrayList&lt;Element&gt;</code></p><h3 id="ELement-元素对象"><a class="header-anchor" href="#ELement-元素对象">¶</a>ELement 元素对象</h3><p>（一）获取<strong>子元素</strong>对象的方法：（方法名同 <code>Document</code> 对象的相关方法）</p><ul><li><code>getElementById(String id)</code>：根据id属性值获取唯一的 <code>element</code> 对象</li><li><code>getElementsByTag(String tagName)</code>：根据标签名称获取元素对象集合</li><li><code>getElementsByAttribute(String key)</code>：根据属性名称获取元素对象集合</li><li><code>getElementsByAttributeValue(String key, String value)</code>：根据对应的属性名和属性值获取元素对象集合</li></ul><p>（二）获取相应属性值的方法：</p><ul><li><code>String attr(String key)</code>：从该标签元素中，根据属性名称来获取相应的属性值</li></ul><p>（三）获取文本内容：</p><ul><li><code>String text()</code>：获取<strong>所有子标签</strong>的纯文本内容</li><li><code>String html()</code>：获取标签体的所有内容</li></ul><h2 id="利用-Jsoup-解析-XML"><a class="header-anchor" href="#利用-Jsoup-解析-XML">¶</a>利用 Jsoup 解析 XML</h2><p>步骤如下：</p><ol><li><p>导入 jar 包</p><blockquote><p>XML 文档，最好放到 <code>src</code> 目录下。</p></blockquote></li><li><p>获取 <code>Document</code> 对象</p></li><li><p>获取对应的标签 <code>Element</code> 对象</p></li><li><p>获取数据</p></li></ol><p>举例如下：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210220182205.png"/><p><code>student.xml</code> XML 文件如下：（约束暂时省略不写）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">students</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">number</span> = <span class="hljs-string">&quot;heima_0001&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Luffy<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>male<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">student</span> <span class="hljs-attr">number</span> = <span class="hljs-string">&quot;heima_0002&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nami<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>female<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">students</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>JsoupDemo1.java</code> ，解析代码如下 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> top.JoyDee.LearningXML.jsoup;<br><span class="hljs-keyword">import</span> org.jsoup.Jsoup;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Document;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Element;<br><span class="hljs-keyword">import</span> org.jsoup.select.Elements;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsoupDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1. 导入jsoup的jar包</span><br>        <span class="hljs-comment">//2. 获取Document对象，根据xml文档获取</span><br>        <span class="hljs-comment">//2.1 获取student.xml的path</span><br>        URL tmpUrl = JsoupDemo1.class.getClassLoader().getResource(<span class="hljs-string">&quot;student.xml&quot;</span>);<br>        <span class="hljs-comment">//使用类加载器，通过其getResource方法获取URL，对URL转换为String</span><br>        <span class="hljs-keyword">if</span>(tmpUrl != <span class="hljs-keyword">null</span>)&#123; <span class="hljs-comment">//避免空指针异常</span><br>            String path = tmpUrl.getPath();<br>            <span class="hljs-comment">//2.2 解析XML文档，加载文档进内存，获取DOM树---&gt;Document</span><br>            Document document = Jsoup.parse(<span class="hljs-keyword">new</span> File(path), <span class="hljs-string">&quot;utf-8&quot;</span>);<br>            <span class="hljs-comment">//3. 获取元素对象Element</span><br>            Elements elements = document.getElementsByTag(<span class="hljs-string">&quot;name&quot;</span>);<br><br>            <span class="hljs-comment">//3.1 获取第一个element对象</span><br>            Element e = elements.get(<span class="hljs-number">0</span>);<br>            String name = e.text();<br>            System.out.println(name);<br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;tmpUrl is NULL&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="快捷查询方式"><a class="header-anchor" href="#快捷查询方式">¶</a>快捷查询方式</h2><ol><li><p>XPath：即 XML 路径语言，它是一种用来确定 XML （标准通用标记语言的子集）文档中某部分位置的语言。需导入 jar 包。语法请查询 w3cschool 的相关参考手册</p></li><li><p><code>selector</code>：</p><p><code>Element</code> 有一个方法：<code>Elements select(String cssQuery)</code>，传入 CSS选择器 的字符串形式，返回 <code>Elements</code></p><p>语法：参考 <code>Selector</code> 类中定义的语法。</p><p>举例使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> top.JoyDee.LearningXML.jsoup;<br><br><span class="hljs-keyword">import</span> org.jsoup.Jsoup;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Document;<br><span class="hljs-keyword">import</span> org.jsoup.select.Elements;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsoupWithSelectorDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1.获取student.xml的path</span><br>        String path = JsoupWithSelectorDemo.class.getClassLoader().getResource(<span class="hljs-string">&quot;student.xml&quot;</span>).getPath();<br>        <span class="hljs-comment">//2.获取Document对象</span><br>        Document document = Jsoup.parse(<span class="hljs-keyword">new</span> File(path), <span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>        <span class="hljs-comment">//3.查询name标签</span><br>        org.jsoup.select.Elements elements = document.select(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(elements);<br>        System.out.println(<span class="hljs-string">&quot;-----------------&quot;</span>);<br>        <span class="hljs-comment">//4.获取student标签并且number属性值为heima_0001的age子标签</span><br>        <span class="hljs-comment">//4.1.获取student标签并且number属性值为heima_0001</span><br>        org.jsoup.select.Elements elements2 = document.select(<span class="hljs-string">&quot;student[number=\&quot;heima_0001\&quot;]&quot;</span>);<br>        System.out.println(elements2);<br>        System.out.println(<span class="hljs-string">&quot;----------------&quot;</span>);<br>        <span class="hljs-comment">//4.2获取student标签并且number属性值为heima_0001的age子标签</span><br>        Elements elements3 = document.select(<span class="hljs-string">&quot;student[number=\&quot;heima_0001\&quot;] &gt; age&quot;</span>);<br>        System.out.println(elements3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;name&gt;<br> Luffy<br>&lt;/name&gt;<br>&lt;name&gt;<br> Nami<br>&lt;/name&gt;<br>-----------------<br>&lt;student number=&quot;heima_0001&quot;&gt; <br> &lt;name&gt;<br>  Luffy<br> &lt;/name&gt; <br> &lt;age&gt;<br>  20<br> &lt;/age&gt; <br> &lt;sex&gt;<br>  male<br> &lt;/sex&gt; <br>&lt;/student&gt;<br>----------------<br>&lt;age&gt;<br> 20<br>&lt;/age&gt;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、XML-概述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#一、XML-概述&quot;&gt;¶&lt;/a&gt;一、XML 概述&lt;/h1&gt;
&lt;p&gt;XML 指&lt;strong&gt;可拓展&lt;/strong&gt;标记语言（EXtensible Markup Language），</summary>
      
    
    
    
    <category term="Java" scheme="https://j-strawhat.github.io/categories/Java/"/>
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/categories/Java/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="https://j-strawhat.github.io/tags/JavaWeb/"/>
    
    <category term="XML" scheme="https://j-strawhat.github.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap 学习笔记</title>
    <link href="https://j-strawhat.github.io/posts/18877b96/"/>
    <id>https://j-strawhat.github.io/posts/18877b96/</id>
    <published>2021-02-18T18:30:00.000Z</published>
    <updated>2021-07-20T10:02:13.913Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bootcss.com/">Bootstrap</a> 是 HTML、CSS 和 JS 的一个框架，用于开发响应式布局、移动设备优先的 WEB 项目。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210220152710.png" style="zoom: 30%;" /><h1 id="一、Bootstrap-概述"><a class="header-anchor" href="#一、Bootstrap-概述">¶</a>一、Bootstrap 概述</h1><h2 id="Bootstrap-包的内容"><a class="header-anchor" href="#Bootstrap-包的内容">¶</a>Bootstrap 包的内容</h2><ul><li><strong>基本结构</strong>：Bootstrap 提供了一个带有网格系统、链接样式、背景的基本结构。</li><li><strong>CSS</strong>：Bootstrap 自带以下特性：全局的 CSS 设置、定义基本的 HTML 元素样式、可扩展的 class，以及一个先进的网格系统。</li><li><strong>组件</strong>：Bootstrap 包含了十几个可重用的组件，用于创建图像、下拉菜单、导航、警告框、弹出框等等。</li><li><strong>JavaScript 插件</strong>：Bootstrap 包含了十几个自定义的 jQuery 插件。您可以直接包含所有的插件，也可以逐个包含这些插件。</li><li><strong>定制</strong>：您可以定制 Bootstrap 的组件、LESS 变量和 jQuery 插件来得到您自己的版本。</li></ul><h2 id="Bootstrap-v3-3-7-环境安装及快速入门"><a class="header-anchor" href="#Bootstrap-v3-3-7-环境安装及快速入门">¶</a>Bootstrap v3.3.7 环境安装及快速入门</h2><ol><li><p>下载预编译的压缩包。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210220133225.png" style="zoom:67%;" /></li><li><p>解压刚下载完毕的压缩包，便可得到如下的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">bootstrap/<br>├── css/<br>│   ├── bootstrap.css<br>│   ├── bootstrap.css.map<br>│   ├── bootstrap.min.css<br>│   ├── bootstrap.min.css.map<br>│   ├── bootstrap-theme.css<br>│   ├── bootstrap-theme.css.map<br>│   ├── bootstrap-theme.min.css<br>│   └── bootstrap-theme.min.css.map<br>├── js/<br>│   ├── bootstrap.js<br>│   └── bootstrap.min.js<br>└── fonts/<br>    ├── glyphicons-halflings-regular.eot<br>    ├── glyphicons-halflings-regular.svg<br>    ├── glyphicons-halflings-regular.ttf<br>    ├── glyphicons-halflings-regular.woff<br>    └── glyphicons-halflings-regular.woff2<br></code></pre></td></tr></table></figure></li><li><p>将上面的三个文件夹复制到你的项目中</p></li><li><p>创建一个 HTML 页面，其基本模板如下，修改 CSS、JS 的资源文件路径即可。</p><blockquote><p>jQuery 的资源文件 <code>jquery-3.2.1.min.js</code>，需要去 jQuery 官网额外下载</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap 101 Template<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Bootstrap --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 当你已经下载了预编译包后，可以将上面的href改为你本地的bootstrap.min.css路径--&gt;</span><br>      <br><br>    <span class="hljs-comment">&lt;!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 --&gt;</span><br>    <span class="hljs-comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">      &lt;script src=&quot;https://cdn.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">    &lt;![endif]--&gt;</span><br>      <br>    <span class="hljs-comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 当你已经下载了预编译包后，可以将上面的href改为你本地的bootstrap.min.js路径 --&gt;</span> <br>      <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好，世界！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="二、Bootstrap的栅格系统（Grid-System）"><a class="header-anchor" href="#二、Bootstrap的栅格系统（Grid-System）">¶</a>二、Bootstrap的栅格系统（Grid System）</h1><h2 id="响应式设计"><a class="header-anchor" href="#响应式设计">¶</a>响应式设计</h2><p>响应式设计即是 RWD，<strong>Responsive Web Design</strong>。它与移动端开发有着密切的联系。</p><blockquote><p>根据维基百科及其参考文献，理论上，响应式界面能够<strong>适应不同的设备</strong>。描述响应式界面最著名的一句话就是“Content is like water”，中文即是“如果将屏幕看作容器，那么内容就像水一样”。</p></blockquote><p>Jeffrey Zeldman 总结道，RWD 定义为<strong>一切能用来为各种分辨率和设备性能优化视觉体验的技术</strong>。</p><p>关于响应式设计的更详细介绍，可以参阅<a href="https://mp.weixin.qq.com/s/XZ45ElgevrfiCp-fc8Ki0Q">这篇文章</a>。</p><h2 id="栅格系统"><a class="header-anchor" href="#栅格系统">¶</a>栅格系统</h2><p>对于 Bootstrap，它提供了一套<strong>响应式、移动设备优先</strong>的流式网格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为<strong>最多 12 列</strong>。（简单来说，就是将一行平均分成 12 个格子，可指定元素占多少个格子）</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210220140524.png" style="zoom:67%;" /><h3 id="移动设备有限策略"><a class="header-anchor" href="#移动设备有限策略">¶</a>移动设备有限策略</h3><p>内容：决定什么是最重要的。</p><p>布局：</p><ul><li>优先设计更小的宽度。</li><li>基础的 CSS 是移动设备优先，媒体查询时针对于平板电脑、台式电脑</li></ul><p>渐进增强：随着屏幕大小的增加而添加元素</p><h3 id="定义步骤"><a class="header-anchor" href="#定义步骤">¶</a>定义步骤</h3><ol><li><p>定义容器（相当于 HTML 中的 <code>&lt;table&gt;</code>），有两种容器：</p><ul><li><code>.container</code>：固定宽度，可以理解为 “两边存在空隙”</li><li><code>.container-fluid</code>：100% 宽度</li></ul></li><li><p>定义行（相当于 <code>&lt;tr&gt;</code>）。通过行 （<code>row</code>），在水平方向创建一组列（<code>column</code>）</p></li><li><p>定义元素，指定该元素在不同设备上，所占的格子数目。格式为：<code>col-设备代号-格子数目</code></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">超小屏幕</th><th style="text-align:center">小屏幕</th><th style="text-align:center">中等屏幕</th><th style="text-align:center">大屏幕</th></tr></thead><tbody><tr><td style="text-align:center">应用场景</td><td style="text-align:center">手机</td><td style="text-align:center">平板</td><td style="text-align:center">桌面显示器</td><td style="text-align:center">大桌面显示器</td></tr><tr><td style="text-align:center">设备代号</td><td style="text-align:center"><code>xs</code></td><td style="text-align:center"><code>sm</code></td><td style="text-align:center"><code>md</code></td><td style="text-align:center"><code>lg</code></td></tr><tr><td style="text-align:center">像素尺寸</td><td style="text-align:center">&lt;768px</td><td style="text-align:center">≥768px</td><td style="text-align:center">≥992px</td><td style="text-align:center">≥1200px</td></tr></tbody></table></li></ol><p>注意：</p><ol><li><p>在设计时，如果一 行（<code>row</code>）中包含了的 列（<code>col</code>）数<strong>大于 12</strong>，多余的 列（<code>col</code>）所在的元素将被作为一个整体另起一行排列。</p></li><li><p>如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，此时一个元素占满一整行。</p><blockquote><p>是否不希望在小屏幕设备上所有列（<code>col</code>）都堆叠在一起？那就使用针对超小屏幕和中等屏幕设备所定义的类，即 <code>.col-xs-*</code> 和 <code>.col-md-*</code>。</p></blockquote></li><li><p>栅格类属性可以 <strong>向上兼容</strong> 。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。</p></li></ol><p>响应式演示：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/栅格系统演示.gif"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>栅格系统演示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Bootstrap --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.2.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.inner</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid dodgerblue;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 在大显示器上一行显示12个格子，在平板显示一行6个格子 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>我是栅格<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>我是栅格<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>我是栅格<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>我是栅格<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>我是栅格<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>我是栅格<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>我是栅格<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>我是栅格<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>我是栅格<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>我是栅格<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>我是栅格<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>我是栅格<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>布局排列的演示：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210220152048.png"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;row&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding: 10px&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../imgs/National.jpg&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;358&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-md-8&quot;</span> &gt;</span><br>                <span class="hljs-comment">&lt;!--分两行排列，每一行排三张图片--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--第一张图片--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--自动加小圆角边框的样式--&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;../imgs/scene.jpg&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Come here now!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--第二张图片--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--自动加小圆角边框的样式--&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;../imgs/scene.jpg&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Come here now!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--第三张图片--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--自动加小圆角边框的样式--&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;../imgs/scene.jpg&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Come here now!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--第一张图片--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--自动加小圆角边框的样式--&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;../imgs/scene.jpg&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Come here now!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--第二张图片--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--自动加小圆角边框的样式--&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;../imgs/scene.jpg&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Come here now!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--第三张图片--&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--自动加小圆角边框的样式--&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;../imgs/scene.jpg&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Come here now!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="三、CSS-样式-与-JS插件"><a class="header-anchor" href="#三、CSS-样式-与-JS插件">¶</a>三、CSS 样式 与 JS插件</h1><h2 id="全局-CSS-样式"><a class="header-anchor" href="#全局-CSS-样式">¶</a>全局 CSS 样式</h2><h3 id="1-按钮"><a class="header-anchor" href="#1-按钮">¶</a>1. 按钮</h3><p>文档可参考：<a href="https://v3.bootcss.com/css/?#buttons">https://v3.bootcss.com/css/?#buttons</a></p><p>为 <code>&lt;a&gt;</code>、<code>&lt;button&gt;</code> 或 <code>&lt;input&gt;</code> 元素添加按钮类（button class）即可使用 Bootstrap 提供的样式，也就说，为上述的标签设置类属性来获取好看的样式：<code>class = &quot;btn btn-default&quot;</code></p><p>注意，导航和导航条组件只支持 <code>&lt;button&gt;</code> 元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>Link<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Input&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-图片"><a class="header-anchor" href="#2-图片">¶</a>2. 图片</h3><p>在 Bootstrap 版本 3 中，通过为图片添加 <code>.img-responsive</code> 类可以让图片支持响应式布局，从而让图片在其父元素中更好的缩放。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-responsive&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;...&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--尽量使用相对路径--&gt;</span><br></code></pre></td></tr></table></figure><p>如果需要让使用了 <code>.img-responsive</code> 类的图片<strong>水平居中</strong>，请使用 <code>.center-block</code> 类。</p><h3 id="3-表单"><a class="header-anchor" href="#3-表单">¶</a>3. 表单</h3><p>文档可参考：<a href="https://v3.bootcss.com/css/?#forms">https://v3.bootcss.com/css/?#forms</a></p><p>所有设置了**<code>.form-control</code> 类**的 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 元素都将被默认设置宽度属性为 <code>width: 100%;</code>。</p><p>将 <code>label</code> 元素和前面提到的控件包裹在 <strong><code>.form-group</code></strong> 中可以获得最好的排列。</p><p>推荐参考：水平排列的表单</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210220145518.png" style="zoom: 80%;" /><blockquote><p>需要自行调整输入框的宽度。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-horizontal&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputEmail3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputEmail3&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Email&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputPassword3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputPassword3&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> Remember me<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>Sign in<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="部分组件"><a class="header-anchor" href="#部分组件">¶</a>部分组件</h2><h3 id="1-导航条"><a class="header-anchor" href="#1-导航条">¶</a>1. 导航条</h3><p>参阅文档：<a href="https://v3.bootcss.com/components/#navbar">https://v3.bootcss.com/components/#navbar</a></p><h3 id="2-分页条"><a class="header-anchor" href="#2-分页条">¶</a>2. 分页条</h3><p>参阅文档：<a href="https://v3.bootcss.com/components/#pagination">https://v3.bootcss.com/components/#pagination</a></p><h2 id="JS-插件"><a class="header-anchor" href="#JS-插件">¶</a>JS 插件</h2><h3 id="1-轮播图（carousel）"><a class="header-anchor" href="#1-轮播图（carousel）">¶</a>1. 轮播图（carousel）</h3><p>参阅文档：<a href="https://v3.bootcss.com/javascript/#carousel">https://v3.bootcss.com/javascript/#carousel</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.bootcss.com/&quot;&gt;Bootstrap&lt;/a&gt; 是 HTML、CSS 和 JS 的一个框架，用于开发响应式布局、移动设备优先的 WEB 项目。&lt;/p&gt;
&lt;img src=&quot;https://gitee.com/j__straw</summary>
      
    
    
    
    <category term="Web前端" scheme="https://j-strawhat.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Bootstrap" scheme="https://j-strawhat.github.io/categories/Web%E5%89%8D%E7%AB%AF/Bootstrap/"/>
    
    
    <category term="Bootstrap" scheme="https://j-strawhat.github.io/tags/Bootstrap/"/>
    
    <category term="配置" scheme="https://j-strawhat.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>「JavaScript学习笔记02」事件、BOM、DOM</title>
    <link href="https://j-strawhat.github.io/posts/af309ce3/"/>
    <id>https://j-strawhat.github.io/posts/af309ce3/</id>
    <published>2021-02-13T18:19:00.000Z</published>
    <updated>2021-07-20T10:02:13.913Z</updated>
    
    <content type="html"><![CDATA[<p><s>深圳的小梅沙真的治愈啊</s></p><h1 id="Chapter-1-事件"><a class="header-anchor" href="#Chapter-1-事件">¶</a>Chapter 1. 事件</h1><h2 id="1-1-事件监听机制"><a class="header-anchor" href="#1-1-事件监听机制">¶</a>1.1 事件监听机制</h2><p>事件监听机制，即某些组件被执行了某些操作后，触发某些代码的执行。</p><ul><li><p>事件：某些操作。如：单击</p></li><li><p>事件源：组件。如：按钮、文本输入框</p></li><li><p>监听器：代码</p></li><li><p>注册监听：将事件、事件源、监听器结合在一起，当事件源上发生了某个事件，则触发执行某个监听器的代码。有两个方式，绑定事件：</p><p>方式一：直接在 HTML 标签上，指定事件的属性，其属性值即是 JS 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;img/off.gif&quot;</span> <span class="hljs-attr">onclick</span> = <span class="hljs-string">&quot;fun();&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&#x27;我被点击了!&#x27;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>方式二：通过 JS 获取元素对象，指定事件属性，设置函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;img/off.gif&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> light = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;light&quot;</span>); <span class="hljs-comment">//获取对象</span></span><br><span class="javascript">        light.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&#x27;我被点击了!&#x27;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="1-2-常见的事件"><a class="header-anchor" href="#1-2-常见的事件">¶</a>1.2 常见的事件</h2><p>（一）点击事件：</p><ol><li><code>onclick</code>：单机事件</li><li><code>ondblclick</code>：双击事件</li></ol><p>（二）焦点事件：</p><ol><li><code>onblur</code>：失去焦点，常用于表单校验。</li><li><code>onfocus</code>：元素获得焦点。</li></ol><p>（三）加载事件：</p><ol><li><code>onload</code>：一张页面或一幅图像完成加载</li></ol><p>（四）鼠标事件：</p><ol><li><code>onmousedown</code>：鼠标按键被按下。<ul><li>定义方法时，定义一个形参接收 <code>event</code> 对象</li><li><code>event</code> 对象的 <code>button</code> 属性，可以知道使用鼠标的哪个按键进行点击。</li></ul></li><li><code>onmouseup</code>：鼠标按键被松开。</li><li><code>onmousemove</code>：鼠标被移动</li><li><code>onmouseover</code>：鼠标移动到某元素之上。</li><li><code>onmouseout</code>：鼠标从某个元素移开。</li></ol><p>（五）键盘事件：</p><ol><li><code>onkeydown</code>：某个键盘按键被按下</li><li><code>onkeyup</code>：某个键盘按键被松下</li><li><code>onkeypress</code>：某个键盘按键被按下并松开</li></ol><p>（六）选择和改变：</p><ol><li><code>onchange</code>：域的内容被改变。<ul><li>应用场景：关于 省、市、区联动的下拉选择的表单</li></ul></li><li><code>onselectet</code>：用户选取文本时触发</li></ol><p>使用举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-comment">//整个窗口加载完毕后，再执行下列的时间</span></span><br><span class="javascript">            <span class="hljs-comment">//失去焦点事件</span></span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;username&quot;</span>).onblur = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                alert(<span class="hljs-string">&quot;失去焦点了...&quot;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-comment">//绑定鼠标点击事件</span></span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;username&quot;</span>).onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">                alert(<span class="hljs-string">&quot;鼠标的第&quot;</span> + event.button + <span class="hljs-string">&quot;个键点击了!&quot;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//绑定键盘事件</span></span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;username&quot;</span>).onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span>(event.keyCode == <span class="hljs-number">13</span>)&#123; <span class="hljs-comment">//当按下键盘的回车键</span></span><br><span class="javascript">                    alert(<span class="hljs-string">&quot;表单提交!&quot;</span>);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;username&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/点击事件.gif"/><p>校验码图片更新：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//1. 获取图片对象</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;checkCodeImg&quot;</span>);</span><br><span class="javascript">            <span class="hljs-comment">//2. 绑定单机事件</span></span><br><span class="javascript">            img.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">//获取时间戳，从而得到一个“唯一”而“不重复”的值</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();</span><br><span class="javascript">                img.src = <span class="hljs-string">&quot;/MyEEProjects/checkCodeServlet?&quot;</span> + date;</span><br><span class="javascript">                <span class="hljs-comment">//通过传入无用但“唯一”而“不重复”的参数，能够保证点击时更新图片缓存</span></span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;checkCodeImg&quot;</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;/MyEEProjects/checkCodeServlet&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--验证码图片--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（七）表单事件：</p><ol><li><p><strong><code>onsubmit</code></strong>：确认按钮被点击</p><ul><li>可以阻止表单的提交，从而对填写的表单进行校验</li><li>当方法的返回值是 <code>false</code>，则阻止提交。</li></ul><blockquote><p>注意区分，<code>Form</code> 这一 DOM 对象有一<strong>方法</strong>（不是事件）：<strong><code>submit()</code></strong>，JS能够通过这一 DOM 对象的方法，将表单进行提交。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">/* 方式一 */</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkForm</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;</span><br><span class="javascript">            <span class="hljs-comment">//...</span></span><br><span class="javascript">            <span class="hljs-keyword">return</span> flag;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-comment">/* 方式二，此时无需在HTML标签中指定onclick属性</span></span><br><span class="hljs-comment"><span class="javascript">        document.getElementById(&quot;form&quot;).onsubmit = function () &#123;</span></span><br><span class="hljs-comment"><span class="javascript">            var flag = false;</span></span><br><span class="hljs-comment"><span class="javascript">            //...</span></span><br><span class="hljs-comment"><span class="javascript">            return flag;</span></span><br><span class="hljs-comment"><span class="javascript">        &#125;</span></span><br><span class="hljs-comment"><span class="javascript">        */</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;return checkForm();&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>onreset</code>：表单重置时触发</p></li></ol><h2 id="案例：表单全选"><a class="header-anchor" href="#案例：表单全选">¶</a>案例：表单全选</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表格全选<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">table</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">30%</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">td</span>,<span class="hljs-selector-tag">th</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">30%</span>;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-class">.outBK</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: white;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-class">.overBK</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#bdedf9</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//1. 在页面加载完后绑定事件</span></span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//2. 给全选按钮绑定单击事件</span></span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;selectAll&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> cbs = <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">&quot;cb&quot;</span>); <span class="hljs-comment">//3. 获取数组</span></span><br><span class="javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cbs.length; i++)&#123;</span><br><span class="javascript">                    cbs[i].checked = <span class="hljs-literal">true</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-comment">//全不选</span></span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;unSelectAll&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> cbs = <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">&quot;cb&quot;</span>);</span><br><span class="javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cbs.length; i++)&#123;</span><br><span class="javascript">                    cbs[i].checked = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-comment">//反选</span></span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;selectRev&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> cbs = <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">&quot;cb&quot;</span>);</span><br><span class="javascript">                <span class="hljs-keyword">if</span>(cbs[<span class="hljs-number">0</span>].checked == <span class="hljs-literal">true</span>) cbs[<span class="hljs-number">0</span>].checked = <span class="hljs-literal">false</span>; <span class="hljs-comment">//全选的反选，保证所有都不选</span></span><br><span class="javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; cbs.length; i++)&#123;</span><br><span class="javascript">                    cbs[i].checked = !cbs[i].checked;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;firstCb&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> cbs = <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">&quot;cb&quot;</span>);</span><br><span class="javascript">                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; cbs.length; i++)&#123;</span><br><span class="javascript">                    cbs[i].checked = <span class="hljs-built_in">this</span>.checked;<span class="hljs-comment">//所有行的选中状态基于第一行</span></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//为所有tr标签，绑定“鼠标移到元素之上”和“移出元素之上”的事件</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> trs = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;tr&quot;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; trs.length; i++)&#123;</span><br><span class="javascript">                trs[i].onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&quot;overBK&quot;</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                trs[i].onmouseout = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&quot;outBK&quot;</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>To Do List<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;cb&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;firstCb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;cb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>写作业<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;cb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>刷卷子<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;cb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>看网课<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全选&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;unSelectAll&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全不选&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectRev&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;反选&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/表单全选.gif"/><h2 id="案例：表单校验"><a class="header-anchor" href="#案例：表单校验">¶</a>案例：表单校验</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkUsername</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> username = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;username&quot;</span>).value; <span class="hljs-comment">//获取用户名的值</span><br>    <span class="hljs-keyword">var</span> reg_username = <span class="hljs-regexp">/^\w&#123;6, 12&#125;$/</span>; <span class="hljs-comment">//定义正则表达式</span><br>    <span class="hljs-keyword">var</span> flag = reg_username.test(username); <span class="hljs-comment">//判断值是否符合正则表达式的规则</span><br>    <span class="hljs-keyword">var</span> s_username = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;s_username&quot;</span>);<br>    <span class="hljs-keyword">if</span>(flag)<br>        s_username.innerHTML = <span class="hljs-string">&quot;&lt;img width = &#x27;50%&#x27; src = &#x27;img/correct.svg&#x27;/&gt;&quot;</span>;<br>    <span class="hljs-keyword">else</span> <br>       s_username.innerHTML = <span class="hljs-string">&quot;用户名格式有误&quot;</span>;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkPassword</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//给表单绑定 onsubmit 事件，当用户点击提交按钮时，先校验是否通过</span><br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;form&quot;</span>).onsubmit = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> checkUsername() &amp;&amp; checkPassword;<br>    &#125;<br>    <span class="hljs-comment">//给每个表单分别绑定离开焦点的事件，用以实时判断表单的合法性</span><br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;username&quot;</span>).onblur = checkUsername; <span class="hljs-comment">//注意，是函数对象</span><br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;password&quot;</span>).onblur = checkPassword;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Chapter-2-BOM-浏览器对象模型"><a class="header-anchor" href="#Chapter-2-BOM-浏览器对象模型">¶</a>Chapter 2. BOM-浏览器对象模型</h1><p>浏览器对象模型（<strong>B</strong>rowser <strong>O</strong>bject <strong>M</strong>odel），将浏览器的各个组成部分封装为对象，使得 JavaScript 有能力与浏览器“对话”。</p><p>其组成有：</p><ul><li><code>window</code>——窗口对象</li><li><code>navigator</code>——浏览器对象</li><li><code>screen</code>——显示器屏幕对象</li><li><code>history</code>——历史记录对象</li><li><code>location</code>——地址栏对象</li></ul><h2 id="2-1-window：窗口对象"><a class="header-anchor" href="#2-1-window：窗口对象">¶</a>2.1 window：窗口对象</h2><p>window 对象，表示了浏览器窗口，所有 JS 全局对象、函数以及变量均自动成为 window 对象的成员。全局变量，是 window 对象的属性（甚至，HTML DOM 的 <code>document</code> 也是 window 对象的属性之一）；全局函数，是 window 对象的方法。</p><h3 id="2-1-1-属性"><a class="header-anchor" href="#2-1-1-属性">¶</a>2.1.1 属性</h3><ol><li>获取其他 BOM 对象：<ul><li><code>history</code></li><li><code>location</code></li><li><code>navigator</code></li><li><code>screen</code></li></ul></li><li>获取 DOM 对象：<ul><li><code>document</code></li></ul></li></ol><h3 id="2-1-2-特点"><a class="header-anchor" href="#2-1-2-特点">¶</a>2.1.2 特点</h3><ol><li>window 对象无需创建，即可使用其相关的方法</li><li>window 引用可以省略</li></ol><h3 id="2-1-3-相关方法"><a class="header-anchor" href="#2-1-3-相关方法">¶</a>2.1.3 相关方法</h3><p>（一）与弹出框有关的方法：</p><ul><li><code>alert()</code>：显示带有一段消息和一个确认按钮的警告框</li><li><code>confirm()</code>：显示带有一段消息以及确认按钮（若用户点击，则返回 <code>true</code>）和取消按钮（若用户点击，则返回 <code>false</code>）的对话框。</li><li><code>prompt()</code>：显示可提示用户输入的对话框，其返回为用户输入的值。</li></ul><p>（二）与打开关闭有关的方法：</p><ul><li><code>close()</code>：关闭浏览器窗口。“谁调用我，我关闭谁”</li><li><code>open()</code>：打开一个新的浏览器窗口，同时返回新的 window 对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;openBtn&quot;</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;打开窗口&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> openBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;openBtn&quot;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> newWindow;</span><br><span class="javascript">        openBtn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            newWindow = open(<span class="hljs-string">&quot;https://joydee.top/&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        </span><br><span class="javascript">        <span class="hljs-keyword">var</span> closeBtn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;closeBtn&quot;</span>);</span><br><span class="javascript">        closeBtn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            newWindow.close(); <span class="hljs-comment">//关闭刚打开的窗口</span></span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（三）与定时器有关的方法</p><ul><li><code>setTimeout(JS代码或方法对象, 毫秒值)</code>：在指定的毫秒数后调用函数或计算表达式（<strong>只会执行一次</strong>），它返回的是一个唯一标识，用于取消定时器。</li><li><code>clearTimeout()</code>：取消由 <code>setTimeout()</code> 方法设置的 <code>timeout</code></li><li><code>setInterval()</code>：按照指定的周期（以毫秒为单位）来调用传入的函数或计算表达式。</li><li><code>clearInterval()</code>：取消由 <code>setInterval()</code> 设置的 <code>timeout</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;openBtn&quot;</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;打开窗口&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> id = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&quot;fun();&quot;</span>, <span class="hljs-number">3000</span>); <span class="hljs-comment">//3s后，弹出该窗口</span></span><br><span class="javascript">        <span class="hljs-comment">// 或者直接传入方法对象：setTimeout(fun, 3000);</span></span><br><span class="javascript">        <span class="hljs-comment">// 关闭计时：clearTimeout(id); </span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&#x27;boom~~~&#x27;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="案例一：轮播图"><a class="header-anchor" href="#案例一：轮播图">¶</a>案例一：轮播图</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>轮播图<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> cnt = <span class="hljs-number">1</span>;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            cnt = cnt % <span class="hljs-number">4</span> + <span class="hljs-number">1</span>;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> img = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;myimg&quot;</span>); <span class="hljs-comment">//获取id为myimd的对象</span></span><br><span class="javascript">            img.src = <span class="hljs-string">&quot;./imgs/&quot;</span> + cnt + <span class="hljs-string">&quot;.svg&quot;</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-built_in">setInterval</span>(fun, <span class="hljs-number">2000</span>);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;myimg&quot;</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;./imgs/1.svg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50%&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/轮播图.gif" style="zoom:80%;" /><h2 id="案例二：首页自动跳转"><a class="header-anchor" href="#案例二：首页自动跳转">¶</a>案例二：首页自动跳转</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>自动跳转<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;curtime&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: dodgerblue&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>秒后，自动跳转到首页...<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> ss = <span class="hljs-number">5</span>, id;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showTime</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        ss--;</span><br><span class="javascript">        <span class="hljs-keyword">if</span>(ss &lt;= <span class="hljs-number">0</span>)&#123;</span><br><span class="javascript">            <span class="hljs-comment">//clearInterval(id);</span></span><br><span class="javascript">            location.href = <span class="hljs-string">&quot;https://joydee.top&quot;</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> curtime = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;curtime&quot;</span>);</span><br><span class="javascript">        curtime.innerHTML = ss + <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-comment">//使ss自动转为字符串类型</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">    id = <span class="hljs-built_in">setInterval</span>(showTime, <span class="hljs-number">1000</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/首页自动跳转.gif"/><h2 id="2-2-location：地址栏对象"><a class="header-anchor" href="#2-2-location：地址栏对象">¶</a>2.2 location：地址栏对象</h2><p>（一）创建（获取）：</p><ul><li>直接 <code>window.location</code> 或者不使用window的前缀： <code>location</code></li></ul><p>（二）属性：</p><ul><li><code>href</code>：设置或返回完整的 URL</li></ul><p>（三）方法：</p><ul><li><code>reload()</code>：重新加载当前文档，即刷新</li></ul><h2 id="2-3-history：历史记录对象"><a class="header-anchor" href="#2-3-history：历史记录对象">¶</a>2.3 history：历史记录对象</h2><p>（一）创建（获取）：</p><ul><li>直接 <code>window.history</code> 或者不使用window的前缀： <code>history</code></li></ul><p>（二）属性：</p><ul><li><code>length</code>：返回当前窗口历史列表中的 URL 数量</li></ul><p>（三）方法：</p><ul><li><p><code>back()</code>：加载 <code>history</code> 列表中的前一个 URL。</p></li><li><p><code>forward()</code>：加载 <code>history</code> 列表中的下一个 URL。</p></li><li><p><code>go(参数)</code>：加载 <code>history</code> 列表中的某个具体页面。其参数：</p><ul><li><p>正数：前进几个历史记录</p></li><li><p>负数：后退几个历史记录</p></li></ul></li></ul><h1 id="Chapter-3-DOM-文档对象模型"><a class="header-anchor" href="#Chapter-3-DOM-文档对象模型">¶</a>Chapter 3. DOM-文档对象模型</h1><p>网页被加载时，浏览器会创建页面的文档对象模型（<strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel），即将标记语言文档的各个组成部分，封装为对象。</p><p>W3C DOM 标准被分为 三个部分：</p><ul><li>核心 DOM：针对任何结构化文档的标准模型<ul><li><code>Document</code>：文档对象</li><li><code>Element</code>：元素对象</li><li><code>Attribute</code>：属性对象</li><li><code>Text</code>：文本对象</li><li><code>Comment</code>：注释对象</li><li><code>Node</code>：节点对象，其他五个的父对象</li></ul></li><li>XML DOM：针对 XML 文档的标准模型</li><li>HTML DOM：针对 HTML 文档的标准模型</li></ul><h2 id="3-1-核心-DOM-模型"><a class="header-anchor" href="#3-1-核心-DOM-模型">¶</a>3.1 核心 DOM 模型</h2><h3 id="3-1-1-Document：文档对象"><a class="header-anchor" href="#3-1-1-Document：文档对象">¶</a>3.1.1 Document：文档对象</h3><p>（一）在 HTML DOM 模型中，可以使用 window 对象来获取：<code>window.document</code>，也可省略前缀：<code>document</code></p><p>（二）方法：</p><ol><li>获取 <code>Element</code> 对象：<ul><li><code>getElementById()</code>：根据 <code>id</code> 属性值（一般唯一）来获取元素对象</li><li><code>getElementsByTagName</code>：根据元素名称获取元素对象<strong>们</strong>（注意方法名中的 <code>s</code>），返回值是一个数组。</li><li><code>getElementsByClassName()</code>：根据 <code>class</code> 属性获取元素对象们，返回值是一个数组</li><li><code>getElementByName()</code>：根据 <code>name</code> 属性值获取元素对象们，返回值也是一个数组</li></ul></li><li>创建其他 DOM 对象：<ul><li><code>createAttribute(name)</code></li><li><code>createComment()</code></li><li><code>createElement()</code></li><li><code>createTextNode()</code></li></ul></li></ol><h3 id="3-1-2-Element-元素对象"><a class="header-anchor" href="#3-1-2-Element-元素对象">¶</a>3.1.2 Element 元素对象</h3><p>（一）方法：</p><ul><li><code>removeAttribute()</code>：删除属性</li><li><code>setAttribute()</code>：设置属性</li></ul><h3 id="3-1-3-Node-节点对象"><a class="header-anchor" href="#3-1-3-Node-节点对象">¶</a>3.1.3 Node 节点对象</h3><p>（一）特点：所有DOM对象都可被认为是一个节点</p><p>（二）属性：<code>parentNode</code>：返回节点的父节点</p><p>（三）方法：CRUD DOM树：</p><ul><li><code>appendChild()</code>：向节点的子节点列表的结尾添加子节点</li><li><code>removeChild()</code>：删除（并返回）当前节点的指定子节点</li><li><code>replaceChild()</code>：用新节点替换一个子节点。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>自动跳转<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-id">#div1</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-id">#div2</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;div1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;div2&quot;</span>&gt;</span>我是div2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        我是div1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;javascript:void(0);&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;del&quot;</span>&gt;</span> 删除子节点 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--为了保证超链接被点击但不发生页面的跳转，href需如上写法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> element_a = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;del&quot;</span>);</span><br><span class="javascript">    element_a.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> mydiv1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;div1&quot;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> mydiv2 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;div2&quot;</span>);</span><br><span class="javascript">        mydiv1.removeChild(mydiv2);</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/删除节点.gif"/><h2 id="3-2-HTML-DOM"><a class="header-anchor" href="#3-2-HTML-DOM">¶</a>3.2 HTML DOM</h2><p>通过 HTML DOM，可访问 JavaScript HTML 文档的所有元素。</p><p>HTML DOM 模型被构造为<strong>对象</strong>的树：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210218220843.png" style="zoom:80%;" /><p>通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML。</p><ul><li><p>JavaScript 能够改变页面中的所有 HTML 元素</p><ul><li><strong>通过 <code>innerHTML</code> 来修改标签体的值</strong></li></ul></li><li><p>JavaScript 能够改变页面中的所有 HTML 属性</p></li><li><p>JavaScript 能够改变页面中的所有 CSS 样式</p><p>方式一：使用 元素的 <code>style</code> 属性来设置</p><p>方式二：提前定义好<strong>类选择器</strong>的样式，通过元素的 <code>className</code> 属性来设置其 <code>class</code> 属性值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.cls1</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid dodgerblue;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;div1&quot;</span>&gt;</span><br>        控制样式方式一<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;div2&quot;</span>&gt;</span><br>        控制样式方式二<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;div1&quot;</span>);</span><br><span class="javascript">    div1.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        div1.style.border = <span class="hljs-string">&quot;3px solid black&quot;</span>;</span><br><span class="javascript">        div1.style.width = <span class="hljs-string">&quot;200px&quot;</span>;</span><br><span class="javascript">        div1.style.fontSize = <span class="hljs-string">&quot;20px&quot;</span>;</span><br><span class="javascript">        <span class="hljs-comment">// font-size 对应于 fontSize</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> div2 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;div2&quot;</span>);</span><br><span class="javascript">    div2.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        div2.className = <span class="hljs-string">&quot;cls1&quot;</span>;</span><br><span class="javascript">        <span class="hljs-comment">//原本的div2不属于其他的类，现在通过特定的类，即可修改相应的样式</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/控制样式.gif" style="zoom:67%;" /></li><li><p>JavaScript 能够对页面中的所有事件做出反应</p></li></ul><h2 id="案例：动态表格"><a class="header-anchor" href="#案例：动态表格">¶</a>案例：动态表格</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>动态表格<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">table</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: auto;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">td</span>,<span class="hljs-selector-tag">th</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入编号&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入姓名&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gender&quot;</span>  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入性别&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn_add&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>学生信息表<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Luffy<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0);&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;delTr(this);&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">//1. 获取按钮</span></span><br><span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn_add&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">//2. 获取输入文本框的内容</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> id = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;id&quot;</span>).value;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> name = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;name&quot;</span>).value;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> gender = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;gender&quot;</span>).value;</span><br><span class="javascript">        <span class="hljs-comment">//3. 获取table</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> table = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;table&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="javascript">        table.innerHTML += <span class="hljs-string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="javascript">            <span class="hljs-string">&quot;        &lt;td&gt;&quot;</span> + id + <span class="hljs-string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="javascript">            <span class="hljs-string">&quot;        &lt;td&gt;&quot;</span> + name + <span class="hljs-string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="javascript">            <span class="hljs-string">&quot;        &lt;td&gt;&quot;</span> + gender + <span class="hljs-string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="javascript">            <span class="hljs-string">&quot;        &lt;td&gt;&lt;a href=\&quot;javascript:void(0);\&quot; onclick=\&quot;delTr(this);\&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="javascript">            <span class="hljs-string">&quot;    &lt;/tr&gt;&quot;</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delTr</span>(<span class="hljs-params">obj</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> table = obj.parentNode.parentNode.parentNode;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> tr = obj.parentNode.parentNode;</span><br><span class="javascript">        table.removeChild(tr);</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/动态表格.gif" style="zoom:67%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;s&gt;深圳的小梅沙真的治愈啊&lt;/s&gt;&lt;/p&gt;
&lt;h1 id=&quot;Chapter-1-事件&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chapter-1-事件&quot;&gt;¶&lt;/a&gt;Chapter 1. 事件&lt;/h1&gt;
&lt;h2 id=&quot;1-1-事件监听机制&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Web前端" scheme="https://j-strawhat.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://j-strawhat.github.io/categories/Web%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JS" scheme="https://j-strawhat.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>「JavaScript学习笔记01」基础语法</title>
    <link href="https://j-strawhat.github.io/posts/322f2218/"/>
    <id>https://j-strawhat.github.io/posts/322f2218/</id>
    <published>2021-02-10T07:19:00.000Z</published>
    <updated>2021-07-20T10:02:13.913Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTML">HTML</a>是一种标记语言，用来结构化我们的网页内容并赋予内容含义，例如定义段落、标题和数据表，或在页面中嵌入图片和视频。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CSS">CSS</a> 是一种样式规则语言，可将样式应用于 HTML 内容， 例如设置背景颜色和字体，在多个列中布局内容。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/JavaScript">JavaScript</a> 是一种脚本语言，可以用来创建动态更新的内容，控制多媒体，制作图像动画，等等。</p></blockquote><h1 id="Chapte-1-基础语法"><a class="header-anchor" href="#Chapte-1-基础语法">¶</a>Chapte 1. 基础语法</h1><h2 id="1-1-概述"><a class="header-anchor" href="#1-1-概述">¶</a>1.1 概述</h2><p><strong>JavaScript 是轻量级解释型语言</strong>。它是可插入 HTML 页面的编程代码，每一个浏览器都有 JavaScript 的解析引擎，故 JavaScript 不需要编译，直接就能被浏览器解析执行了（即，它是运行在浏览器中的<strong>解释型</strong>的编程语言，“编译过程发生在代码运行中，而非之前”）。</p><blockquote><p><strong>关于 解释(interpret) 与 编译(compile)：</strong></p><p>在<strong>解释型</strong>语言中，代码自上而下运行，且<strong>实时返回运行结果</strong>。代码在由浏览器执行前，无需将其转化为其他形式，代码直接以 文本格式 被接收和处理。</p><p>对于<strong>编译型</strong>语言，需将其代码转化（编译）成另一种形式才能运行。比如 C/C++ 先被编译成汇编语言，然后才能由计算机运行。程序将以二进制格式（由程序源代码产生的）运行。</p></blockquote><p>JavaScript 是<strong>客户端</strong>脚本语言，客户端代码是在用户的电脑上运行的代码，在浏览一个网页时，它的客户端代码就会被下载，然后由浏览器来运行并展示。</p><blockquote><p>当然，流行的服务器端 web 语言也包括了 JavaScript，本文着重讨论客户端 JavaScript</p></blockquote><p>JavaScript 支持<strong>面向对象程序设计</strong>，命令式编程，以及函数式编程。它提供语法来操控文本、数组、日期以及正则表达式等，不支持 I/O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。</p><blockquote><p><strong>关于 动态代码 与 静态代码：</strong></p><p><strong>“动态”</strong> 是指是指通过按需生成新内容来更新 web 页面 / 应用，使得不同环境下显示不同内容。“动态” 既适用于描述服务器端语言，在服务器上动态生成新内容，（比如从数据库中提取信息） ；也适用于 客户端 JavaScript，在用户端浏览器中动态生成新内容（比如说创建一个新的 HTML 表格，用从服务器请求到的数据填充，然后在网页中向用户展示这个表格）。</p><p>**“静态”**页面是指没有动态更新内容的页面。</p></blockquote><p>JavaScript常用来完成以下任务：</p><ul><li>嵌入动态文本于HTML页面，为HTML页面添加<strong>交互行为</strong></li><li>对浏览器事件作出响应</li><li>读写HTML元素</li><li>在数据被提交到服务器之前验证数据</li><li>检测访客的浏览器信息</li><li>控制<a href="https://www.wiki-wiki.top/baike-Cookie">cookie</a>，包括创建和修改等</li></ul><p>目前，它已经由ECMA（欧洲电脑制造商协会）通过<a href="https://www.wiki-wiki.top/baike-ECMAScript">ECMAScript</a>实现语言的标准化。</p><h2 id="1-2-与-HTML-结合的方式"><a class="header-anchor" href="#1-2-与-HTML-结合的方式">¶</a>1.2 与 HTML 结合的方式</h2><ul><li><p>内部嵌入 JS 代码：定义 <code>&lt;script&gt;</code>，标签体内容即是 JS 代码</p></li><li><p>外部嵌入 JS 代码：定义 <code>&lt;script&gt;</code>，通过其 <code>src</code> 属性来引入外部的 js 文件。</p></li></ul><blockquote><p>注意：<code>&lt;script&gt;</code>，可以定义多个，同时能够定义在 html 页面的“任何地方”，但定义的位置会对执行顺序有所影响。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;Hello, World!&quot;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;Hello, World!&quot;</span>);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;js/demo01.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;Hello, World!&quot;</span>);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>JS 的注释与 C/C++、Java 相同，<code>//</code> 单行注释、<code>/* */</code> 多行注释。</p></blockquote><h2 id="1-3-变量与数据类型"><a class="header-anchor" href="#1-3-变量与数据类型">¶</a>1.3 变量与数据类型</h2><p>变量仅仅是一个用于<strong>存储数值的容器</strong>（不是数值本身），它能够存储任何东西，包括字符串和数字，甚至是函数。</p><h3 id="1-3-1-变量声明与初始化"><a class="header-anchor" href="#1-3-1-变量声明与初始化">¶</a>1.3.1 变量声明与初始化</h3><p>使用 <code>var</code> 或 <code>let</code> 关键词来声明变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myName;<br><span class="hljs-keyword">let</span> myAge;<br></code></pre></td></tr></table></figure><blockquote><p>变量的声明可以不使用关键字，此时声明的变量是全局变量；关于 <code>let</code> 与 <code>var</code> 的作用域规则，参见：<a href="https://www.runoob.com/js/js-variables.html">https://www.runoob.com/js/js-variables.html</a></p><p>如果已经被声明（即已经存在），那么重复声明（即除了变量的非首次声明）会被跳过，不再执行声明的操作。</p></blockquote><p>上面两个变量声明后，没有数值，是个空的容器（ <code>undefined</code>），若需要为变量赋值进行初始化，使用等号 <code>=</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">myName = <span class="hljs-string">&#x27;JoyDee&#x27;</span>;<br>myAge = <span class="hljs-number">37</span>;<br></code></pre></td></tr></table></figure><p>或者，可以像下面这样在声明变量的同时给其初始化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> myName = <span class="hljs-string">&#x27;JoyDee&#x27;</span>;<br><span class="hljs-keyword">var</span> myAge = <span class="hljs-number">37</span>;<br></code></pre></td></tr></table></figure><h3 id="1-3-2-数据类型"><a class="header-anchor" href="#1-3-2-数据类型">¶</a>1.3.2 数据类型</h3><blockquote><p>编程语言的类型系统分为强类型（strongly typed）和弱类型（weakly typed）两种，目前没有明确的定义，但主要用以描述编程语言对于混入不同资料类型的值进行运算时的处理方式。</p></blockquote><p>JavaScript 是弱类型的，这意味着无需指定变量将包含什么数据类型，同时，变量可以被隐式地转换为另一个类型。</p><p>JavaScript 数据类型分两种：</p><ul><li><p>基本数据类型：</p><ul><li><code>number</code>：数字，包括：整数、小数、NaN（<em>not a number</em>）</li><li><code>string</code>：字符串，例如 <code>&quot;abc&quot;</code>、<code>&quot;a&quot;</code>、<code>'abc'</code></li><li><code>boolean</code>：取值仅有 <code>true</code> 或 <code>false</code></li><li><code>null</code>：主动释放一个变量引用的<strong>对象</strong>，表示一个变量不再指向任何对象地址。</li><li><code>undefined</code>：未定义，若一个变量没有给初始化值，则会被<strong>默认</strong>赋值为 <code>undefined</code>。</li></ul><blockquote><p>不同于 Java，JS 开辟变量存储空间时，并不会定义该空间将来要存储的数据类型，故更新变量值时，其数据类型是不限定的。</p></blockquote></li><li><p>引用数据类型：对象</p><ul><li><code>Function</code></li><li><code>Array</code></li><li><code>Boolean</code></li><li><code>Date</code></li><li><code>Math</code></li><li><code>Number</code></li><li><code>String</code></li><li><code>RegExp</code>：正则表达式对象</li><li><code>Global</code>：全局对象</li></ul><blockquote><p>在下面的章节会重点讨论这些对象是如何创建、使用。</p></blockquote></li></ul><p>使用举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> a = <span class="hljs-number">23333</span>;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> b = <span class="hljs-literal">NaN</span>;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> c = <span class="hljs-literal">false</span>;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> obj = <span class="hljs-literal">null</span>;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> obj2 = <span class="hljs-literal">undefined</span>;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> obj3;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.write(a + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">//23333</span></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.write(b + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">//NaN</span></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.write(c + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">//false</span></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.write(obj + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">//null</span></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.write(obj2 + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">//undefined</span></span><br><span class="javascript">        <span class="hljs-built_in">document</span>.write(obj3 + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">//undefined</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> num1 = <span class="hljs-number">1</span>, num2 = <span class="hljs-number">3</span>, num3 = <span class="hljs-number">4</span>;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.write(num1 / num2 + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span> + num3 % num2 + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">//1</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> res = <span class="hljs-string">&quot;122&quot;</span> &lt; <span class="hljs-number">123</span>;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.write(res + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">//true</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>typeof</code> 这一特殊的操作符，会返回所传递给它的变量的数据类型。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> myNumber = <span class="hljs-string">&#x27;aaa&#x27;</span>; <br><span class="hljs-keyword">typeof</span> myNumber; <span class="hljs-comment">// oops, this is a string</span><br>myNumber = <span class="hljs-number">500</span>; <br><span class="hljs-keyword">typeof</span> myNumber; <span class="hljs-comment">// much better — now this is a number</span><br></code></pre></td></tr></table></figure><p>注意，<code>null</code> 经 <code>typeof</code> 运算后得到的返回结果为 <code>object</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> tt = <span class="hljs-literal">null</span>;<br><span class="hljs-built_in">document</span>.write(<span class="hljs-keyword">typeof</span> (tt)); <span class="hljs-comment">//object</span><br></code></pre></td></tr></table></figure><h2 id="1-4-运算符"><a class="header-anchor" href="#1-4-运算符">¶</a>1.4 运算符</h2><h3 id="1-4-1-一元运算符"><a class="header-anchor" href="#1-4-1-一元运算符">¶</a>1.4.1 一元运算符</h3><p><code>++</code>，<code>–-</code>：自增/自减</p><p><code>+</code>，<code>-</code>：正负号</p><blockquote><p>注意，在 JS 中，若运算数不是运算符所要求的类型，那么 JS 引擎会自动地将运算数进行类型转换。</p></blockquote><p>其他类型自动转 <code>number</code>：</p><ul><li><p><code>string</code> —&gt; <code>number</code>：按照字面值转换，若字面值不是数字，则转为 <code>NaN</code>，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> b = + <span class="hljs-string">&quot;abc123&quot;</span>; <span class="hljs-comment">//b 则转换为数字类型的 NaN</span><br><span class="hljs-keyword">var</span> c = + <span class="hljs-string">&quot;123&quot;</span>; <span class="hljs-comment">//b 转换为（数字类型的）整数</span><br></code></pre></td></tr></table></figure></li><li><p><code>boolean</code>—&gt;<code>number</code>：<code>true</code> 转为 1，<code>false</code> 转为 0</p></li></ul><p>附：其他类型转 <code>boolean</code>：</p><ul><li><code>number</code>—&gt;<code>boolean</code>：0 或 <code>NaN</code> 为假，其他为真（区别于 Java）</li><li><code>string</code>—&gt;<code>boolean</code>：除了空字符串（<code>&quot;&quot;</code>），其他均为 <code>true</code></li><li><code>null</code>、<code>undefined</code> 均为 <code>false</code></li><li><strong>所有对象均为 <code>true</code></strong></li></ul><h3 id="1-4-2-算术运算符、赋值运算符（略）"><a class="header-anchor" href="#1-4-2-算术运算符、赋值运算符（略）">¶</a>1.4.2 算术运算符、赋值运算符（略）</h3><h3 id="1-4-3-比较运算符"><a class="header-anchor" href="#1-4-3-比较运算符">¶</a>1.4.3 比较运算符</h3><p><code>&gt;</code>，<code>&lt;</code>，<code>&gt;=</code>，<code>&lt;=</code>，<code>==</code>，<strong><code>===</code>（全等于）</strong></p><ul><li><p>类型相同：直接比较</p><blockquote><p>字符串间是以字典序进行比较。</p></blockquote></li><li><p>类型不同：先进行<strong>类型转换</strong>，再比较。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> res = <span class="hljs-string">&quot;122&quot;</span> &lt; <span class="hljs-number">123</span>; <span class="hljs-comment">// res 值为 true</span><br></code></pre></td></tr></table></figure><p>对于 <code>===</code>，是先判断类型是否一致，若不一致，则返回为 <code>false</code>。再者，判断数值。</p></li></ul><h3 id="1-4-4-逻辑运算符"><a class="header-anchor" href="#1-4-4-逻辑运算符">¶</a>1.4.4 逻辑运算符</h3><p><code>&amp;&amp;</code>，<code>||</code>，<code>!</code></p><h3 id="1-4-6-三元运算符"><a class="header-anchor" href="#1-4-6-三元运算符">¶</a>1.4.6 三元运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">3</span>, b = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">var</span> c = a &gt; b ? <span class="hljs-string">&quot;a was bigger&quot;</span> : <span class="hljs-string">&quot;b was bigger&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="1-5-流程控制语句"><a class="header-anchor" href="#1-5-流程控制语句">¶</a>1.5 流程控制语句</h2><p>如 <code>if...else...</code>、<code>while</code>、<code>do..while</code>、<code>for</code> 等 与 Java 类似</p><p>但是，对于 <code>switch</code> 语句：</p><ul><li><p>在 Java 中，<code>switch</code> 语句只可接受的数据类型：<code>byte</code>、<code>int</code>、<code>short</code>、<code>char</code>、枚举（Java 1.5）、<code>String</code>（Java 1.7）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(变量):<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>:<br>    ...<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>:<br>    ...<br></code></pre></td></tr></table></figure></li><li><p>在 JS 中，<code>switch</code> 语句可接受<strong>任意</strong>的原始数据类型。</p></li></ul><h3 id="案例：九九乘法表"><a class="header-anchor" href="#案例：九九乘法表">¶</a>案例：九九乘法表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>99乘法表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">td</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;table  align=&#x27;center&#x27;&gt;&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//1.完成基本的for循环嵌套，展示乘法表</span></span><br><span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span> ; i++) &#123;</span><br><span class="javascript">                <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>);</span><br><span class="javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">1</span>; j &lt;=i ; j++) &#123;</span><br><span class="javascript">                    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;td&gt;&quot;</span>);</span><br><span class="javascript">                    <span class="hljs-comment">//输出  1 * 1 = 1</span></span><br><span class="javascript">                    <span class="hljs-built_in">document</span>.write(i + <span class="hljs-string">&quot; * &quot;</span> + j </span><br><span class="javascript">                                   + <span class="hljs-string">&quot; = &quot;</span> + ( i*j) </span><br><span class="javascript">                                   +<span class="hljs-string">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>);</span><br><span class="javascript">                    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//2.完成表格嵌套</span></span><br><span class="javascript">            <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;/table&gt;&quot;</span>);</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-6-基本对象"><a class="header-anchor" href="#1-6-基本对象">¶</a>1.6 基本对象</h2><h3 id="1-6-1-Function-函数（方法）对象"><a class="header-anchor" href="#1-6-1-Function-函数（方法）对象">¶</a>1.6.1 Function 函数（方法）对象</h3><p>函数(方法)对象。</p><p>（一）创建方式：有两种：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> 方法名称(<span class="hljs-params">形式参数列表</span>)</span>&#123;<br>    方法体<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 方法名 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">形式参数列表</span>)</span>&#123;<br>    方法体<br>&#125;<br></code></pre></td></tr></table></figure><p>（二）调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">方法名称(实际参数列表);<br></code></pre></td></tr></table></figure><p>（三）属性：</p><ul><li><code>length</code>：它记录 形式参数 的<strong>个数</strong>。</li></ul><p>（四）特点：</p><ol><li><p>方法定义时，形参的类型、返回值类型均不用写（都是 <code>var</code> 变量）</p></li><li><p>方法是一个对象，若定义另一个名称相同的方法，会覆盖之前定义的方法。</p></li><li><p>在 JS 中，方法的调用 只与方法的名称有关，和<strong>参数列表无关</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun2</span>(<span class="hljs-params">a, b</span>)</span>&#123;<br>    alert(a);<br>&#125;<br><br>fun(<span class="hljs-number">3</span>);<br>fun(); <span class="hljs-comment">//同样能够执行</span><br>fun(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <br>fun(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure></li><li><p>在方法声明中有一个隐藏的内置对象（数组）<code>arguments</code>，封装了所有的实际参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 求任意个数的和 */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++)&#123;<br>        res += <span class="hljs-built_in">arguments</span>[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-keyword">var</span> a = add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">//可以传任意多个参数</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="1-6-2-Array-数组对象"><a class="header-anchor" href="#1-6-2-Array-数组对象">¶</a>1.6.2 Array 数组对象</h3><p>（一）创建方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(元素列表); <span class="hljs-comment">// 方式一</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(默认长度); <span class="hljs-comment">// 方式二</span><br><span class="hljs-keyword">var</span> arr = [元素列表]; <span class="hljs-comment">// 方式三</span><br></code></pre></td></tr></table></figure><p>（二）属性：</p><ul><li><code>length</code>：数组的长度</li></ul><p>（三）相关方法：</p><ul><li><p><code>join(参数)</code>：将数组中的元素按照指定的分隔符拼接为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-literal">true</span>];<br><span class="hljs-built_in">document</span>.write(arr.join() + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">//不传参数则默认用逗号分隔—— &quot;1,abc,true&quot;</span><br><span class="hljs-built_in">document</span>.write(arr.join(--) + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">//字符串变为 &quot;1--abc--true&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><code>push()</code>：向数组的末尾添加一个或更多元素，并返回新的长度。</p></li></ul><p>（四）特点：一个数组中的元素类型不限定，且长度是可变的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-literal">true</span>];<br>arr[<span class="hljs-number">10</span>] = <span class="hljs-string">&quot;2333&quot;</span> <br><span class="hljs-built_in">document</span>.write(arr[<span class="hljs-number">10</span>] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">//输出 2333</span><br><span class="hljs-built_in">document</span>.write(arr[<span class="hljs-number">9</span>] + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">//输出 undefined</span><br></code></pre></td></tr></table></figure><h3 id="1-6-3-Date-日期对象"><a class="header-anchor" href="#1-6-3-Date-日期对象">¶</a>1.6.3 Date 日期对象</h3><p>（一）创建方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> mydate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br></code></pre></td></tr></table></figure><p>（二）方法：</p><ul><li><code>toLocalString()</code>：返回当前 <code>Date</code> 对象对应的本地时间的字符串</li><li><code>getTime()</code>：获取毫秒值，返回当前日期对象描述的时间到 1970年1月1日零点的毫秒值之差</li></ul><h3 id="1-6-4-Math-数学对象"><a class="header-anchor" href="#1-6-4-Math-数学对象">¶</a>1.6.4 Math 数学对象</h3><p>（一）创建方式：</p><p><code>Math</code> 对象在使用这个对象之前对它进行定义，即可直接调用其方法。即：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Math</span>.方法名();<br></code></pre></td></tr></table></figure><p>（二）属性：</p><ul><li><code>PI</code></li></ul><p>（三）方法：</p><ul><li><code>random()</code>：返回介于 0（包含） ~ 1（不包含） 之间的一个随机数</li><li><code>ceil()</code>：对传入的参数进行上舍入</li><li><code>floor()</code>：对传入的参数进行下舍入</li><li><code>round()</code>：对传入的参数进行四舍五入</li></ul><h3 id="1-6-5-RegExp-正则表达式对象"><a class="header-anchor" href="#1-6-5-RegExp-正则表达式对象">¶</a>1.6.5 RegExp 正则表达式对象</h3><p>（零）正则表达式：定义字符串的组成规则</p><ol><li><p>单个字符：<code>[]</code>，例如：<code>[a]</code>、<code>[ab]</code>、<code>[a-zA-Z0-9_]</code></p><p>利用特殊符号代表的单个字符：</p><ul><li><code>\d</code>：单个数字字符，从 <code>[0-9]</code> 取值</li><li><strong><code>\w</code></strong>：单个单词字符，<code>[a-zA-Z0-9_]</code></li></ul></li><li><p>量词符号：</p><ul><li><code>?</code>：表示出现 0 次或 1 次</li><li><code>*</code>：表示出现 0 次或 多次</li><li><code>+</code>：表示出现 1 次或 多次</li><li><code>&#123;m, n&#125;</code>：表示出现  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[m, n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span> 次数量，<code>&#123;, n&#125;</code> 代表最多 n 次，<code>&#123;m, n&#125;</code> 代表 最少 m 次；<strong><code>&#123;x&#125;</code> 代表 当且仅当 x 次。</strong></li></ul></li><li><p>始末符号：</p><ul><li><code>^</code>：开始，<code>^n</code> 匹配任何开头为 n 的字符串</li><li><code>$</code>：结束，<code>n$</code> 匹配任何结尾为 n 的字符串</li></ul></li><li><p>修饰符：</p><ul><li><code>i</code>：执行对大小写不敏感的匹配</li><li><code>g</code>：执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）</li><li><code>m</code>：执行多行匹配</li></ul></li></ol><p>（二）正则对象的创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;正则表达式&quot;</span>); <span class="hljs-comment">//方式一</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/正则表达式/</span>;<br></code></pre></td></tr></table></figure><p>（三）正则对象的相关方法</p><ul><li><p><code>test(待检验的字符串)</code>：验证指定的字符串是否符合正则表达式定义的规范</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^w&#123;6, 12&#125;$/</span>;<br><span class="hljs-keyword">var</span> reg2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;^\\w&#123;6, 12&#125;$&quot;</span>); <span class="hljs-comment">//字符串方式定义的话，要注意转义字符，为了让\w不带转义，需要用\\w</span><br><span class="hljs-keyword">var</span> username = <span class="hljs-string">&quot;Luffy&quot;</span>;<br><span class="hljs-keyword">var</span> flag = reg.test(username); <span class="hljs-comment">//返回 true</span><br></code></pre></td></tr></table></figure><p>检验是否为中文名称组成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ischina</span>(<span class="hljs-params">str</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> reg=<span class="hljs-regexp">/^[\u4E00-\u9FA5]&#123;2,4&#125;$/</span>;   <span class="hljs-comment">/*定义验证表达式*/</span><br>    <span class="hljs-keyword">return</span> reg.test(str);     <span class="hljs-comment">/*进行验证*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-6-6-Global-全局对象"><a class="header-anchor" href="#1-6-6-Global-全局对象">¶</a>1.6.6 Global 全局对象</h3><p><code>Global</code> 中封装的方法不需要创建对象，即能够直接调用。即直接 <code>方法名()</code>。</p><p>（一）相关方法：</p><ul><li><p><code>encodeURI()</code>：URL 编码，编码后，它输出符号的 UTF-8 （可能取决于网页的<code>charset</code> 属性）形式，并且在每个字节前加上 <code>%</code>。</p></li><li><p><code>decodeURI()</code>：URL 解码</p></li><li><p><code>encodeURIComponent()</code>：URL 编码，但编码的字符更多，<code>; / ? : @ &amp; = + $ , #</code>，这些在 <code>encodeURI()</code>中不被编码的符号，在该方法中会统统会被编码。</p></li><li><p><code>decodeURIComponent()</code>：URL 解码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> tmpstr = <span class="hljs-built_in">encodeURI</span>(<span class="hljs-string">&quot;你是什么王来着?&quot;</span>);<br><span class="hljs-keyword">var</span> tmpstr2 = <span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-string">&quot;你是什么王来着?&quot;</span>); <br><span class="hljs-comment">//输出为%E4%BD%A0%E6%98%AF%E4%BB%80%E4%B9%88%E7%8E%8B%E6%9D%A5%E7%9D%80?</span><br><span class="hljs-built_in">document</span>.write(tmpstr + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span> + tmpstr2);<br><span class="hljs-comment">//输出为%E4%BD%A0%E6%98%AF%E4%BB%80%E4%B9%88%E7%8E%8B%E6%9D%A5%E7%9D%80%3F</span><br></code></pre></td></tr></table></figure></li><li><p><code>parseInt()</code>：将字符串转为数字。</p><blockquote><p>该方法调用的过程中，会逐一地判断每个字符是否为数字，直到不是数字为止，将前面的数字部分转为 <code>number</code></p></blockquote></li><li><p><code>isNaN()</code>：判断一个值 是否 为 <code>NaN</code>。</p><blockquote><p>由于 <code>NaN</code> “六亲不认”，但凡用 <code>NaN</code> 与 其他值 进行<code>==</code> 比较都会返回 <code>false</code> 。</p></blockquote></li><li><p><code>eval()</code>：传入字符串，并将该字符串作为 JS 代码来执行。</p></li></ul><h3 id="1-6-7-Number-对象、String-对象、Boolean-对象（略）"><a class="header-anchor" href="#1-6-7-Number-对象、String-对象、Boolean-对象（略）">¶</a>1.6.7 Number 对象、String 对象、Boolean 对象（略）</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Glossary/HTML&quot;&gt;HTML&lt;/a&gt;是一种标记语言，用来结构化我们的网页内容并赋予内容含义，例如定义段落、标题和数据表，或在页面中嵌入图片</summary>
      
    
    
    
    <category term="Web前端" scheme="https://j-strawhat.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://j-strawhat.github.io/categories/Web%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="JS" scheme="https://j-strawhat.github.io/tags/JS/"/>
    
  </entry>
  
</feed>
