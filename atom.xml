<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoyDee&#39;s Blog</title>
  
  
  <link href="https://www.joydee.top/atom.xml" rel="self"/>
  
  <link href="https://www.joydee.top/"/>
  <updated>2021-09-07T07:17:26.207Z</updated>
  <id>https://www.joydee.top/</id>
  
  <author>
    <name>Joy Dee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tensor基础操作</title>
    <link href="https://www.joydee.top/posts/cd115ce8/"/>
    <id>https://www.joydee.top/posts/cd115ce8/</id>
    <published>2021-07-30T04:16:41.000Z</published>
    <updated>2021-09-07T07:17:26.207Z</updated>
    
    <content type="html"><![CDATA[<p>PyTorch 的重要组成部分是张量类（<code>Tensor</code>），即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> 维数组。</p><blockquote><p>张量是数学中的概念，可以理解为：<code>list</code>是张量在计算机中实现的一种数据结构</p></blockquote><p>引入方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br></code></pre></td></tr></table></figure><p>它与 Numpy 的 <code>ndarray</code> 类似，然而却能够得到GPU的支持加速计算，并且能支持自动微分。</p><p>它包含 <code>data</code> 、 <code>grad</code>（属于 <code>Tensor</code>）</p><img src="https://cdn.joydee.cloud//20210906213205.png" style="zoom:67%;" /><blockquote><p>取 <code>Tensor</code> 中的 <code>data</code>，就避免建立计算图（不再计算梯度）；同样，取 <code>Tensor</code> 的 <code>grad.item()</code>，也能够避免建立计算图</p></blockquote><h2 id="入门"><a class="header-anchor" href="#入门">¶</a>入门</h2><h3 id="创建"><a class="header-anchor" href="#创建">¶</a>创建</h3><p>创建行向量，除非额外指定，否则新张量存储在内存中，并采用基于CPU的计算</p><blockquote><p>在深度学习中，浮点数尽量使用<code>32</code>位</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 包含从0开始的前15个整数，默认创建为浮点数</span><br>x = torch.arange(<span class="hljs-number">15</span>)<br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-comment"># 传入Python嵌套列表，最外层列表对应于轴0，内层列表对应轴1</span><br>y = torch.tensor([[<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">0</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])<br>tensor([[ 2,  1,  4,  3],<br>        [ 0, -2,  3,  4]])<br></code></pre></td></tr></table></figure><p>使用全0、全1、其他常量或者从特定分布中随机采样的数字来初始化矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(torch.zeros((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))) <span class="hljs-comment"># 三维度的全零矩阵</span><br><span class="hljs-built_in">print</span>(torch.ones((<span class="hljs-number">1</span>, <span class="hljs-number">5</span>))) <span class="hljs-comment"># 两维度的全1矩阵</span><br><span class="hljs-built_in">print</span>(torch.zeros_like(x)) <span class="hljs-comment"># 形状与x相同，元素全为0的矩阵</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tensor([[[0., 0., 0., 0.],<br>         [0., 0., 0., 0.],<br>         [0., 0., 0., 0.]],<br><br>        [[0., 0., 0., 0.],<br>         [0., 0., 0., 0.],<br>         [0., 0., 0., 0.]]])<br>         <br>tensor([[1., 1., 1., 1., 1.]])<br></code></pre></td></tr></table></figure><p>创建张量，其每个元素满足都从均值为0、标准差为1的标准高斯分布中随机采样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.randn(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tensor([[ 0.1094,  0.1251, -0.0131],<br>        [ 0.9402, -1.3864,  0.8064]])<br></code></pre></td></tr></table></figure><p>张量的拷贝，能够使用 <code>.clone()</code>，该方法能够分配新内存，将下面的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">A</mi></mrow><annotation encoding="application/x-tex">\mathbf{A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord mathbf">A</span></span></span></span> 分配给 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">B</mi></mrow><annotation encoding="application/x-tex">\mathbf{B}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord mathbf">B</span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">A = torch.arange(<span class="hljs-number">20</span>, dtype=torch.float32).reshape(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>)<br>B = A.clone()<br>A[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">666666</span><br>A, B<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">(tensor([[0.0000e+00, 1.0000e+00, 2.0000e+00, 3.0000e+00],<br>         [4.0000e+00, 5.0000e+00, 6.0000e+00, 7.0000e+00],<br>         [8.0000e+00, 9.0000e+00, 1.0000e+01, 1.1000e+01],<br>         [1.2000e+01, 1.3000e+01, 1.4000e+01, 6.6667e+05],<br>         [1.6000e+01, 1.7000e+01, 1.8000e+01, 1.9000e+01]]),<br> tensor([[ 0.,  1.,  2.,  3.],<br>         [ 4.,  5.,  6.,  7.],<br>         [ 8.,  9., 10., 11.],<br>         [12., 13., 14., 15.],<br>         [16., 17., 18., 19.]]))<br></code></pre></td></tr></table></figure><h3 id="形状"><a class="header-anchor" href="#形状">¶</a>形状</h3><p>向量的长度，又称向量的维度，可通过Python内置 <code>len()</code> 来访问：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = torch.arange(<span class="hljs-number">3</span>)<br>a, <span class="hljs-built_in">len</span>(a)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">(tensor([0, 1, 2]), 3)<br></code></pre></td></tr></table></figure><p>改变张量的形状而不改变元素数量和元素值：<code>reshape()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">ttt = torch.arange(<span class="hljs-number">24</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>)<br>ttt.shape, ttt.size(), ttt.numel()<br><span class="hljs-comment">#  张量的形状，返回元组   张量元素总数(number of element)，返回的是标量</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">torch.Size([2, 4, 3]), torch.Size([2, 4, 3]), 24<br></code></pre></td></tr></table></figure><blockquote><p>⭐<code>.numel()</code> 十分常用！</p></blockquote><p>⭐张量在给出其他部分维度数据后能够传入参数 <code>-1</code> ，自动计算出另一个维度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">X = x.reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">4</span>)<br>Y = x.reshape(<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="索引与切片"><a class="header-anchor" href="#索引与切片">¶</a>索引与切片</h3><p>通过指定数组下标索引，能够对元素进行读写操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.arange(<span class="hljs-number">15</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>x[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>, :] = <span class="hljs-number">23333</span><span class="hljs-comment"># 通过指定索引来修改某一元素 </span><br>x[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>] = <span class="hljs-number">66666</span> <br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(x[-<span class="hljs-number">1</span>]) <span class="hljs-comment"># 取最后一行，即第三行</span><br><span class="hljs-built_in">print</span>(x[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]) <span class="hljs-comment"># 取第一行及第二行的元素</span><br></code></pre></td></tr></table></figure><pre><code>tensor([[23333, 23333, 23333, 23333, 23333],        [23333, 23333, 23333, 23333, 23333],        [   10,    11,    12,    13,    14]])tensor([10, 11, 12, 13, 14])tensor([[23333, 23333, 23333, 23333, 23333],        [   10,    11,    12,    13,    14]])</code></pre><h3 id="基本运算"><a class="header-anchor" href="#基本运算">¶</a>基本运算</h3><p>标准算术运算符（<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>**</code>）均升级为<strong>按元素</strong>运算 ，即运算符应用于数组中每一个元素。</p><blockquote><p>对于将两个数组作为输⼊的函数，按元素运算将⼆元运算符应⽤于两个数组中的每对位置对应的元素</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">9.3232</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">0</span>])<br>y = torch.tensor([<span class="hljs-number">8</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">3.4</span>])<br>x + y, x / y, x ** y, x == y<br></code></pre></td></tr></table></figure><pre><code>(tensor([ 9.0000,  7.3232, -6.0000, -3.4000]), tensor([ 0.1250, -4.6616,  1.0000, -0.0000]), tensor([ 1.0000,  0.0115, -0.0370,     inf]), tensor([False, False,  True, False]))</code></pre><p>当两个张量的形状不同，会调用<strong>广播机制</strong>（broadcasting mechansim）来执行按元素操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = torch.arange(<span class="hljs-number">3</span>).reshape((<span class="hljs-number">3</span>, <span class="hljs-number">1</span>))<br>b = torch.arange(<span class="hljs-number">2</span>).reshape((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(a + b)<br></code></pre></td></tr></table></figure><pre><code>tensor([[0],        [1],        [2]])tensor([[0, 1]])tensor([[0, 1],        [1, 2],        [2, 3]])</code></pre><p>此外，还能够调用其他方法进行初等运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.exp(x), x.<span class="hljs-built_in">sum</span>() <br><span class="hljs-comment">#求幂         求和，并且返回元素只有一个的张量</span><br></code></pre></td></tr></table></figure><pre><code>tensor([2.7183e+00, 1.1195e+04, 4.9787e-02, 1.0000e+00]), tensor(7.3232)</code></pre><h3 id="矩阵运算"><a class="header-anchor" href="#矩阵运算">¶</a>矩阵运算</h3><p>通过两个分量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 来创建一个形状为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m \times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 的矩阵，通过 <code>.T</code> 即可获得矩阵的转置</p><blockquote><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">B</mi><mo>=</mo><msup><mi mathvariant="bold">A</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">\mathbf{B} = \mathbf{A}^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord mathbf">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>，则对于任意的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span> ，都有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>a</mi><mrow><mi>j</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">b_{ij} = a_{ji}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ji</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tmp = torch.arange(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>)<br>tmp, tmp.T, tmp.T == tmp<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tensor([[ 0,  1,  2,  3],<br>        [ 4,  5,  6,  7],<br>        [ 8,  9, 10, 11],<br>        [12, 13, 14, 15]])<br>tensor([[ 0,  4,  8, 12],<br>        [ 1,  5,  9, 13],<br>        [ 2,  6, 10, 14],<br>        [ 3,  7, 11, 15]])<br>tensor([[ True, False, False, False],<br>        [False,  True, False, False],<br>        [False, False,  True, False],<br>        [False, False, False,  True]])<br></code></pre></td></tr></table></figure><p>两个矩阵的<strong>按元素</strong>乘法，称为 <strong>哈达玛积</strong>（数学符号为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊙</mo></mrow><annotation encoding="application/x-tex">\odot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">⊙</span></span></span></span>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = torch.arange(<span class="hljs-number">6</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>b = torch.tensor([[<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>],<br>                 [<span class="hljs-number">9</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">0</span>]])<br>x = -<span class="hljs-number">1</span> <span class="hljs-comment"># 标量</span><br>a * b, a + x, (a * x).shape<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tensor([[  0,   5,   6],<br>         [ 27, -12,   0]]),<br>tensor([[-1,  0,  1],<br>         [ 2,  3,  4]]),<br>torch.Size([2, 3])<br></code></pre></td></tr></table></figure><blockquote><p><strong>点积</strong>（Dot Product），对于向量而言，即在相同位置上按元素乘积并在最后进行<strong>求和</strong>，即：</p><p>两个向量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">x</mi><mo separator="true">,</mo><mi mathvariant="bold">y</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup></mrow><annotation encoding="application/x-tex">\mathbf{x},\mathbf{y} \in \mathbb{R} ^ d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathbf">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="bold">x</mi><mi>T</mi></msup><mi mathvariant="bold">y</mi><mo>=</mo><msubsup><mo>∑</mo><mi>i</mi><mi>d</mi></msubsup><mrow><msub><mi>x</mi><mi>i</mi></msub><msub><mi>y</mi><mi>i</mi></msub></mrow></mrow><annotation encoding="application/x-tex">\mathbf{x}^T\mathbf{y} = \sum^d_i{x_iy_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.035771em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathbf">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathbf" style="margin-right:0.01597em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2887179999999998em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.tensor([<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">9</span>])<br>y = torch.ones(<span class="hljs-number">4</span>, dtype = torch.float32)<br>x, y, torch.dot(x, y)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tensor([ 0.,  1.,  2., -9.]), tensor([1., 1., 1., 1.]), tensor(-6.)<br></code></pre></td></tr></table></figure></blockquote><p>两个矩阵进行<strong>矩阵-矩阵乘法</strong>（matrix-matrix multiplication），简称为矩阵乘法，可使用 <code>.mm()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">A = torch.arange(<span class="hljs-number">16</span>, dtype=torch.float32).reshape(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>)<br>B = torch.ones(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)<br>A, B, torch.mm(A, B)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tensor([[ 0.,  1.,  2.,  3.],<br>         [ 4.,  5.,  6.,  7.],<br>         [ 8.,  9., 10., 11.],<br>         [12., 13., 14., 15.]]),<br>tensor([[1., 1., 1.],<br>         [1., 1., 1.],<br>         [1., 1., 1.],<br>         [1., 1., 1.]]),<br>tensor([[ 6.,  6.,  6.],<br>         [22., 22., 22.],<br>         [38., 38., 38.],<br>         [54., 54., 54.]])<br></code></pre></td></tr></table></figure><h3 id="降维"><a class="header-anchor" href="#降维">¶</a>降维</h3><p>默认情况下，调用求和函数 <code>.sum()</code> 会沿所有的轴降低张量的维度，使它变为一个标量。</p><p>此外，我们可以指定张量沿哪一个轴来通过求和降低维度，指定 <code>axis</code> 等于多少，则相当于使该张量在该轴的维数在输出形状中消失。</p><img src="https://cdn.joydee.cloud//20210907150801.png" style="zoom:80%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 每一个求和的结果，是按第0维进行遍历求和得到的。</span><br>b_sum_0 = b.<span class="hljs-built_in">sum</span>(axis = <span class="hljs-number">0</span>) <br><br><span class="hljs-comment"># 每一个求和结果，是按1轴的方向（遍历第1维）进行求和</span><br>b_sum_1 = b.<span class="hljs-built_in">sum</span>(axis = <span class="hljs-number">1</span>) <br><br><span class="hljs-comment"># 求和的同时不丢掉原来的维度(keepdims = True)，常用作广播运算</span><br>b_sum_kpt = b.<span class="hljs-built_in">sum</span>(axis = <span class="hljs-number">1</span>, keepdims = <span class="hljs-literal">True</span>) <br><br>b, b_sum_0, b_sum_1, b_sum_kpt, b / b_sum_kpt<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tensor([[ 3,  5,  3],<br>[ 9, -3,  0]]),<br>tensor([12,  2,  3]),<br>tensor([11,  6]),<br>tensor([[11],<br>[ 6]]),<br>tensor([[ 0.2727,  0.4545,  0.2727],<br>[ 1.5000, -0.5000,  0.0000]])<br></code></pre></td></tr></table></figure><h3 id="范数"><a class="header-anchor" href="#范数">¶</a>范数</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">L_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>范数是向量元素平方和的平方根：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∥</mi><mi>x</mi><msub><mi mathvariant="normal">∥</mi><mn>2</mn></msub><mo>=</mo><msqrt><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msubsup><mi>x</mi><mi>i</mi><mn>2</mn></msubsup></mrow></msqrt></mrow><annotation encoding="application/x-tex">\|x\|_{2}=\sqrt{\sum_{i=1}^{n} x_{i}^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∥</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1568160000000005em;vertical-align:-1.277669em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8791470000000006em;"><span class="svg-align" style="top:-5.116816em;"><span class="pstrut" style="height:5.116816em;"></span><span class="mord" style="padding-left:1.056em;"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959080000000001em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27686399999999994em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.8391470000000005em;"><span class="pstrut" style="height:5.116816em;"></span><span class="hide-tail" style="min-width:0.742em;height:3.196816em;"><svg width='400em' height='3.196816em' viewBox='0 0 400000 3196' preserveAspectRatio='xMinYMin slice'><path d='M702 80H40000040H742v3062l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1h-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170c-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667219 661 l218 661zM702 80H400000v40H742z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">L_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>范数是向量元素的<strong>绝对值</strong>之和：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∥</mi><mi>x</mi><msub><mi mathvariant="normal">∥</mi><mn>1</mn></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mrow><mo fence="true">∣</mo><msub><mi>x</mi><mi>i</mi></msub><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">\|x\|_{1}=\sum_{i=1}^{n}\left|x_{i}\right|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∥</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">∣</span></span></span></span></span></span></p><p>对于矩阵而言，弗罗贝尼乌斯范数，是矩阵元素的平方和的平方根（类似于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">L_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>范数）：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∥</mi><mi>X</mi><msub><mi mathvariant="normal">∥</mi><mi>F</mi></msub><mo>=</mo><msqrt><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msubsup><mi>x</mi><mrow><mi>i</mi><mi>j</mi></mrow><mn>2</mn></msubsup></mrow></msqrt></mrow><annotation encoding="application/x-tex">\|X\|_{F}=\sqrt{\sum_{i=1}^{m} \sum_{j=1}^{n} x_{i j}^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∥</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.2929240000000006em;vertical-align:-1.4137769999999998em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8791470000000008em;"><span class="svg-align" style="top:-5.252924em;"><span class="pstrut" style="height:5.252924em;"></span><span class="mord" style="padding-left:1.056em;"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000007em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.795908em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4129719999999999em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.8391470000000005em;"><span class="pstrut" style="height:5.252924em;"></span><span class="hide-tail" style="min-width:0.742em;height:3.3329240000000007em;"><svg width='400em' height='3.3329240000000007em' viewBox='0 0 400000 3332' preserveAspectRatio='xMinYMin slice'><path d='M702 80H40000040H742v3198l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1h-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170c-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667219 661 l218 661zM702 80H400000v40H742z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">u = torch.tensor([<span class="hljs-number">3.0</span>, -<span class="hljs-number">4.0</span>])<br><span class="hljs-built_in">print</span>(torch.norm(u)) <span class="hljs-comment"># L2范数</span><br><span class="hljs-built_in">print</span>(torch.<span class="hljs-built_in">abs</span>(u).<span class="hljs-built_in">sum</span>()) <span class="hljs-comment"># L1范数</span><br><span class="hljs-built_in">print</span>(torch.norm(torch.ones(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))) <span class="hljs-comment"># 弗罗贝尼乌斯范数</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tensor(5.)<br>tensor(7.)<br>tensor(2.4495)<br></code></pre></td></tr></table></figure><h3 id="连接"><a class="header-anchor" href="#连接">¶</a>连接</h3><p>将多个张量连接在一起，即将其端对端地叠起来形成一个更大的张量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">x = torch.arange(<span class="hljs-number">12</span>, dtype = torch.float32).reshape((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)) <br><span class="hljs-built_in">print</span>(x)<br>y = torch.tensor([[<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>], <br>                  [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>                  [<span class="hljs-number">2</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>]])<br><span class="hljs-built_in">print</span>(y)<br>torch.cat((x, y), dim = <span class="hljs-number">0</span>), torch.cat((x, y), dim = <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 按第0维的方向进行连接，和按第1维的方向进行连接</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tensor([[ 0.,  1.,  2.,  3.],<br>        [ 4.,  5.,  6.,  7.],<br>        [ 8.,  9., 10., 11.]])<br>tensor([[ 2,  0,  4,  3],<br>        [ 1,  2,  3,  4],<br>        [ 2, -3,  2,  0]])<br>tensor([[ 0.,  1.,  2.,  3.],<br>        [ 4.,  5.,  6.,  7.],<br>        [ 8.,  9., 10., 11.],<br>        [ 2.,  0.,  4.,  3.],<br>        [ 1.,  2.,  3.,  4.],<br>        [ 2., -3.,  2.,  0.]]),<br>tensor([[ 0.,  1.,  2.,  3.,  2.,  0.,  4.,  3.],<br>        [ 4.,  5.,  6.,  7.,  1.,  2.,  3.,  4.],<br>        [ 8.,  9., 10., 11.,  2., -3.,  2.,  0.]])<br></code></pre></td></tr></table></figure><h3 id="转换为其他Python对象"><a class="header-anchor" href="#转换为其他Python对象">¶</a>转换为其他Python对象</h3><p>Tensor与Numpy张量的转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">q = x.numpy()<br>p = torch.tensor(q)<br><span class="hljs-built_in">type</span>(q), <span class="hljs-built_in">type</span>(p)<br></code></pre></td></tr></table></figure><pre><code>(numpy.ndarray, torch.Tensor)</code></pre><p>将大小为1的张量转化Python的标量，可以调用 <code>item()</code> 或者 Python的内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tmp = torch.tensor([<span class="hljs-number">2.33333</span>])<br>tmp, tmp.item(), <span class="hljs-built_in">float</span>(tmp)<br></code></pre></td></tr></table></figure><pre><code>(tensor([2.3333]), 2.333329916000366, 2.333329916000366)</code></pre><blockquote><p>⭐<code>.item()</code> 十分常用</p></blockquote><h2 id="数据预处理"><a class="header-anchor" href="#数据预处理">¶</a>数据预处理</h2><h3 id="创建数据集"><a class="header-anchor" href="#创建数据集">¶</a>创建数据集</h3><p>创建一个人工数据集，并存储在CSV（逗号分隔值）文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.makedirs(os.path.join(<span class="hljs-string">&#x27;..&#x27;</span>, <span class="hljs-string">&#x27;data&#x27;</span>), exist_ok=<span class="hljs-literal">True</span>)<br>data_file = os.path.join(<span class="hljs-string">&#x27;..&#x27;</span>, <span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-string">&#x27;house_tiny.csv&#x27;</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(data_file, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">&#x27;NumRooms,Alley,Price\n&#x27;</span>) <span class="hljs-comment"># 列名</span><br>    f.write(<span class="hljs-string">&#x27;NA,Pave,127500\n&#x27;</span>) <span class="hljs-comment"># 每⾏表⽰⼀个数据样本</span><br>    f.write(<span class="hljs-string">&#x27;2,NA,106000\n&#x27;</span>)<br>    f.write(<span class="hljs-string">&#x27;4,NA,178100\n&#x27;</span>)<br>    f.write(<span class="hljs-string">&#x27;NA,NA,140000\n&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="读取数据集"><a class="header-anchor" href="#读取数据集">¶</a>读取数据集</h3><p>从创建的CSV文件中加载原始数据集，可以通过 pandas 包调用 <code>read_csv</code> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br>data = pd.read_csv(data_file)<br></code></pre></td></tr></table></figure><p>为处理缺失（<code>NaN</code>项）的数据，方法有：<strong>插值</strong>（即用替代值来代替缺失值）、删除（忽略缺失值）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 代码待补充</span><br></code></pre></td></tr></table></figure><h3 id="批量加载数据集⭐"><a class="header-anchor" href="#批量加载数据集⭐">¶</a>批量加载数据集⭐</h3><p>在机器学习中，若要使用批量随机梯度下降法（SGD），使用数据加载器是必不可少的，它能够按照需要批量地加载数据至内存，而不是直接加载数据集所有数据。</p><img src="https://cdn.joydee.cloud//20210907001820.png"/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset <span class="hljs-comment"># 抽象类，需要有一个继承类</span><br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader <span class="hljs-comment"># 用于批量加载数据</span><br><br><span class="hljs-comment"># 自定义数据集</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiabetesDataset</span>(<span class="hljs-params">Dataset</span>):</span> <span class="hljs-comment"># 继承自Dataset，需要覆写以下方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, filepath</span>):</span><br>        xy = np.loadtxt(filepath, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>, dtype=np.float32)<br>        self.<span class="hljs-built_in">len</span> = xy.shape[<span class="hljs-number">0</span>]<br>        self.x_data = torch.from_numpy(xy[:, :-<span class="hljs-number">1</span>])<br>        self.y_data = torch.from_numpy(xy[:, [-<span class="hljs-number">1</span>]])<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span>(<span class="hljs-params">self, index</span>):</span> <span class="hljs-comment"># 能够实现中括号下标访问</span><br>        <span class="hljs-keyword">return</span> self.x_data[index], self.y_data[index]<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span>(<span class="hljs-params">self</span>):</span> <span class="hljs-comment"># 返回数据集的长度</span><br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">len</span><br>    <br>dataset = DiabetesDataset(<span class="hljs-string">&#x27;...&#x27;</span>) <span class="hljs-comment">#创建实例</span><br>train_loader = DataLoader(dataset = dataset, <span class="hljs-comment"># 传入数据集</span><br>                          batch_size=<span class="hljs-number">32</span>, <span class="hljs-comment"># 批量大小</span><br>                          shuffle=<span class="hljs-literal">True</span>, <span class="hljs-comment"># 是否打乱</span><br>                          num_workers=<span class="hljs-number">2</span>)<span class="hljs-comment"># 批量读入时的进程数</span><br></code></pre></td></tr></table></figure><p>如何通过 <code>DataLoader</code> 遍历数据集所有数据 ?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># DataLoader是一个Iterable，但可以通过iter()来获得一个Iterator对象</span><br><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(train_loader)) <span class="hljs-comment"># 获取小批量数据</span><br><br><span class="hljs-comment"># for循环本质上通过不断调用next()函数实现</span><br><span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span> (train_loader, <span class="hljs-number">0</span>): <span class="hljs-comment"># 第二个参数为下标起始位置</span><br>    <span class="hljs-comment">#....</span><br></code></pre></td></tr></table></figure><blockquote><p><code>enumerate()</code> 能将可遍历的数据对象组合为一个<strong>带索引</strong>的序列，即同时返回<strong>数据和数据下标</strong>。此外，通过其下标索引，还能够批量修改列表内的元素</p></blockquote><p>若要使用一些标准数据集，如MNIST、Fashion-MNIST等，可通过PyTorch框架中的内置函数将其下载并读取到内存中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">batch_size = <span class="hljs-number">64</span><br><br><span class="hljs-comment"># 无需再自定义Dataset的子类</span><br>train_dataset = datasets.MNIST(root = <span class="hljs-string">&#x27;../dataset/mnist/&#x27;</span>, <span class="hljs-comment"># 数据集的本地存放路径</span><br>                               train= <span class="hljs-literal">True</span>, <span class="hljs-comment"># 训练集还是测试集</span><br>                               download = <span class="hljs-literal">True</span>, <span class="hljs-comment"># 若未下载到本地，则需要选择True</span><br>                               transform = transform) <span class="hljs-comment"># transform暂不在此处谈</span><br>test_dataset = datasets.MNIST(root = <span class="hljs-string">&#x27;../dataset/mnist&#x27;</span>, <br>                              train = <span class="hljs-literal">False</span>, <br>                              download = <span class="hljs-literal">True</span>,<br>                              transform = transform)<br>train_loader = DataLoader(train_dataset, <br>                          shuffle = <span class="hljs-literal">True</span>, <br>                          batch_size = batch_size)<br>test_loader = DataLoader(test_dataset, <br>                         shuffle = <span class="hljs-literal">False</span>, <br>                         batch_size = batch_size)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PyTorch 的重要组成部分是张量类（&lt;code&gt;Tensor&lt;/code&gt;），即 &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML</summary>
      
    
    
    
    <category term="Python" scheme="https://www.joydee.top/categories/Python/"/>
    
    <category term="Deep Learning" scheme="https://www.joydee.top/categories/Python/Deep-Learning/"/>
    
    
    <category term="PyTorch" scheme="https://www.joydee.top/tags/PyTorch/"/>
    
    <category term="Deep Learning" scheme="https://www.joydee.top/tags/Deep-Learning/"/>
    
    <category term="Machine Learning" scheme="https://www.joydee.top/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习与深度学习概述</title>
    <link href="https://www.joydee.top/posts/a3d64eab/"/>
    <id>https://www.joydee.top/posts/a3d64eab/</id>
    <published>2021-07-29T21:16:41.000Z</published>
    <updated>2021-09-07T07:17:26.207Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.joydee.cloud//20210906205112.png" style="zoom:80%;" /><h2 id="各类机器学习问题"><a class="header-anchor" href="#各类机器学习问题">¶</a>各类机器学习问题</h2><h3 id="监督学习（Supervised-learning）"><a class="header-anchor" href="#监督学习（Supervised-learning）">¶</a>监督学习（Supervised learning）</h3><img src="https://cdn.joydee.cloud//20210906204911.png"/><p>给定的输入及<strong>相应的标签</strong>一同构成训练数据集，将其作为输入，通过有监督学习算法，输出一个“完成学习模型”。</p><blockquote><p>每个 “特征-标签” 对，都称为一个样本（example）</p></blockquote><p>随后，我们就能够将之前没见过的样本特征放到这个“完成学习模型”中，使用模型的输出，作为相应标签的预测</p><p>其相关问题有：</p><ul><li><p><strong>回归</strong>（regression）：有关“<strong>有多少</strong>”的问题，其标签能够取任意数值，我们目标生成一个模型（训练一个<strong>回归函数</strong>），输出一个<strong>数值</strong>，能够预测出非常接近实际标签值，如：估计⼀栋房⼦的公平市场价值、预测⽤⼾对⼀部电影的评分、在未来六小时，这个镇会有多少降⾬量？</p></li><li><p><strong>分类</strong>（classification）：有关“<strong>哪一个</strong>”的问题，目标生成一个模型（训练一个<strong>分类器</strong>），能够预测样本属于哪个类别（class），即能够输出预测的类别。有二元分类、多类分类（multiclass classification）问题。</p><blockquote><p>为了判断这种“是”或“不是”的硬分类预测，模型会为每个可能的类分配一个<strong>概率</strong>。</p></blockquote></li><li><p><strong>标记问题</strong>：希望模型能够描述输入图像的内容：一只猫、一只狗、一只公鸡等等。学习预测<strong>不相互排斥</strong>的类别的问题，成为<strong>多标签分类</strong>（multilabel classification），如一篇博客文章可能会用到多个标签</p></li><li><p><strong>搜索</strong>：不是简单的“查询-网页”分类，而是在海量搜索结果中找到⽤⼾最需要的那部分，因此<strong>搜索结果的排序</strong>很重要，学习算法需要输出有序的元素子集</p></li><li><p><strong>推荐系统</strong>（recommender system）：⽬标是向给特定⽤⼾进⾏“个性化”推荐，对于任何给定的⽤⼾，根据其一些明确反馈或者隐形反馈，推荐系统会为“给定⽤⼾和物品”的匹配性打分，这个“分数”可能是估计的评级或购买的概率，同时检索分数最⾼的对象集，然后将其推荐给⽤户</p></li><li><p>序列学习</p></li><li><p>自动语音识别</p></li><li><p>文本到语音</p></li><li><p>机器翻译</p></li></ul><h3 id="无监督学习（Unsupervised-learning）"><a class="header-anchor" href="#无监督学习（Unsupervised-learning）">¶</a>无监督学习（Unsupervised learning）</h3><p>给定的样本并不含有目标或标签，某一样本的具体含义是未知的</p><ul><li><strong>聚类（clustering）问题</strong>：在没有标签的情况下，对数据进行分类。如给定一组用户的网页浏览记录，能否将具有相似行为的用户进行聚类</li><li><strong>主成分分析（principal component analysis）问题</strong>：找到少量的参数，以准确地捕捉数据的线性相关属性，如：⼀个球的运动轨迹可以⽤球的速度、直径和质量来描述；又如：有⼀小部分参数，能够准确地描述了⼈体的形状，裁缝们能够通过这些参数来设计⾐服</li><li>因果关系（causality）和概率图模型问题</li><li>生成对抗性网络</li></ul><h3 id="与环境互动"><a class="header-anchor" href="#与环境互动">¶</a>与环境互动</h3><p>待填坑</p><h3 id="强化学习（Reinforcement-learning）"><a class="header-anchor" href="#强化学习（Reinforcement-learning）">¶</a>强化学习（Reinforcement learning）</h3><p>待填坑</p><blockquote><p>机器学习的算法，是通过数据集，将所需的算法找出来，其计算过程来自于数据（主要基于统计方法），而不是人工的设计。</p></blockquote><h2 id="深度学习"><a class="header-anchor" href="#深度学习">¶</a>深度学习</h2><p>深度学习是表示学习（Representation Learning）的一个分支。</p><p>待填坑</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://cdn.joydee.cloud//20210906205112.png&quot; style=&quot;zoom:80%;&quot; /&gt;
&lt;h2 id=&quot;各类机器学习问题&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#各类机器学习问题&quot;&gt;¶&lt;/</summary>
      
    
    
    
    <category term="Python" scheme="https://www.joydee.top/categories/Python/"/>
    
    <category term="Deep Learning" scheme="https://www.joydee.top/categories/Python/Deep-Learning/"/>
    
    
    <category term="Deep Learning" scheme="https://www.joydee.top/tags/Deep-Learning/"/>
    
    <category term="Machine Learning" scheme="https://www.joydee.top/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04 安装配置 Anaconda3、PyTorch、Jupyter Notebook</title>
    <link href="https://www.joydee.top/posts/6db2ac7/"/>
    <id>https://www.joydee.top/posts/6db2ac7/</id>
    <published>2021-07-28T20:16:41.000Z</published>
    <updated>2021-09-07T07:17:26.207Z</updated>
    
    <content type="html"><![CDATA[<p>笔者的服务器配置为2核+4GB+3Mbps，系统为Ubuntu 18.04.4 LTS x86_64</p><h2 id="安装Anaconda3"><a class="header-anchor" href="#安装Anaconda3">¶</a>安装Anaconda3</h2><ol><li><p>下载安装包：前往 <a href="https://www.anaconda.com/products/individual">Anaconda官网</a> 或者 <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">THU开源软件镜像站</a>，下载 Anaconda3-2021.05-Linux-x86_64.sh</p></li><li><p>进入安装包所在路径，运行该 <code>.sh</code> 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> bash Anaconda3-2021.05-Linux-x86_64.sh</span><br></code></pre></td></tr></table></figure></li><li><p>进入注册信息页面后，根据提示输入 <code>yes</code> 以及 按Enter键。安装完成后，会有提示语：“Thank you for installing Anaconda3!”</p></li><li><p>终端输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> python</span><br></code></pre></td></tr></table></figure><p>进入python命令模式，可观察到 <code>Anaconda</code> 标识</p></li></ol><h2 id="安装（CPU版）PyTorch"><a class="header-anchor" href="#安装（CPU版）PyTorch">¶</a>安装（CPU版）PyTorch</h2><p>以下步骤基于Anaconda3已经安装成功</p><ol><li><p>为 PyTorch 创建虚拟环境，该环境名称叫做 <code>pytorch</code></p><blockquote><p>保证在安装其他框架如 Tensorflow 时，避免冲突产生</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> conda create -n pytorch python=3.8</span><br></code></pre></td></tr></table></figure><p>执行该命令后，你会注意到终端中用户名左侧显示 <code>(base)</code></p></li><li><p>⭐进入虚拟环境（常用）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> conda activate pytorch</span><br></code></pre></td></tr></table></figure><p>此时，终端中用户名左侧显示 <code>pytorch</code>：</p><img src="https://cdn.joydee.cloud//20210906194810.png" style="zoom:67%;" /><blockquote><p>退出环境，可输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> conda deactivate</span><br></code></pre></td></tr></table></figure></blockquote></li><li><p>为了保证下载速度，需要为 conda 配置清华源，输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> pytorch</span><br><span class="hljs-meta">$</span><span class="bash"> conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> menpo</span><br><span class="hljs-meta">$</span><span class="bash"> conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> bioconda</span><br><span class="hljs-meta">$</span><span class="bash"> conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> msys2</span><br><span class="hljs-meta">$</span><span class="bash"> conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> conda-forge</span><br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/<br><span class="hljs-meta"></span><br><span class="hljs-meta">$</span><span class="bash"> conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="hljs-meta">$</span><span class="bash"> conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置安装路径可见，可通过 cat ~/.condarc 来查看是否安装成功</span><br><span class="hljs-meta">$</span><span class="bash"> conda config --<span class="hljs-built_in">set</span> show_channel_urls yes</span><br></code></pre></td></tr></table></figure></li><li><p>根据<a href="https://pytorch.org/get-started/locally/">PyTorch官网</a>提示，</p><img src="https://cdn.joydee.cloud//20210906195822.png"/><p>其给出命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> conda install pytorch torchvision torchaudio cpuonly -c pytorch</span><br></code></pre></td></tr></table></figure><p>为了使用清华源，我们需要将上面命令的 <code>-c pytorch</code> 删了才能够执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> conda install pytorch torchvision torchaudio cpuonly</span><br></code></pre></td></tr></table></figure></li><li><p>等待其安装成功后，进入 Python 模式，输入下列代码，检查PyTorch是否安装成功。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br>x = torch.rand(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><img src="https://cdn.joydee.cloud//20210906200151.png"/></li></ol><h2 id="安装并且配置Jupyter-Notebook"><a class="header-anchor" href="#安装并且配置Jupyter-Notebook">¶</a>安装并且配置Jupyter Notebook</h2><h3 id="安装Jupyter-Notebook"><a class="header-anchor" href="#安装Jupyter-Notebook">¶</a>安装Jupyter Notebook</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> conda install jupyter</span><br></code></pre></td></tr></table></figure><h3 id="配置Jupyter-Notebook实现远程访问"><a class="header-anchor" href="#配置Jupyter-Notebook实现远程访问">¶</a>配置Jupyter Notebook实现远程访问</h3><ol><li><p>生成 jupyter notebook 配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> jupyter notebook --generate-config</span><br></code></pre></td></tr></table></figure></li><li><p>生成网站进入的密钥：</p><p>首先在终端进入Python编辑模式，输入下列代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> notebook.auth <span class="hljs-keyword">import</span> passwd<br>passwd()<br></code></pre></td></tr></table></figure><img src="https://cdn.joydee.cloud//20210906201714.png" style="zoom:80%;" /><p>此时终端会返回一个密钥密文：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">argon2:$argon2id$v=19$m=10240,t=10,p=8$T3rb43TrSnkHY+ecCvDxWw$N4yeBlkuHipEx16srIdRFg<br></code></pre></td></tr></table></figure></li><li><p>修改 jupyter notebook 配置文件：</p><p>进入刚生成的配置文件 jupyter_notebook_config（文件目录一般在： <code>~/.jupyter/jupyter_notebook_config.py</code>）</p><p>修改下面的内容（记得去掉注释 <code>#</code>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">c.NotebookApp.ip=<span class="hljs-string">&#x27;*&#x27;</span><span class="hljs-comment"># 任何IP地址均可访问</span><br>c.NotebookApp.password = <span class="hljs-string">u&#x27;argon2:$............&#x27;</span><span class="hljs-comment"># 将刚才复制的那个密文粘贴到此</span><br>c.NotebookApp.open_browser = <span class="hljs-literal">False</span><span class="hljs-comment"># 禁止自动打开浏览器  </span><br>c.NotebookApp.port =<span class="hljs-number">8888</span><span class="hljs-comment"># 服务端口默认为8888，可自行设置 </span><br>c.NotebookApp.notebook_dir = <span class="hljs-string">&#x27;/home/ubuntu/myprojects&#x27;</span><span class="hljs-comment"># 网站首页打开的目录，即笔记存放的位置。可自行设置</span><br></code></pre></td></tr></table></figure></li><li><p>修改完后，在终端启动Jupyter Notebook服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> jupyter notebook</span><br></code></pre></td></tr></table></figure><p>若终端出现以下报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Running as root is not recommended. Use --allow-root to bypass.<br></code></pre></td></tr></table></figure><p>则需要在上述配置文件jupyter_notebook_config中修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">c.NotebookApp.allow_root = <span class="hljs-literal">True</span>   <span class="hljs-comment"># 设置默认开启root模式</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="添加拓展的插件"><a class="header-anchor" href="#添加拓展的插件">¶</a>添加拓展的插件</h3><p>用 conda 来安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> conda install -c conda-forge jupyter_contrib_nbextensionsconda install -c</span><br>conda-forge jupyter_nbextensions_configurator<br></code></pre></td></tr></table></figure><p>插件介绍可见<a href="https://zhuanlan.zhihu.com/p/97394628">此篇文章</a></p><h2 id="参考文章"><a class="header-anchor" href="#参考文章">¶</a>参考文章</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/266376683">在Linux系统中安装深度学习框架Pytorch</a></li><li><a href="https://www.jianshu.com/p/ee08ca2c1160">Win10+Anaconda环境下安装Pytorch</a></li><li><a href="https://blog.csdn.net/qq_15192373/article/details/81091098">Ubuntu18.04 安装 Anaconda3</a></li><li><a href="https://blog.csdn.net/jerry_liufeng/article/details/108944621">linux下配置jupyter Notebook</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;笔者的服务器配置为2核+4GB+3Mbps，系统为Ubuntu 18.04.4 LTS x86_64&lt;/p&gt;
&lt;h2 id=&quot;安装Anaconda3&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#安装Anaconda3&quot;&gt;¶&lt;/a&gt;安装Anaconda3</summary>
      
    
    
    
    <category term="Python" scheme="https://www.joydee.top/categories/Python/"/>
    
    <category term="Deep Learning" scheme="https://www.joydee.top/categories/Python/Deep-Learning/"/>
    
    
    <category term="PyTorch" scheme="https://www.joydee.top/tags/PyTorch/"/>
    
    <category term="Anaconda" scheme="https://www.joydee.top/tags/Anaconda/"/>
    
    <category term="Linux" scheme="https://www.joydee.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Pandas 库的使用</title>
    <link href="https://www.joydee.top/posts/1701cff7/"/>
    <id>https://www.joydee.top/posts/1701cff7/</id>
    <published>2021-07-28T08:34:00.000Z</published>
    <updated>2021-09-07T07:17:26.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h2><p>Pandas 是 Python 第三方库，提供高性能易用数据类型和分析工具。它基于 Numpy 实现的，故常与 Numpy 、Matplotlib 一同使用。</p><p>引用方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><p>Pandas 库主要提供两个数据类型：<code>Series</code>（相当于一维数据类型）、<code>DataFrame</code>（二维到多维数据类型）</p><p>Pandas库 与 Numpy 库的对比：</p><table><thead><tr><th style="text-align:center">Numpy</th><th style="text-align:center">Pandas</th></tr></thead><tbody><tr><td style="text-align:center">基础数据类型</td><td style="text-align:center">拓展数据类型</td></tr><tr><td style="text-align:center">关注数据的结构表达</td><td style="text-align:center">关注数据的应用表达</td></tr><tr><td style="text-align:center">维度：数据间的关系</td><td style="text-align:center">数据与索引间的关系</td></tr></tbody></table><h2 id="Series-类型"><a class="header-anchor" href="#Series-类型">¶</a><code>Series</code> 类型</h2><p>由一组数据及其相关的数据索引组成（可以理解为，一维带“标签”的数组），如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====自动索引====&quot;</span>)<br>a = pd.Series([<span class="hljs-number">33</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">14</span>, <span class="hljs-number">29</span>])<br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment"># 可以观察到自动索引，并且dtype为Numpy提供的数据类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====自定义索引====&quot;</span>)<br>b = pd.Series([<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>], index = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]) <span class="hljs-comment"># 第二个参数为自定义索引</span><br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">====自动索引====<br>0    33<br>1    -3<br>2    14<br>3    29<br>dtype: int64<br>====自定义索引====<br>a    9<br>b    8<br>c    7<br>d    6<br>dtype: int64<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=====从标量值创建=====&quot;</span>)<br>s = pd.Series(<span class="hljs-number">25</span>, index = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]) <span class="hljs-comment"># 不能省略index</span><br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=====从字典类型创建=====&quot;</span>)<br>m = pd.Series(&#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">15</span>, <span class="hljs-string">&#x27;b&#x27;</span>:-<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">0</span>&#125;) <span class="hljs-comment"># 键作为索引</span><br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=====从ndarray类型创建=====&quot;</span>)<br>n = pd.Series(np.arange(<span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>), index = np.arange(<span class="hljs-number">4</span>)) <span class="hljs-comment"># 索引及数据均可通过ndarray类型创建</span><br><span class="hljs-built_in">print</span>(n)<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">=====从标量值创建=====<br>a    25<br>b    25<br>c    25<br>dtype: int64<br>=====从字典类型创建=====<br>a    15<br>b    -3<br>c     0<br>dtype: int64<br>=====从ndarray类型创建=====<br>0    2<br>1    4<br>2    6<br>3    8<br>dtype: int32<br></code></pre></td></tr></table></figure><h3 id="Series-类型的基本操作"><a class="header-anchor" href="#Series-类型的基本操作">¶</a><code>Series</code> 类型的基本操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">b = pd.Series([<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>], [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(b.index) <span class="hljs-comment">#获得索引</span><br>b.values <span class="hljs-comment"># 获得数据，Numpy类型</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Index([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], dtype=&#x27;object&#x27;)<br>array([9, 8, 7, 6], dtype=int64)<br></code></pre></td></tr></table></figure><blockquote><p>Series 类型的操作类似于 ndarray 类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自动索引和自定义索引并存</span><br>b[<span class="hljs-string">&#x27;b&#x27;</span>] <span class="hljs-comment"># 8</span><br>b[<span class="hljs-number">2</span>] <span class="hljs-comment"># 7</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=====指定索引输出=====&quot;</span>)<br><span class="hljs-built_in">print</span>(b[[<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>]]) <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=====切片操作=====&quot;</span>)<br><span class="hljs-built_in">print</span>(b[:<span class="hljs-number">3</span>])               <span class="hljs-comment"># 得到的仍然是Series类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=====切出条件满足的Series=====&quot;</span>)<br><span class="hljs-built_in">print</span>(b[b &lt;= b.mean()])    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=====对Series进行运算=====&quot;</span>)<br><span class="hljs-built_in">print</span>(np.exp(b))           <span class="hljs-comment"># 输出结果仍为Series类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-keyword">in</span> b)            <span class="hljs-comment"># 使用Python字典类型保留字，判断该键是否存在于自定义索引中</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> b)              <span class="hljs-comment"># 不会判断自动索引</span><br><span class="hljs-built_in">print</span>(b.get(<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-number">666</span>))     <span class="hljs-comment"># 如果不存在，返回100；若存在，则直接返回对应的值</span><br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">=====指定索引输出=====<br>c    7<br>d    6<br>a    9<br>dtype: int64<br>=====切片操作=====<br>a    9<br>b    8<br>c    7<br>dtype: int64<br>=====切出条件满足的Series=====<br>c    7<br>d    6<br>dtype: int64<br>=====对Series进行运算=====<br>a    8103.083928<br>b    2980.957987<br>c    1096.633158<br>d     403.428793<br>dtype: float64<br>True<br>False<br>666<br></code></pre></td></tr></table></figure><h3 id="Series-类型的修改"><a class="header-anchor" href="#Series-类型的修改">¶</a><code>Series</code> 类型的修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = pd.Series([<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>], [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<br>x[<span class="hljs-string">&#x27;b&#x27;</span>] = <span class="hljs-number">666</span>             <span class="hljs-comment"># 直接修改特定值</span><br>x.name = <span class="hljs-string">&quot;My Series&quot;</span>     <span class="hljs-comment"># 修改Series名称</span><br>x[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>] = <span class="hljs-number">233333</span><br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a    233333<br>b       666<br>c         7<br>d    233333<br>Name: My Series, dtype: int64<br></code></pre></td></tr></table></figure><h3 id="Series-类型的对齐操作"><a class="header-anchor" href="#Series-类型的对齐操作">¶</a><code>Series</code> 类型的对齐操作</h3><blockquote><p>类似于数据库的外连接操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>])<br>b = pd.Series([-<span class="hljs-number">3</span>, <span class="hljs-number">20</span>, <span class="hljs-number">99</span>, -<span class="hljs-number">200</span>], [<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>])<br><span class="hljs-built_in">print</span>(a + b)<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a     21.0<br>b      NaN<br>c    102.0<br>x      NaN<br>y      NaN<br>dtype: float64<br></code></pre></td></tr></table></figure><h2 id="DataFrame-类型"><a class="header-anchor" href="#DataFrame-类型">¶</a><code>DataFrame</code> 类型</h2><p>由<strong>共用</strong>相同索引的一组列组成（可理解为二维带“标签”的数组），其中跨行遍历的单位为 <code>index</code>（行索引），跨列遍历的单位为 <code>column</code>（列索引）。</p><h3 id="创建方法"><a class="header-anchor" href="#创建方法">¶</a>创建方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=====从二维ndarray对象创建=====&quot;</span>)<br>k = pd.DataFrame(np.arange(<span class="hljs-number">10</span>).reshape(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>)) <span class="hljs-comment"># 自动生成行索引及列索引</span><br><span class="hljs-built_in">print</span>(k)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=====从一维ndarray对象字典创建=====&quot;</span>)<br><span class="hljs-comment"># 体会“共用相同索引”的含义</span><br>dt = &#123;<span class="hljs-string">&#x27;x1&#x27;</span>: pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], index=[<span class="hljs-string">&#x27;y1&#x27;</span>, <span class="hljs-string">&#x27;y2&#x27;</span>, <span class="hljs-string">&#x27;y3&#x27;</span>]),<br>      <span class="hljs-string">&#x27;x2&#x27;</span>: pd.Series([-<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">4</span>], index=[<span class="hljs-string">&#x27;y1&#x27;</span>, <span class="hljs-string">&#x27;y2&#x27;</span>, <span class="hljs-string">&#x27;y3&#x27;</span>, <span class="hljs-string">&#x27;y4&#x27;</span>])&#125;<br>    <span class="hljs-comment"># x1、x2为列索引，index仍然为行索引</span><br>k = pd.DataFrame(dt)<br><span class="hljs-built_in">print</span>(k)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;============&quot;</span>)<br><span class="hljs-comment"># 选定之前的某些索引，若选中某些不存在的索引，则数据会自动补齐（NaN）</span><br>k = pd.DataFrame(dt, index = [<span class="hljs-string">&#x27;y2&#x27;</span>, <span class="hljs-string">&#x27;y3&#x27;</span>, <span class="hljs-string">&#x27;y4&#x27;</span>], columns=[<span class="hljs-string">&#x27;x1&#x27;</span>, <span class="hljs-string">&#x27;x6&#x27;</span>])<br><span class="hljs-built_in">print</span>(k)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=====从列表类型的字典创建=====&quot;</span>)<br>dl = &#123;<span class="hljs-string">&#x27;one&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], <span class="hljs-string">&#x27;two&#x27;</span>: [-<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">4</span>]&#125;<br>k = pd.DataFrame(dl, index = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(k)<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">=====从二维ndarray对象创建=====<br>    0  1  2  3  4<br>0  0  1  2  3  4<br>1  5  6  7  8  9<br>=====从一维ndarray对象字典创建=====<br>        x1  x2<br>y1  1.0  -1<br>y2  2.0  -2<br>y3  3.0  -3<br>y4  NaN  -4<br>============<br>        x1   x6<br>y2  2.0  NaN<br>y3  3.0  NaN<br>y4  NaN  NaN<br>=====从列表类型的字典创建=====<br>    one  two<br>a    1   -1<br>b    2   -2<br>c    3   -3<br>d    4   -4<br></code></pre></td></tr></table></figure><h3 id="访问操作"><a class="header-anchor" href="#访问操作">¶</a>访问操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">dl = &#123;<span class="hljs-string">&#x27;城市&#x27;</span>: [<span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;广州&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>],<br>      <span class="hljs-string">&#x27;环比&#x27;</span>: [<span class="hljs-number">101.5</span>, <span class="hljs-number">101.2</span>, <span class="hljs-number">101.3</span>, <span class="hljs-number">102.0</span>],<br>      <span class="hljs-string">&#x27;定基&#x27;</span>: [<span class="hljs-number">121.4</span>, <span class="hljs-number">127.8</span>, <span class="hljs-number">120.0</span>, <span class="hljs-number">145.5</span>]<br>     &#125;<br>ta = pd.DataFrame(dl, index=[<span class="hljs-string">&#x27;i1&#x27;</span>, <span class="hljs-string">&#x27;i2&#x27;</span>, <span class="hljs-string">&#x27;i3&#x27;</span>, <span class="hljs-string">&#x27;i4&#x27;</span>])<br><span class="hljs-built_in">print</span>(ta)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;==========列索引访问=========&quot;</span>)<br><span class="hljs-built_in">print</span>(ta[<span class="hljs-string">&#x27;城市&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;==========行索引访问=========&quot;</span>)<br><span class="hljs-built_in">print</span>(ta.loc[<span class="hljs-string">&#x27;i3&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;==========行索引、列索引访问=========&quot;</span>)<br><span class="hljs-built_in">print</span>(ta[<span class="hljs-string">&#x27;城市&#x27;</span>][<span class="hljs-string">&#x27;i3&#x27;</span>])<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">    城市     环比     定基<br>i1  北京  101.5  121.4<br>i2  上海  101.2  127.8<br>i3  广州  101.3  120.0<br>i4  深圳  102.0  145.5<br>==========列索引访问=========<br>i1    北京<br>i2    上海<br>i3    广州<br>i4    深圳<br>Name: 城市, dtype: object<br>==========行索引访问=========<br>城市       广州<br>环比    101.3<br>定基    120.0<br>Name: i3, dtype: object<br>==========行索引、列索引访问=========<br>广州<br></code></pre></td></tr></table></figure><h3 id="修改-Series-及-DataFrame-对象的结构"><a class="header-anchor" href="#修改-Series-及-DataFrame-对象的结构">¶</a>修改 <code>Series</code> 及 <code>DataFrame</code> 对象的结构</h3><p>增加或重拍——重新索引：<code>reindex()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">dl = &#123;<span class="hljs-string">&#x27;城市&#x27;</span>: [<span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;广州&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>],<br>      <span class="hljs-string">&#x27;环比&#x27;</span>: [<span class="hljs-number">101.5</span>, <span class="hljs-number">101.2</span>, <span class="hljs-number">101.3</span>, <span class="hljs-number">102.0</span>],<br>      <span class="hljs-string">&#x27;定基&#x27;</span>: [<span class="hljs-number">121.4</span>, <span class="hljs-number">127.8</span>, <span class="hljs-number">120.0</span>, <span class="hljs-number">145.5</span>]<br>     &#125;<br>ta = pd.DataFrame(dl, index=[<span class="hljs-string">&#x27;i1&#x27;</span>, <span class="hljs-string">&#x27;i2&#x27;</span>, <span class="hljs-string">&#x27;i3&#x27;</span>, <span class="hljs-string">&#x27;i4&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;============================&quot;</span>)<br><span class="hljs-built_in">print</span>(ta)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=========重新行排列==========&quot;</span>)<br><span class="hljs-built_in">print</span>(ta.reindex(index=[<span class="hljs-string">&#x27;i3&#x27;</span>, <span class="hljs-string">&#x27;i4&#x27;</span>, <span class="hljs-string">&#x27;i2&#x27;</span>, <span class="hljs-string">&#x27;i1&#x27;</span>]))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=========重新列排列==========&quot;</span>)<br><span class="hljs-built_in">print</span>(ta.reindex(columns=[<span class="hljs-string">&#x27;定基&#x27;</span>, <span class="hljs-string">&#x27;环比&#x27;</span>, <span class="hljs-string">&#x27;城市&#x27;</span>]))<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">============================<br>    城市     环比     定基<br>i1  北京  101.5  121.4<br>i2  上海  101.2  127.8<br>i3  广州  101.3  120.0<br>i4  深圳  102.0  145.5<br>=========重新行排列==========<br>    城市     环比     定基<br>i3  广州  101.3  120.0<br>i4  深圳  102.0  145.5<br>i2  上海  101.2  127.8<br>i1  北京  101.5  121.4<br>=========重新列排列==========<br>        定基     环比  城市<br>i1  121.4  101.5  北京<br>i2  127.8  101.2  上海<br>i3  120.0  101.3  广州<br>i4  145.5  102.0  深圳<br></code></pre></td></tr></table></figure><h3 id="索引类型"><a class="header-anchor" href="#索引类型">¶</a>索引类型</h3><p><code>Series</code> 和 <code>DataFrame</code> 的索引均是 <code>Index</code> 类型，该类是不可修改类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 首先获取&quot;列索引&quot;的列表，并且删除第二个，返回新索引列表，此时原DataFrame没有被修改</span><br>new_col = ta.columns.delete(<span class="hljs-number">2</span>) <br><span class="hljs-built_in">print</span>(new_col)<br><span class="hljs-comment"># 取出&quot;行索引&quot;的列表，并对其进行插入，返回新索引列表</span><br>new_idx = ta.index.insert(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;in&#x27;</span>)<br><span class="hljs-built_in">print</span>(new_idx)<br><span class="hljs-comment"># 通过传入新的索引列表，对DataFrame进行重新排列</span><br><span class="hljs-built_in">print</span>(ta.reindex(index=new_idx, columns=new_col).ffill()) <span class="hljs-comment"># 向前搬运值</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Index([&#x27;城市&#x27;, &#x27;环比&#x27;], dtype=&#x27;object&#x27;)<br>Index([&#x27;i1&#x27;, &#x27;i2&#x27;, &#x27;i3&#x27;, &#x27;i4&#x27;, &#x27;in&#x27;], dtype=&#x27;object&#x27;)<br>    城市     环比<br>i1  北京  101.5<br>i2  上海  101.2<br>i3  广州  101.3<br>i4  深圳  102.0<br>in  深圳  102.0<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(ta.drop([<span class="hljs-string">&#x27;i1&#x27;</span>, <span class="hljs-string">&#x27;i2&#x27;</span>])) <span class="hljs-comment"># 默认操作为axis=0</span><br><span class="hljs-built_in">print</span>(ta.drop([<span class="hljs-string">&#x27;环比&#x27;</span>], axis=<span class="hljs-number">1</span>)) <br><span class="hljs-comment"># 指定axis值是为确定该标签是属于column还是index，axis=1（跨行）即删除&#x27;环比&#x27;这一列中的每一行</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">    城市     环比     定基<br>i3  广州  101.3  120.0<br>i4  深圳  102.0  145.5<br>    城市     定基<br>i1  北京  121.4<br>i2  上海  127.8<br>i3  广州  120.0<br>i4  深圳  145.5<br></code></pre></td></tr></table></figure><h3 id="算术运算法则"><a class="header-anchor" href="#算术运算法则">¶</a>算术运算法则</h3><p>根据行列索引，<strong>补齐</strong>后运算（默认产生新的浮点数），若有缺项，则填充 <code>NaN</code>（可以理解为不为空的数加上 <code>NaN</code> 会变成 <code>NaN</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">a = pd.DataFrame(np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br>b = pd.DataFrame(np.arange(<span class="hljs-number">9</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=======a=======&quot;</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=======b=======&quot;</span>)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;======a*b======&quot;</span>)<br><span class="hljs-built_in">print</span>(a * b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;======a+b======&quot;</span>)<br><span class="hljs-built_in">print</span>(a + b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;======a.add(b)======&quot;</span>)<br><span class="hljs-built_in">print</span>(a.add(b, fill_value = <span class="hljs-number">666</span>)) <br><span class="hljs-comment"># 相较于运算符，能指定参数，将传入的对象对应位置下值为(NaN)，用fill_value进行替代</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">=======a=======<br>    0  1   2   3<br>0  0  1   2   3<br>1  4  5   6   7<br>2  8  9  10  11<br>=======b=======<br>    0  1  2<br>0  0  1  2<br>1  3  4  5<br>2  6  7  8<br>======a*b======<br>    0   1   2   3<br>0   0   1   4 NaN<br>1  12  20  30 NaN<br>2  48  63  80 NaN<br>======a+b======<br>    0   1   2   3<br>0   0   2   4 NaN<br>1   7   9  11 NaN<br>2  14  16  18 NaN<br>======a.add(b)======<br>    0   1   2      3<br>0   0   2   4  669.0<br>1   7   9  11  673.0<br>2  14  16  18  677.0<br></code></pre></td></tr></table></figure><p>二维与一维，或者，一维与零维间，进行广播运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = pd.DataFrame(np.arange(<span class="hljs-number">16</span>).reshape(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>))<br>b = pd.Series(np.arange(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=======a=======&quot;</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=======b=======&quot;</span>)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;======a-10=====&quot;</span>)<br><span class="hljs-built_in">print</span>(a - <span class="hljs-number">10</span>) <span class="hljs-comment"># 二维与零维，广播运算，对每一个元素减10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;======b-10=====&quot;</span>)<br><span class="hljs-built_in">print</span>(b - <span class="hljs-number">10</span>) <span class="hljs-comment"># 一维与零维，广播运算，对每一个元素减10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;======a-b=====&quot;</span>)<br><span class="hljs-built_in">print</span>(a.sub(b, axis = <span class="hljs-number">0</span>)) <span class="hljs-comment"># 二维与一维，并指定跨列运算</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">=======a=======<br>    0   1   2   3<br>0   0   1   2   3<br>1   4   5   6   7<br>2   8   9  10  11<br>3  12  13  14  15<br>=======b=======<br>0    0<br>1    1<br>2    2<br>3    3<br>dtype: int32<br>======a-10=====<br>    0  1  2  3<br>0 -10 -9 -8 -7<br>1  -6 -5 -4 -3<br>2  -2 -1  0  1<br>3   2  3  4  5<br>======b-10=====<br>0   -10<br>1    -9<br>2    -8<br>3    -7<br>dtype: int32<br>======a-b=====<br>    0   1   2   3<br>0  0   1   2   3<br>1  3   4   5   6<br>2  6   7   8   9<br>3  9  10  11  12<br></code></pre></td></tr></table></figure><h3 id="比较运算法则"><a class="header-anchor" href="#比较运算法则">¶</a>比较运算法则</h3><p>只比较<strong>相同索引</strong>的元素（否则会报错），不进行补齐。运算结果为布尔对象</p><p>同样地，二维和一维、一维和零维间为广播运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = pd.DataFrame(np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br>b = pd.DataFrame(np.arange(<span class="hljs-number">12</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=======a=======&quot;</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=======b=======&quot;</span>)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;======a&gt;b=====&quot;</span>)<br><span class="hljs-built_in">print</span>(a &gt; b)  <span class="hljs-comment"># 同一维度，索引必须相同</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;======a&gt;5=====&quot;</span>)<br><span class="hljs-built_in">print</span>(a &lt;= <span class="hljs-number">5</span>) <span class="hljs-comment"># 不同维度，广播运算</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">=======a=======<br>    0  1   2   3<br>0  0  1   2   3<br>1  4  5   6   7<br>2  8  9  10  11<br>=======b=======<br>    0   1   2  3<br>0  12  11  10  9<br>1   8   7   6  5<br>2   4   3   2  1<br>======a&gt;b=====<br>        0      1      2      3<br>0  False  False  False  False<br>1  False  False  False   True<br>2   True   True   True   True<br>======a&gt;5=====<br>        0      1      2      3<br>0   True   True   True   True<br>1   True   True  False  False<br>2  False  False  False  False<br></code></pre></td></tr></table></figure><h3 id="数据的摘要"><a class="header-anchor" href="#数据的摘要">¶</a>数据的摘要</h3><p>摘要，即有损地提取数据特征的过程，如：基本统计（排序等）、分布/累计统计、数据特征、数据挖掘（形成知识）等。</p><p>而摘要的第一个过程即排序，<code>pandas</code> 库提供两个方法：</p><ul><li><p><code>sort_index()</code>：指定轴上根据<strong>索引</strong>进行排序（默认升序）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = pd.DataFrame(np.arange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>), index=[<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;==========a==========&quot;</span>)<br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====x.sort_index()====&quot;</span>)<br><span class="hljs-built_in">print</span>(x.sort_index(axis=<span class="hljs-number">0</span>, ascending=<span class="hljs-literal">True</span>)) <span class="hljs-comment"># 纵向排序</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">==========a==========<br>    0   1   2   3   4<br>c   0   1   2   3   4<br>a   5   6   7   8   9<br>d  10  11  12  13  14<br>b  15  16  17  18  19<br>====x.sort_index()====<br>    0   1   2   3   4<br>a   5   6   7   8   9<br>b  15  16  17  18  19<br>c   0   1   2   3   4<br>d  10  11  12  13  14<br></code></pre></td></tr></table></figure></li><li><p><code>sort_values()</code>：指定轴上根据<strong>数值</strong>进行排序（默认升序）</p><blockquote><p><code>NaN</code> 统一放到排序末尾</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;====x.sort_values()====&quot;</span>)<br><span class="hljs-built_in">print</span>(x.sort_values(<span class="hljs-string">&#x27;d&#x27;</span>, axis=<span class="hljs-number">1</span>, ascending=<span class="hljs-literal">False</span>))<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">====x.sort_values()====<br>    4   3   2   1   0<br>c   4   3   2   1   0<br>a   9   8   7   6   5<br>d  14  13  12  11  10<br>b  19  18  17  16  15<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#概述&quot;&gt;¶&lt;/a&gt;概述&lt;/h2&gt;
&lt;p&gt;Pandas 是 Python 第三方库，提供高性能易用数据类型和分析工具。它基于 Numpy 实现的，故常与 Numpy 、Matplotlib 一同</summary>
      
    
    
    
    <category term="Python" scheme="https://www.joydee.top/categories/Python/"/>
    
    <category term="Python 数据科学" scheme="https://www.joydee.top/categories/Python/Python-%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="Python" scheme="https://www.joydee.top/tags/Python/"/>
    
    <category term="Pandas" scheme="https://www.joydee.top/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib 库的使用</title>
    <link href="https://www.joydee.top/posts/1701cff7/"/>
    <id>https://www.joydee.top/posts/1701cff7/</id>
    <published>2021-07-27T09:11:43.000Z</published>
    <updated>2021-09-07T07:17:26.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h2><p>Matplotlib库由各种可视化类构成， 其 <code>matplotlib.pyplot</code>是绘制各类可视化图形的命令子库（相当于快捷方式）。<br>其引入方式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt <span class="hljs-comment"># plt作为别名</span><br></code></pre></td></tr></table></figure><p>快速使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.plot([<span class="hljs-number">3</span>, <span class="hljs-number">2.3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>]) <span class="hljs-comment"># 若传入一维列表，则将其作为坐标图中的y值，x轴则是列表的索引(自动生成)</span><br>plt.ylabel(<span class="hljs-string">&quot;grade&quot;</span>) <span class="hljs-comment"># 增加y轴名称</span><br>plt.show()<br></code></pre></td></tr></table></figure><p>输出结果：</p><img src="https://cdn.joydee.cloud//matplotlib_output_3_0.png"/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#当传入二维列表，将按X轴和Y轴顺序绘制</span><br>plt.plot([<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5.5</span>, <span class="hljs-number">8</span>], [-<span class="hljs-number">1</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>])<br>plt.axis([-<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">5</span>, <span class="hljs-number">10</span>]) <span class="hljs-comment"># 参数依次为X轴的起点、终点，Y轴的起点、终点</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><img src="https://cdn.joydee.cloud//matplotlib_output_4_1.png"/><h2 id="plot-函数"><a class="header-anchor" href="#plot-函数">¶</a><code>plot</code> 函数</h2><p>用法：<code>plot.plot(X轴数据, Y轴数据，format_string, **kwargs)</code></p><p>其中，<code>format_string</code>：控制曲线的格式字符串，可选，由颜色字符、风格字符、标记字符组成：</p><ul><li>颜色字符如：<code>b</code>：蓝色；<code>#008000</code>：RGB某颜色；<code>0.8</code>：灰度值字符串；…</li><li>风格字符如：<code>-</code>：实线；<code>:</code>：虚线；…</li><li>标记字符，在曲线中每一个数据点的标记符号，如：<code>.</code>：点标记；<code>o</code>：实心圈标记；<code>v</code>：倒三角标记；…</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x = np.arange(<span class="hljs-number">10</span>)<br>plt.plot(x, x * <span class="hljs-number">1.5</span>, <span class="hljs-string">&#x27;bo-&#x27;</span>, <span class="hljs-comment"># 蓝色点实线</span><br>         x, x * <span class="hljs-number">2.5</span>, <span class="hljs-string">&#x27;rx&#x27;</span>,<span class="hljs-comment"># 红色交叉点无实线</span><br>         x, x * <span class="hljs-number">3.5</span>, <span class="hljs-string">&#x27;*&#x27;</span>,<br>         x, x * <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;y-.&#x27;</span>) <span class="hljs-comment">#黄色折点线</span><br>plt.show()<br></code></pre></td></tr></table></figure><p>输出结果：</p><img src="https://cdn.joydee.cloud//matplotlib_output_6_0.png"/><h2 id="pyplot的子绘图区域"><a class="header-anchor" href="#pyplot的子绘图区域">¶</a>pyplot的子绘图区域</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.subplot(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>) <br><span class="hljs-comment"># 建立一个网格，高3宽2，即分成6个子网格。</span><br><span class="hljs-comment"># 而最后一个参数指当前子网格所在位置(从上到下、从左到右)</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><img src="https://cdn.joydee.cloud//matplotlib_output_8_1.png"/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">energy_degradation</span>(<span class="hljs-params">t</span>):</span><br>    <span class="hljs-keyword">return</span> np.exp(-t) * np.cos(<span class="hljs-number">2</span>* np.pi * t)<br><br>x = np.arange(<span class="hljs-number">0.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">0.02</span>) <span class="hljs-comment"># 从0.0到5.0，以0.02依次递增</span><br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>) <span class="hljs-comment"># 分割为高2宽1的网格，且将第一个子网格激活</span><br>plt.plot(x, energy_degradation(x))<br><br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment"># 激活第二个子网格</span><br>plt.plot(x, np.cos(x), <span class="hljs-string">&#x27;r--&#x27;</span>) <span class="hljs-comment"># 绘制余弦曲线，并且是虚线</span><br>plt.show()<br></code></pre></td></tr></table></figure><p>输出结果：</p><img src="https://cdn.joydee.cloud//matplotlib_output_9_0.png"/><h2 id="GridSpec类辅助网格设计"><a class="header-anchor" href="#GridSpec类辅助网格设计">¶</a>GridSpec类辅助网格设计</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.gridspec <span class="hljs-keyword">as</span> gridspec<br><br>gs = gridspec.GridSpec(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>) <span class="hljs-comment"># 3行3列</span><br>ax1 = plt.subplot(gs[<span class="hljs-number">0</span>, :]) <span class="hljs-comment"># 选择第0行，并覆盖所有列</span><br>ax2 = plt.subplot(gs[<span class="hljs-number">1</span>, :-<span class="hljs-number">1</span>]) <span class="hljs-comment"># 选择第1行，覆盖-1之前的所有列</span><br>ax3 = plt.subplot(gs[<span class="hljs-number">1</span>:, -<span class="hljs-number">1</span>]) <span class="hljs-comment"># 选择第1行以下的所有行，选择-1列</span><br>ax4 = plt.subplot(gs[<span class="hljs-number">2</span>, <span class="hljs-number">0</span>])<br>ax5 = plt.subplot(gs[<span class="hljs-number">2</span>, <span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>输出结果：</p><img src="https://cdn.joydee.cloud//matplotlib_output_11_0.png"/><h2 id="pyplot的中文显示"><a class="header-anchor" href="#pyplot的中文显示">¶</a>pyplot的中文显示</h2><p>方法一：通过 <code>rcParams</code> 修改字体</p><p>方法二(推荐)：在有中文输出的地方，增加属性：<code>fontproperties</code></p><p>pyplot的文本显示函数</p><ul><li><p><code>plt.xlabel()</code>：对X轴增加文本标签。<code>plt.</code></p></li><li><p><code>plt.text()</code>：在任意位置增加</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">x = np.arange(<span class="hljs-number">0.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">0.01</span>)<br>plt.title(<span class="hljs-string">r&#x27;正弦波实例 $y = cos(2\pi x)$&#x27;</span>, fontproperties=<span class="hljs-string">&#x27;SimHei&#x27;</span>, fontsize=<span class="hljs-number">22</span>) <span class="hljs-comment"># 支持LaTex语法</span><br>plt.xlabel(<span class="hljs-string">&#x27;时间&#x27;</span>, fontproperties=<span class="hljs-string">&#x27;SimHei&#x27;</span>, fontsize=<span class="hljs-number">20</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;振幅&#x27;</span>, fontproperties=<span class="hljs-string">&#x27;SimHei&#x27;</span>, fontsize=<span class="hljs-number">20</span>)<br>plt.text(<span class="hljs-number">2</span>, -<span class="hljs-number">0.75</span>, <span class="hljs-string">r&#x27;$\mu=100$&#x27;</span>, fontsize=<span class="hljs-number">15</span>) <span class="hljs-comment"># 在点(2,1)处显示该文本</span><br><br>plt.grid(<span class="hljs-literal">True</span>) <span class="hljs-comment"># 网格线显示</span><br>plt.plot(x, np.cos(<span class="hljs-number">2</span> * np.pi * x), <span class="hljs-string">&#x27;r--&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>输出结果：</p><img src="https://cdn.joydee.cloud//matplotlib_output_13_0.png"/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.plot([<span class="hljs-number">3</span>, <span class="hljs-number">2.3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>]) <span class="hljs-comment"># 若传入一维列表，则将其作为坐标图中的y值，x轴则是列表的索引(自动生成)</span><br>plt.ylabel(<span class="hljs-string">&quot;grade&quot;</span>) <span class="hljs-comment"># 增加y轴名称</span><br>plt.grid(<span class="hljs-literal">True</span>)<br><br><span class="hljs-comment">#在图表中增加注释文本，xy为箭头坐标，xytext为文本坐标，arrowprops定义箭头属性，shrink是箭头两侧的缩进</span><br>plt.annotate(<span class="hljs-string">r&#x27;$\mu=100$&#x27;</span>, xy=(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>), xytext=(<span class="hljs-number">1.5</span>, <span class="hljs-number">4.5</span>), arrowprops=<span class="hljs-built_in">dict</span>(facecolor=<span class="hljs-string">&#x27;black&#x27;</span>, shrink=<span class="hljs-number">0.1</span>, width=<span class="hljs-number">1</span>))<br>plt.show()<br></code></pre></td></tr></table></figure><p>输出结果：</p><img src="https://cdn.joydee.cloud//matplotlib_output_14_0.png"/><h2 id="应用"><a class="header-anchor" href="#应用">¶</a>应用</h2><h3 id="plt-pie-函数绘制饼图"><a class="header-anchor" href="#plt-pie-函数绘制饼图">¶</a><code>plt.pie</code> 函数绘制饼图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.pie(<br>    [<span class="hljs-number">45</span>, <span class="hljs-number">30</span>, <span class="hljs-number">15</span>, <span class="hljs-number">10</span>], <span class="hljs-comment"># 占比</span><br>    explode=(<span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), <span class="hljs-comment"># 裂开程度</span><br>    labels=[<span class="hljs-string">&#x27;Chinese&#x27;</span>, <span class="hljs-string">&#x27;Maths&#x27;</span>, <span class="hljs-string">&#x27;English&#x27;</span>, <span class="hljs-string">&#x27;Politics&#x27;</span>], <br>    autopct=<span class="hljs-string">&#x27;%1.2f%%&#x27;</span>, <span class="hljs-comment"># 输出格式</span><br>    shadow=<span class="hljs-literal">False</span>, <span class="hljs-comment"># 是否阴影</span><br>    startangle=<span class="hljs-number">90</span> <span class="hljs-comment"># 起始角度</span><br>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>输出结果：</p><img src="https://cdn.joydee.cloud//matplotlib_output_16_0.png"/><h3 id="面向对象绘制散点图（官方推荐）"><a class="header-anchor" href="#面向对象绘制散点图（官方推荐）">¶</a>面向对象绘制散点图（官方推荐）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">ax = plt.subplot() <span class="hljs-comment"># 不传参则默认为1行1列，ax则是当前绘制子区域对象</span><br>ax.plot(np.random.randn(<span class="hljs-number">100</span>), <span class="hljs-number">10</span> * np.random.randn(<span class="hljs-number">100</span>), <span class="hljs-string">&#x27;o&#x27;</span>)<br><span class="hljs-comment"># randn()函数返回一组样本（传入参数指定容量，即100），并具有标准正态分布</span><br>ax.set_title(<span class="hljs-string">&#x27;Simple Scatter&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>输出结果：</p><img src="https://cdn.joydee.cloud//matplotlib_output_18_0.png"/>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#概述&quot;&gt;¶&lt;/a&gt;概述&lt;/h2&gt;
&lt;p&gt;Matplotlib库由各种可视化类构成， 其 &lt;code&gt;matplotlib.pyplot&lt;/code&gt;是绘制各类可视化图形的命令子库（相当于快捷方</summary>
      
    
    
    
    <category term="Python" scheme="https://www.joydee.top/categories/Python/"/>
    
    <category term="Python 数据科学" scheme="https://www.joydee.top/categories/Python/Python-%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="Python" scheme="https://www.joydee.top/tags/Python/"/>
    
    <category term="Matplotlib" scheme="https://www.joydee.top/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Numpy 库的使用</title>
    <link href="https://www.joydee.top/posts/f6f1f2a/"/>
    <id>https://www.joydee.top/posts/f6f1f2a/</id>
    <published>2021-07-25T00:02:43.000Z</published>
    <updated>2021-09-07T07:17:26.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h2><p>作为Python的一种科学计算的拓展程序库，Numpy（Numerical Python） 提供了更加强大的N维数组对象<code>nparray</code> ，用于存储以及处理矩阵，提供了线性代数、傅里叶变换和随机数生成函数</p><p>引入方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br></code></pre></td></tr></table></figure><p><code>nparray</code> 是 Numpy 提供的N维数组对象（内部的值不应该理解为坐标!）</p><blockquote><p>N维数组是机器学习和神经网络的主要数据结构</p></blockquote><p>只有当该数组对象中的所有元素<strong>类型相同</strong>，才能充分发挥 Numpy 优势</p><p>其特点：</p><ol><li>不需要再对数组每一元素进行遍历运算</li><li>设置专门的数组对象（底层由C实现），经过优化，提升运算速度</li><li>由于科学计算中，一个维度所有数据的类型往往相同，而提供的数组对象采用相同的数据类型，节省运算和存储空间</li></ol><p>Numpy更加详细的操作可参阅：<a href="https://github.com/fengdu78/Data-Science-Notes/blob/master/2.numpy/1.numpy-beginner.ipynb">光城同学的笔记</a></p><h2 id="数组创建"><a class="header-anchor" href="#数组创建">¶</a>数组创建</h2><h3 id="创建基本数组"><a class="header-anchor" href="#创建基本数组">¶</a>创建基本数组</h3><p>格式：<code>x = np.array(list/tuple, dtype=np.类型)</code></p><p>0维：即标量，如 3.14</p><p>一维数组：比如一个特征向量</p><img src="https://cdn.joydee.cloud//20210825172659.png"/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]) <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a)) <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br>b = np.array([<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>])<br>c = a ** <span class="hljs-number">2</span> + b ** <span class="hljs-number">3</span> <span class="hljs-comment"># 维度相同，直接运算</span><br><span class="hljs-built_in">print</span>(c) <span class="hljs-comment"># 结果为[729 513 347 225 141] </span><br></code></pre></td></tr></table></figure><p>二维数组：比如一个样本-特征矩阵</p><img src="https://cdn.joydee.cloud//20210825172715.png"/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">d = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>]])<br><span class="hljs-built_in">print</span>(d.shape) <span class="hljs-comment"># (2, 5)</span><br><span class="hljs-built_in">print</span>(d.ndim) <span class="hljs-comment"># 维度：2</span><br><span class="hljs-built_in">print</span>(d.size) <span class="hljs-comment"># 2*5=10</span><br>d = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>              [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],<br>              [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]])<br><span class="hljs-built_in">print</span>(d.ndim) <span class="hljs-comment"># 维度仍然是二维</span><br></code></pre></td></tr></table></figure><p>三维数组：比如RGB图片（宽<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span>高<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span>通道(即长)）</p><img src="https://cdn.joydee.cloud//20210825174715.png"/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">d = np.array([<br>    [[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>     [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],<br>     [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]],<br>    [[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>     [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],<br>     [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]]<br>])<br><span class="hljs-built_in">print</span>(d.ndim) <span class="hljs-comment"># 维度是三维,因为访问的下标格式是：d[a][b][c]</span><br></code></pre></td></tr></table></figure><h3 id="创建特殊数组"><a class="header-anchor" href="#创建特殊数组">¶</a>创建特殊数组</h3><ul><li><p>从数值范围创建数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">e = np.arange(<span class="hljs-number">15</span>) <span class="hljs-comment"># 返回ndarray类型，元素从0至n-1</span><br></code></pre></td></tr></table></figure></li><li><p>创建全 1 数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">e = np.ones((<span class="hljs-number">3</span>, <span class="hljs-number">6</span>))<span class="hljs-comment"># 传入元组(3,6)，返回3*6的全1数组</span><br>e = np.ones_like(d)<span class="hljs-comment"># 根据数组d的形状生成全1数组</span><br></code></pre></td></tr></table></figure></li><li><p>创建单位矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">e = np.eye(<span class="hljs-number">5</span>) <span class="hljs-comment"># 创建n*n的单位矩阵，默认是浮点数类型</span><br></code></pre></td></tr></table></figure></li><li><p>类型转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">e = e.astype(np.int64)  <span class="hljs-comment"># 类型转换</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="索引与切片"><a class="header-anchor" href="#索引与切片">¶</a>索引与切片</h2><p>索引：获取数组中特定位置元素的过程</p><p>切片：获取数组元素<strong>子集</strong>的过程</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]) <span class="hljs-comment"># [3, 4] 一维数组的切片</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span> : <span class="hljs-number">4</span> : <span class="hljs-number">2</span>]) <span class="hljs-comment"># [起始编号:终止编号(不含):步长]，故返回[2,4]</span><br></code></pre></td></tr></table></figure><p>高级索引：</p><blockquote><p>在多维数组的切片中，使用 <code>,</code> 来区分维度</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">结果为：</span><br><span class="hljs-string">[[[ 0  1  2  3]</span><br><span class="hljs-string">  [ 4  5  6  7]</span><br><span class="hljs-string">  [ 8  9 10 11]]</span><br><span class="hljs-string"></span><br><span class="hljs-string"> [[12 13 14 15]</span><br><span class="hljs-string">  [16 17 18 19]</span><br><span class="hljs-string">  [20 21 22 23]]]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(a[-<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">3</span>])<br><span class="hljs-comment"># 返回17</span><br><span class="hljs-built_in">print</span>(a[:, <span class="hljs-number">1</span>, -<span class="hljs-number">3</span>])<br><span class="hljs-comment"># 不考虑第一维度，第二维度索引为1，第三维度索引为-3的元素，故返回[ 5 17]</span><br><span class="hljs-built_in">print</span>(a[:, <span class="hljs-number">1</span>:<span class="hljs-number">3</span>, :])<br><span class="hljs-comment"># 只考虑第二维度在1到3的元素</span><br><span class="hljs-built_in">print</span>(a[:, :, ::<span class="hljs-number">2</span>])<br><span class="hljs-comment"># 按步长为2返回元素</span><br></code></pre></td></tr></table></figure><h3 id="创建随机数组"><a class="header-anchor" href="#创建随机数组">¶</a>创建随机数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>) <br><span class="hljs-comment"># 生成3*4*5数组，每一元素随机取自浮点数[0, 1)，且满足均匀分布</span><br>a = np.random.randn(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br><span class="hljs-comment"># 生成3*4*5数组，每一元素随机取自浮点数[0, 1)，满足正态分布</span><br>a = np.random.randint(<span class="hljs-number">800</span>, <span class="hljs-number">900</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">8</span>))<br><span class="hljs-comment"># 生成3*8数组，范围取自[800, 900)</span><br></code></pre></td></tr></table></figure><h2 id="数组的算术运算"><a class="header-anchor" href="#数组的算术运算">¶</a>数组的算术运算</h2><h3 id="数组与标量间的运算"><a class="header-anchor" href="#数组与标量间的运算">¶</a>数组与标量间的运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">24</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>)<br>a = a / a.mean()  <span class="hljs-comment"># 相当于对矩阵每一元素除以整个矩阵的平均值</span><br>b = a + <span class="hljs-number">3</span> <span class="hljs-comment"># 相当于对矩阵每一元素加3</span><br></code></pre></td></tr></table></figure><h3 id="数组之间的运算"><a class="header-anchor" href="#数组之间的运算">¶</a>数组之间的运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>])<br><span class="hljs-comment"># print(np.square(a)) # 对数组每一元素取平方</span><br>b = np.array([<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>])<br><span class="hljs-built_in">print</span>(a + b)  <span class="hljs-comment"># [19 10 16]</span><br><span class="hljs-built_in">print</span>(a &gt; b)  <span class="hljs-comment"># [ True False True]</span><br><span class="hljs-built_in">print</span>(np.maximum(a, b))  <span class="hljs-comment"># [10  8  9]</span><br></code></pre></td></tr></table></figure><p>Numpy 数组间的基础运算是一对一，当两数组的 <code>shape()</code> 相等，则两个数组相同位置的元素进行运算。</p><h3 id="数组广播"><a class="header-anchor" href="#数组广播">¶</a>数组广播</h3><p>若两数组的 <code>shape()</code> 不同，则会自动触发广播机制。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>              [<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>],<br>              [<span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>],<br>              [<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>]])<br>b = np.arange(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(a + b)<br></code></pre></td></tr></table></figure><img src="https://cdn.joydee.cloud//20210825181755.png"/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(np.arange(<span class="hljs-number">3</span>) + <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><img src="https://cdn.joydee.cloud//20210825182027.png"/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)) + np.arange(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><img src="https://cdn.joydee.cloud//20210825182039.png"/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(np.arange(<span class="hljs-number">3</span>).reshape((<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)) + np.arange(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><img src="https://cdn.joydee.cloud//20210825182052.png"/><h2 id="数据的保存及读入"><a class="header-anchor" href="#数据的保存及读入">¶</a>数据的保存及读入</h2><p>CSV文件格式：以逗号作为分隔，只能存储一维/二维的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">100</span>).reshape(<span class="hljs-number">5</span>, <span class="hljs-number">20</span>)<br>np.savetxt(<span class="hljs-string">&#x27;woc.txt&#x27;</span>, a, fmt=<span class="hljs-string">&#x27;%.1f&#x27;</span>, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-comment"># 保存数据</span><br>b = np.loadtxt(<span class="hljs-string">&#x27;woc.txt&#x27;</span>, dtype=np.int32, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-comment"># 读入数据</span><br></code></pre></td></tr></table></figure><p>多维数据的存取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">100</span>).reshape(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<br><span class="hljs-comment"># a.tofile(&quot;wtf.txt&quot;, sep=&quot;,&quot;, format=&#x27;%d&#x27;) # 逐一列出元素</span><br>a.tofile(<span class="hljs-string">&quot;a.dat&quot;</span>, sep=<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;%d&#x27;</span>) <span class="hljs-comment"># 备份为二进制文件</span><br>b = np.fromfile(<span class="hljs-string">&quot;a.dat&quot;</span>, dtype=np.int32, sep=<span class="hljs-string">&quot;,&quot;</span>).reshape(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<br><span class="hljs-comment"># 第三个参数count为读入元素个数，-1表示读入整个文件</span><br></code></pre></td></tr></table></figure><p>保存与读入 <code>.npy</code> 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">np.save(<span class="hljs-string">&quot;wtf.npy&quot;</span>, a)<br>b = np.load(<span class="hljs-string">&quot;wtf.npy&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="Numpy统计函数"><a class="header-anchor" href="#Numpy统计函数">¶</a>Numpy统计函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">15</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[[ 0  1  2  3  4]</span><br><span class="hljs-string"> [ 5  6  7  8  9]</span><br><span class="hljs-string"> [10 11 12 13 14]]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">sum</span>(a)) <span class="hljs-comment"># 105</span><br><span class="hljs-built_in">print</span>(np.mean(a)) <span class="hljs-comment"># 7.0</span><br><span class="hljs-built_in">print</span>(np.mean(a, axis=<span class="hljs-number">0</span>))<br><span class="hljs-comment"># axis=0，代表逐列计算（每一列各自运算），所以得到[5. 6. 7. 8. 9.]</span><br><span class="hljs-built_in">print</span>(np.mean(a, axis=<span class="hljs-number">1</span>))<br><span class="hljs-comment"># axis=1，代表逐行计算（每一行各自运算），所以得到[ 2.  7. 12.]</span><br><span class="hljs-built_in">print</span>(np.average(a, axis=<span class="hljs-number">0</span>, weights=[<span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>]))<br><span class="hljs-comment"># 加权运算 [2.1875 3.1875 4.1875 5.1875 6.1875]</span><br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">max</span>(a)) <span class="hljs-comment"># 14</span><br><span class="hljs-built_in">print</span>(np.argmax(a))<br><span class="hljs-comment"># 最大值的坐标（扁平化后）：14（即第14个元素）</span><br><span class="hljs-built_in">print</span>(np.unravel_index(np.argmax(a), a.shape))<br><span class="hljs-comment"># 将扁平化坐标转换为多维下标：(2, 4)</span><br></code></pre></td></tr></table></figure><h3 id="梯度函数"><a class="header-anchor" href="#梯度函数">¶</a>梯度函数</h3><p>一维数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#XY坐标轴连续三个X坐标对应的Y轴值：a,b,c，其中b的梯度是(c-a)/2</span><br>a = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>, (<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-comment"># [12 11 19 15  8]</span><br><span class="hljs-built_in">print</span>(np.gradient(a))<br><span class="hljs-comment"># [-1.   3.5  2.  -5.5 -7. ]</span><br></code></pre></td></tr></table></figure><p>二维数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[[1 2 3 3 5]</span><br><span class="hljs-string"> [1 9 6 6 2]</span><br><span class="hljs-string"> [5 2 8 7 6]]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(np.gradient(a))  <span class="hljs-comment"># 由于是二维的数值，在计算梯度时需要考虑两个方向</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[</span><br><span class="hljs-string">array([[ 0. ,  7. ,  3. ,  3. , -3. ],</span><br><span class="hljs-string">       [ 2. ,  0. ,  2.5,  2. ,  0.5],</span><br><span class="hljs-string">       [ 4. , -7. ,  2. ,  1. ,  4. ]]), </span><br><span class="hljs-string">array([[ 1. ,  1. ,  0.5,  1. ,  2. ],</span><br><span class="hljs-string">       [ 8. ,  2.5, -1.5, -2. , -4. ],</span><br><span class="hljs-string">       [-3. ,  1.5,  2.5, -1. , -1. ]])</span><br><span class="hljs-string">]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#概述&quot;&gt;¶&lt;/a&gt;概述&lt;/h2&gt;
&lt;p&gt;作为Python的一种科学计算的拓展程序库，Numpy（Numerical Python） 提供了更加强大的N维数组对象&lt;code&gt;nparray&lt;/c</summary>
      
    
    
    
    <category term="Python" scheme="https://www.joydee.top/categories/Python/"/>
    
    <category term="Python 数据科学" scheme="https://www.joydee.top/categories/Python/Python-%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="Python" scheme="https://www.joydee.top/tags/Python/"/>
    
    <category term="Numpy" scheme="https://www.joydee.top/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>线性回归模型及其实现方式</title>
    <link href="https://www.joydee.top/posts/6abb1e1f/"/>
    <id>https://www.joydee.top/posts/6abb1e1f/</id>
    <published>2021-07-22T21:16:41.000Z</published>
    <updated>2021-09-07T07:17:26.207Z</updated>
    
    <content type="html"><![CDATA[<p>给定<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>维输入：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">x</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">\mathbf{x}=[x_1, x_2, ..., x_n]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord mathbf">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></p><p>以及<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>维权重和一个标量偏差：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">w</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>w</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>w</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>w</mi><mi>n</mi></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup><mo separator="true">,</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">\mathbf{w}=[w_1, w_2, ..., w_n]^T, b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span></span></span></span></p><p>输出是输入的加权和：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>y</mi><mo>=</mo><msub><mi>w</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>w</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>w</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y=w_1x_1+w_2x_2+...+w_nx_n+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p><p>向量版本：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>y</mi><mo>=</mo><mo>&lt;</mo><mi mathvariant="bold">w</mi><mo separator="true">,</mo><mi mathvariant="bold">x</mi><mo>&gt;</mo><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y=&lt;\mathbf{w},\mathbf{x}&gt;+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathbf">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord mathnormal">b</span></span></span></span></span></p><p>线性模型可看作单层神经网络</p><h2 id="衡量预估质量"><a class="header-anchor" href="#衡量预估质量">¶</a>衡量预估质量</h2><p>假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 是真实值，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>y</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>是预估值，平方损失：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>e</mi><mi>l</mi><mi>l</mi><mo stretchy="false">(</mo><mi>y</mi><mo separator="true">,</mo><mover accent="true"><mi>y</mi><mo>^</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mover accent="true"><mi>y</mi><mo>^</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">ell(y,\hat{y})=\frac{1}{2}(y-\hat{y})^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">ll</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="训练数据"><a class="header-anchor" href="#训练数据">¶</a>训练数据</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>个样本，记为：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">X</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi mathvariant="bold">x</mi><mn mathvariant="bold">1</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold">x</mi><mn mathvariant="bold">2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi mathvariant="bold">x</mi><mi mathvariant="bold">n</mi></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup><mo separator="true">,</mo><mi mathvariant="bold">Y</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi mathvariant="bold">y</mi><mn mathvariant="bold">1</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold">y</mi><mn mathvariant="bold">2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi mathvariant="bold">y</mi><mi mathvariant="bold">n</mi></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">\mathbf{X}=[\mathbf{x_1}, \mathbf{x_2},...,\mathbf{x_n}]^T, \mathbf{Y}=[\mathbf{y_1}, \mathbf{y_2},...,\mathbf{y_n}]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord mathbf">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathbf">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathbf">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathbf">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.161108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathbf" style="margin-right:0.02875em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01597em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01597em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.161108em;"><span style="top:-2.5500000000000003em;margin-left:-0.01597em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></p><h2 id="参数学习"><a class="header-anchor" href="#参数学习">¶</a>参数学习</h2><p>训练损失：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">ℓ</mi><mo stretchy="false">(</mo><mi mathvariant="bold">X</mi><mo separator="true">,</mo><mi mathvariant="bold">y</mi><mo separator="true">,</mo><mi mathvariant="bold">w</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>n</mi></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mrow><mo fence="true">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mrow><mo fence="true">⟨</mo><msub><mi mathvariant="bold">x</mi><mi>i</mi></msub><mo separator="true">,</mo><mi mathvariant="bold">w</mi><mo fence="true">⟩</mo></mrow><mo>−</mo><mi>b</mi><mo fence="true">)</mo></mrow><mn>2</mn></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>n</mi></mrow></mfrac><mi mathvariant="normal">∥</mi><mi mathvariant="bold">y</mi><mo>−</mo><mi mathvariant="bold">X</mi><mi mathvariant="bold">w</mi><mo>−</mo><mi>b</mi><msup><mi mathvariant="normal">∥</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\ell(\mathbf{X}, \mathbf{y}, \mathbf{w}, b)=\frac{1}{2 n}\sum_{i=1}^{n}\left(y_{i}-\left\langle\mathbf{x}_{i},\mathbf{w}\right\rangle-b\right)^{2}=\frac{1}{2 n}\|\mathbf{y}-\mathbf{X} \mathbf{w}-b\|^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">ℓ</span><span class="mopen">(</span><span class="mord mathbf">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">⟨</span><span class="mord"><span class="mord mathbf">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="mclose delimcenter" style="top:0em;">⟩</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∥</span><span class="mord mathbf" style="margin-right:0.01597em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76944em;vertical-align:-0.08333em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">Xw</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p>在训练过程中应关心如何将损失最小化，而不是过多地关注损失值具体多少</p></blockquote><p>最小化损失来学习参数：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi mathvariant="bold">w</mi><mo lspace="0em" rspace="0em">∗</mo></msup><mo separator="true">,</mo><msup><mi mathvariant="bold">b</mi><mo lspace="0em" rspace="0em">∗</mo></msup><mo>=</mo><mi><munder><mo><mi>arg</mi><mo>⁡</mo><mi>min</mi><mo>⁡</mo></mo><mrow><mi mathvariant="bold">w</mi><mo separator="true">,</mo><mi>b</mi></mrow></munder></mi><mi mathvariant="normal">ℓ</mi><mo stretchy="false">(</mo><mi mathvariant="bold">X</mi><mo separator="true">,</mo><mi mathvariant="bold">y</mi><mo separator="true">,</mo><mi mathvariant="bold">w</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathbf{w}^{*}, \mathbf{b}^{*}=\underset{\mathbf{w}, b}{\arg \min } \ell(\mathbf{X}, \mathbf{y}, \mathbf{w}, b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.933136em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.738696em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathbf">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.738696em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.8326559999999998em;vertical-align:-1.0826559999999998em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6678600000000001em;"><span style="top:-2.153452em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbf mtight" style="margin-right:0.01597em;">w</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mop">ar<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0826559999999998em;"><span></span></span></span></span></span></span><span class="mord">ℓ</span><span class="mopen">(</span><span class="mord mathbf">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span></span></p><blockquote><p>即：找出一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">w</mi><mo separator="true">,</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">\mathbf{w},b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span></span></span></span>，使得损失函数最小化。</p></blockquote><h2 id="显式解"><a class="header-anchor" href="#显式解">¶</a>显式解</h2><p>由于线性模型中损失函数是凸函数，故最优解满足：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi mathvariant="bold">w</mi><mo>∗</mo></msup><mo>=</mo><mo stretchy="false">(</mo><msup><mi mathvariant="bold">X</mi><mi>T</mi></msup><mi mathvariant="bold">X</mi><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mi mathvariant="bold">X</mi><mi>T</mi></msup><mi mathvariant="bold">y</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\mathbf{w}^* = (\mathbf X^T \mathbf X)^{-1}\mathbf X^T \mathbf{y}.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.738696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.738696em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathbf">X</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathbf">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathbf" style="margin-right:0.01597em;">y</span><span class="mord">.</span></span></span></span></span></p><h2 id="梯度下降"><a class="header-anchor" href="#梯度下降">¶</a>梯度下降</h2><p>梯度下降就是通过不断沿着反梯度的方向更新参数求解。</p><p>挑选一个初始值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">w</mi><mn mathvariant="bold">0</mn></msub></mrow><annotation encoding="application/x-tex">\mathbf{w_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.59444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01597em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，重复迭代参数：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">w</mi><mi>t</mi></msub><mo>=</mo><msub><mi mathvariant="bold">w</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mi>η</mi><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">ℓ</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi mathvariant="bold">w</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\mathbf{w}_t=\mathbf{w}_{t-1}-\eta\frac{\partial \ell}{\partial \mathbf{w}_{t-1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.59444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.01597em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.791661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.01597em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.366873em;vertical-align:-0.486765em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathbf mtight" style="margin-right:0.01597em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173142857142857em;"><span style="top:-2.357em;margin-left:-0.01597em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.20252142857142857em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight">ℓ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.486765em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>η</mi></mrow><annotation encoding="application/x-tex">\eta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span> 为学习率（步长的超参数）</p><p><strong>小批量随机梯度下降</strong>:每次需要计算更新的时候随机采样<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">B</mi></mrow><annotation encoding="application/x-tex">\mathcal{B}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathcal" style="margin-right:0.03041em;">B</span></span></span></span>个样本（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">B</mi></mrow><annotation encoding="application/x-tex">\mathcal{B}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathcal" style="margin-right:0.03041em;">B</span></span></span></span>，批量大小，也是重要的超参数）：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>i</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>i</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>i</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">i_1,i_2,...,i_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（无需遍历整个数据集）来近似损失：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="script">B</mi><mi mathvariant="normal">∣</mi></mrow></mfrac><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi mathvariant="script">B</mi></mrow></munder><mrow><mi mathvariant="normal">ℓ</mi><mo stretchy="false">(</mo><msub><mi mathvariant="bold">x</mi><mi mathvariant="bold">i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub><mo separator="true">,</mo><mi mathvariant="bold">w</mi><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">\frac{1}{|\mathcal{B}|}\sum_{i\in \mathcal{B}}{\ell(\mathbf{\mathbf{x}_i}, y_i, \mathbf{w})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.6431459999999998em;vertical-align:-1.321706em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord mathcal" style="margin-right:0.03041em;">B</span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathcal mtight" style="margin-right:0.03041em;">B</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">ℓ</span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="mclose">)</span></span></span></span></span></span></p><p>故更新过程：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi mathvariant="bold">w</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>←</mo><mi mathvariant="bold">w</mi><mo>−</mo><mfrac><mi>η</mi><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="script">B</mi><mi mathvariant="normal">∣</mi></mrow></mfrac><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi mathvariant="script">B</mi></mrow></munder><msub><mi mathvariant="normal">∂</mi><mi mathvariant="bold">w</mi></msub><mo stretchy="false">(</mo><msup><mi mathvariant="normal">ℓ</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">(</mo><mi mathvariant="bold">w</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="bold">w</mi><mo>−</mo><mfrac><mi>η</mi><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="script">B</mi><mi mathvariant="normal">∣</mi></mrow></mfrac><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi mathvariant="script">B</mi></mrow></munder><msup><mi mathvariant="bold">x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mrow><mo fence="true">(</mo><msup><mi mathvariant="bold">w</mi><mi>T</mi></msup><msup><mi mathvariant="bold">x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mi>b</mi><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>←</mo><mi>b</mi><mo>−</mo><mfrac><mi>η</mi><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="script">B</mi><mi mathvariant="normal">∣</mi></mrow></mfrac><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi mathvariant="script">B</mi></mrow></munder><msub><mi mathvariant="normal">∂</mi><mi>b</mi></msub><mo stretchy="false">(</mo><msup><mi mathvariant="normal">ℓ</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">(</mo><mi mathvariant="bold">w</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>b</mi><mo>−</mo><mfrac><mi>η</mi><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="script">B</mi><mi mathvariant="normal">∣</mi></mrow></mfrac><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi mathvariant="script">B</mi></mrow></munder><mrow><mo fence="true">(</mo><msup><mi mathvariant="bold">w</mi><mi>T</mi></msup><msup><mi mathvariant="bold">x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mi>b</mi><mo>−</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">)</mo></mrow><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned} \mathbf{w} &amp;\leftarrow \mathbf{w} -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \partial_{\mathbf{w}} (\ell^{(i)}(\mathbf{w}, b)) = \mathbf{w} - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \mathbf{x}^{(i)} \left(\mathbf{w}^T \mathbf{x}^{(i)} + b - y^{(i)}\right),\\ b &amp;\leftarrow b -  \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \partial_b (\ell^{(i)}(\mathbf{w}, b))  = b - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \left(\mathbf{w}^T \mathbf{x}^{(i)} + b - y^{(i)}\right). \end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.543412em;vertical-align:-2.521706em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.021706em;"><span style="top:-5.021706em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">w</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.521706em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.021706em;"><span style="top:-5.021706em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord mathcal" style="margin-right:0.03041em;">B</span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathcal mtight" style="margin-right:0.03041em;">B</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.161108em;"><span style="top:-2.5500000000000003em;margin-left:-0.05556em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbf mtight" style="margin-right:0.01597em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord">ℓ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord mathcal" style="margin-right:0.03041em;">B</span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathcal mtight" style="margin-right:0.03041em;">B</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathbf">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathbf">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.15em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord mathcal" style="margin-right:0.03041em;">B</span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathcal mtight" style="margin-right:0.03041em;">B</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05556em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord">ℓ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord mathcal" style="margin-right:0.03041em;">B</span><span class="mord">∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathcal mtight" style="margin-right:0.03041em;">B</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathbf">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.521706em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p>一般来说，求解梯度是最耗费时间的。因而小批量随机梯度下降，是深度学习默认的求解算法。</p></blockquote><p>因此，梯度下降的超参数：<strong>批量大小</strong>、<strong>学习率</strong></p><h2 id="线性回归的从零开始实现"><a class="header-anchor" href="#线性回归的从零开始实现">¶</a>线性回归的从零开始实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&quot;KMP_DUPLICATE_LIB_OK&quot;</span>] = <span class="hljs-string">&quot;TRUE&quot;</span><br></code></pre></td></tr></table></figure><h3 id="生成数据集"><a class="header-anchor" href="#生成数据集">¶</a>生成数据集</h3><p>带有噪声的线性模型构造一个人造数据集：线性模型参数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">w</mi><mo>=</mo><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mo>−</mo><mn>3.4</mn><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">\mathbf{w}=[2, -3.4]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44444em;vertical-align:0em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord">3.4</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>=</mo><mn>4.2</mn></mrow><annotation encoding="application/x-tex">b=4.2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4.2</span></span></span></span>以及噪声项生成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ϵ</span></span></span></span>生成数据集及其标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sysnthetic_data</span>(<span class="hljs-params">w, b, m</span>):</span> <span class="hljs-comment"># m为样本数量</span><br>    <span class="hljs-comment"># 均值为0、方差为1的随机数组成的m*len(w)的矩阵</span><br>    X = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, (m, <span class="hljs-built_in">len</span>(w)))<br>    <span class="hljs-comment"># y = Xw + b</span><br>    y = torch.matmul(X, w) + b<br>    <span class="hljs-comment"># 同时加入随机噪音</span><br>    y += torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, y.shape)<br>    <span class="hljs-keyword">return</span> X, y.reshape((-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)) <br>    <span class="hljs-comment"># 等价于reshape((n,1))</span><br><br><span class="hljs-comment"># 真实值：</span><br>true_w = torch.tensor([<span class="hljs-number">2</span>, -<span class="hljs-number">3.4</span>])<br>true_b = <span class="hljs-number">4.2</span><br><span class="hljs-comment"># 生成数据集以及标注</span><br>features, labels = sysnthetic_data(true_w, true_b, <span class="hljs-number">1000</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第一个数据：&quot;</span> + <span class="hljs-built_in">str</span>(features[<span class="hljs-number">0</span>]) + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">str</span>(labels[<span class="hljs-number">0</span>]))<br><br><span class="hljs-comment"># 绘制第一个特征的数据及其对应的标注的图</span><br>d2l.set_figsize()<br>d2l.plt.scatter(features[:, <span class="hljs-number">1</span>].detach().numpy(),<br>                <span class="hljs-comment"># detach分离出数值（不再含梯度）</span><br>                labels.detach().numpy(), <span class="hljs-number">1</span>) <br></code></pre></td></tr></table></figure><pre><code>第一个数据：tensor([1.1518, 0.0801]) tensor([6.2316])</code></pre><p>​<img src="https://cdn.joydee.cloud//08_linear_output_4_2.svg"/></p><p>​</p><blockquote><p>注意到，<code>features</code> 中每一行均包含一个<strong>二维</strong>数据样本，而<code>labels</code>中每一行都包含<strong>一维</strong>标签值（一个标量）</p></blockquote><h3 id="读取数据集"><a class="header-anchor" href="#读取数据集">¶</a>读取数据集</h3><p>定义一个函数，用于接受批量大小、特征矩阵、标签向量作为输入，以生成大小为 <code>batch_size</code> 的小批量，每个小批量包含一组特征以及标签。（简而言之，定义的函数能够打乱数据集中的样本并以<strong>小批量的方式获取数据</strong>）</p><blockquote><p>手动实现的缺点：需要将所有数据加载到内存中，并执行大量的随机内存访问。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">data_iter</span>(<span class="hljs-params">batch_size, features, labels</span>):</span><br>    m = <span class="hljs-built_in">len</span>(features)<br>    <span class="hljs-comment"># 获取0到m-1的下标数组</span><br>    indices = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(m))<br>    <span class="hljs-comment"># 打乱下标，用以随机读取样本</span><br>    random.shuffle(indices)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, m, batch_size):<br>        batch_indices = torch.tensor(<br>            indices[i : <span class="hljs-built_in">min</span>(i+batch_size, m)]<br>        ) <span class="hljs-comment"># 取批量的下标，转化为tensor</span><br>        <span class="hljs-keyword">yield</span> features[batch_indices], labels[batch_indices]<br><br>batch_size = <span class="hljs-number">10</span><br><span class="hljs-comment"># 预览第一批的数据及其标注</span><br><span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter(batch_size, features, labels):<br>    <span class="hljs-built_in">print</span>(X, <span class="hljs-string">&#x27;\n&#x27;</span>, y)<br>    <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><pre><code>tensor([[ 1.1161, -0.3515],        [-0.7912,  0.1008],        [-1.2919, -2.4004],        [ 2.1880,  0.6330],        [ 1.5566,  0.6568],        [-0.8294, -0.1094],        [ 0.4108, -0.5271],        [ 0.5568,  0.0646],        [ 0.4603, -1.7273],        [-1.1144,  2.1087]])  tensor([[ 7.6340],        [ 2.2774],        [ 9.7785],        [ 6.4373],        [ 5.0671],        [ 2.9212],        [ 6.8226],        [ 5.0832],        [10.9887],        [-5.2094]])</code></pre><blockquote><p><code>yield</code> 即返回值的同时记住这个返回的位置，下次迭代就从这个位置开始。</p></blockquote><h3 id="初始化模型参数"><a class="header-anchor" href="#初始化模型参数">¶</a>初始化模型参数</h3><p>从均值为0、标准差为0.01的正态分布中采样随机数来初始化权重，并将偏置初始化为0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">w = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>), requires_grad=<span class="hljs-literal">True</span>)<br>b = torch.zeros(<span class="hljs-number">1</span>, requires_grad=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h3 id="定义线性回归模型"><a class="header-anchor" href="#定义线性回归模型">¶</a>定义线性回归模型</h3><p>将模型的输入和参数同模型的输出关联起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">linreg</span>(<span class="hljs-params">X, w, b</span>):</span><br>    <span class="hljs-keyword">return</span> torch.matmul(X, w) + b <span class="hljs-comment"># 采用广播机制，向量+标量，标量会被加到向量的每个分量上</span><br></code></pre></td></tr></table></figure><h3 id="定义-单个样本-损失函数："><a class="header-anchor" href="#定义-单个样本-损失函数：">¶</a>定义(单个样本)损失函数：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">squared_loss</span>(<span class="hljs-params">y_hat, y</span>):</span> <span class="hljs-comment"># 传入预测值、真实值</span><br>    <span class="hljs-keyword">return</span> (y_hat - y.reshape(y_hat.shape)) ** <span class="hljs-number">2</span> / <span class="hljs-number">2</span> <span class="hljs-comment"># 确保形状相同</span><br></code></pre></td></tr></table></figure><h3 id="定义优化算法"><a class="header-anchor" href="#定义优化算法">¶</a>定义优化算法</h3><p>小批量随机梯度下降：<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="bold">p</mi><mi>t</mi></msub><mo>=</mo><msub><mi mathvariant="bold">p</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><mi>η</mi><mfrac><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">ℓ</mi></mrow><mrow><mi mathvariant="normal">∂</mi><msub><mi mathvariant="bold">p</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">\mathbf{p}_t=\mathbf{p}_{t-1}-\eta\frac{\partial \ell}{\partial \mathbf{p}_{t-1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.63888em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.791661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.366873em;vertical-align:-0.486765em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathbf mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173142857142857em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.20252142857142857em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight">ℓ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.486765em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><blockquote><p>用批量大小（batch_size）来归一化步长，这样步长大小就不会取决于我们对批量大小的选择。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sgd</span>(<span class="hljs-params">params, lr, batch_size</span>):</span> <br><span class="hljs-comment"># params的值包含w,b、lr（学习率）、batch_size</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> params:<br>            param -= lr * param.grad / batch_size<br>            param.grad.zero_() <span class="hljs-comment"># 手动设置梯度为0</span><br></code></pre></td></tr></table></figure><blockquote><p><code>with</code> 关键字能够自动处理上下文环境产生的异常。并非所有操作都需要进行计算图的生成（计算过程的构建，以便梯度反向传播等操作），通过<code>torch.no_grad()</code>来强制包裹的内容不进行计算图的构建。</p></blockquote><h3 id="训练"><a class="header-anchor" href="#训练">¶</a>训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 指定超参数</span><br>lr = <span class="hljs-number">0.03</span><br>num_epochs = <span class="hljs-number">3</span> <span class="hljs-comment"># 该迭代周期，意思是将整个数据扫描三遍</span><br>net = linreg<br>loss = squared_loss<br><span class="hljs-comment"># 训练实现</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter(batch_size, features, labels): <span class="hljs-comment"># 遍历每一批</span><br>        <span class="hljs-comment"># 当前批中每一数据的损失向量</span><br>        loss_list = loss(net(X, w, b), y)<br>        <span class="hljs-comment"># 先得到该批量的损失之和，再求其关于[w, b]的梯度</span><br>        loss_list.<span class="hljs-built_in">sum</span>().backward()<br>        sgd([w, b], lr, batch_size)<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        train_loss = loss(net(features, w, b), labels)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, loss <span class="hljs-subst">&#123;<span class="hljs-built_in">float</span>(train_loss.mean()):f&#125;</span>&#x27;</span>)<br>        <br></code></pre></td></tr></table></figure><pre><code>epoch 1, loss 0.042724epoch 2, loss 0.000161epoch 3, loss 0.000049</code></pre><p>比较真实参数与通过训练学习的参数，评估训练的成功程度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;w的估计误差:<span class="hljs-subst">&#123;true_w - w.reshape(true_w.shape)&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;b的估计误差:<span class="hljs-subst">&#123;true_b - b&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code>w的估计误差:tensor([ 0.0001, -0.0004], grad_fn=&lt;SubBackward0&gt;)b的估计误差:tensor([0.0013], grad_fn=&lt;RsubBackward1&gt;)</code></pre><h2 id="线性回归基于PyTorch框架的实现"><a class="header-anchor" href="#线性回归基于PyTorch框架的实现">¶</a>线性回归基于PyTorch框架的实现</h2><p>使用深度学习框架PyTorch来读入数据、训练模型</p><h3 id="生成数据集-2"><a class="header-anchor" href="#生成数据集-2">¶</a>生成数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils <span class="hljs-keyword">import</span> data <span class="hljs-comment"># 引入处理数据的模块</span><br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br>true_w = torch.tensor([<span class="hljs-number">2</span>, -<span class="hljs-number">3.4</span>])<br>true_b = <span class="hljs-number">4.2</span><br>features, labels = d2l.synthetic_data(true_w, true_b, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><h3 id="读取数据集-2"><a class="header-anchor" href="#读取数据集-2">¶</a>读取数据集</h3><p>调用框架中现有的API来读入数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 构造PyTorch数据迭代器</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_array</span>(<span class="hljs-params">data_arrays, batch_size, is_train=<span class="hljs-literal">True</span></span>):</span><br>    <span class="hljs-comment"># 首先对样本数据及其标注进行打包，从而两者一一对应</span><br>    dataset = data.TensorDataset(*data_arrays)<br>    <span class="hljs-comment"># 返回一个按批量且满足随机的封装好的数据迭代器</span><br>    <span class="hljs-comment"># 每一次随机挑取batch_size的样本</span><br>    <span class="hljs-keyword">return</span> data.DataLoader(dataset, batch_size, shuffle = is_train)<br><br>batch_size = <span class="hljs-number">10</span><br>data_iter = load_array((features, labels), batch_size)<br><br><span class="hljs-comment"># 读取并打印第一批量的样本数据及其标注</span><br><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(data_iter)) <br></code></pre></td></tr></table></figure><pre><code>[tensor([[ 0.0388,  0.7633],         [ 0.0443, -1.0373],         [ 0.4865, -1.2277],         [-0.0102,  1.1730],         [-0.8657, -0.1770],         [-0.0660, -0.5046],         [ 0.9981,  0.0407],         [ 0.5265,  0.2863],         [-0.5265,  1.4245],         [ 0.0316,  0.6915]]), tensor([[ 1.6896],         [ 7.8047],         [ 9.3269],         [ 0.1825],         [ 3.0589],         [ 5.7834],         [ 6.0574],         [ 4.2643],         [-1.6963],         [ 1.9182]])]</code></pre><blockquote><p>在变量前加<code>*</code>，则多余的函数参数会作为一个元组存在args中</p></blockquote><blockquote><p>关于<code>TensorDataset()</code>、<code>DataLoader()</code>，可参考：<a href="https://zhuanlan.zhihu.com/p/349083821">https://zhuanlan.zhihu.com/p/349083821</a></p></blockquote><h3 id="定义模型"><a class="header-anchor" href="#定义模型">¶</a>定义模型</h3><p>使用框架预定义好的层(只需关注使用哪些层来构造模型，而不必关注层的实现细节)。</p><blockquote><p><code>Sequential</code> 类为串联在一起的多个层定义了一个容器。当给定输入数据， <code>Sequential</code> 实例将数据传入到第一层，然后将第一层的输出作为第二层的输入，依此类推，形成一个标准的流水线。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn <span class="hljs-comment"># nn是神经网络的缩写</span><br>net = nn.Sequential(nn.Linear(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 模型变量net 是 Sequential 类的实例</span><br><span class="hljs-comment"># 需指定输入特征形状、输出特征形状，Sequential()返回list of layers，网络每一层按顺序排列</span><br></code></pre></td></tr></table></figure><h3 id="初始化模型参数-2"><a class="header-anchor" href="#初始化模型参数-2">¶</a>初始化模型参数</h3><p>指定每个权重参数从均值为0、标准差为0.01的正态分布中随机采样，偏置参数将初始化为零。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 该网络只有一层</span><br>net[<span class="hljs-number">0</span>].weight.data.normal_(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>) <span class="hljs-comment"># weight访问参数w,normal_()即使用正态分布替换w的data值</span><br>net[<span class="hljs-number">0</span>].bias.data.fill_(<span class="hljs-number">0</span>) <span class="hljs-comment"># 将偏差值b设为0</span><br></code></pre></td></tr></table></figure><pre><code>tensor([0.])</code></pre><h3 id="定义损失函数"><a class="header-anchor" href="#定义损失函数">¶</a>定义损失函数</h3><p>计算均方误差，使用 <code>MSELoss</code> 类，也成为平方<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">L_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>范数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = nn.MSELoss()<br></code></pre></td></tr></table></figure><h3 id="定义优化算法-2"><a class="header-anchor" href="#定义优化算法-2">¶</a>定义优化算法</h3><p>实例化 <code>SGD</code> 实例</p><blockquote><p>PyTorch 在 <code>optim</code> 模块中实现了小批量随机梯度下降算法的许多变种。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">trainer = torch.optim.SGD(net.parameters(), lr = <span class="hljs-number">0.03</span>) <br><span class="hljs-comment"># 需要指定优化参数（从模型中获得），并且指定学习率lr</span><br></code></pre></td></tr></table></figure><h3 id="训练-2"><a class="header-anchor" href="#训练-2">¶</a>训练</h3><p>在每个迭代周期里，我们将完整遍历一次数据集，不停地从中获取一个小批量的输入和相应的标签。</p><p>对于每一个小批量，有以下步骤:</p><ul><li>通过调用 <code>net(X)</code> 生成预测，并计算损失 <code>total_loss</code>（正向传播）。</li><li>通过进行<strong>反向传播</strong>来计算损失函数对应的梯度。</li><li>通过调用优化器来更新模型参数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">num_epochs = <span class="hljs-number">3</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter:<br>        total_loss = loss(net(X), y) <span class="hljs-comment"># 传入预测值以及真实值y，返回总的损失值（非向量）</span><br>        trainer.zero_grad() <span class="hljs-comment"># 清空梯度</span><br>        total_loss.backward()<br>        trainer.step() <span class="hljs-comment"># 模型的更新</span><br>    <br>    <span class="hljs-comment"># 计算每个迭代周期后的损失，并打印它来监控训练过程</span><br>    total_loss = loss(net(features), labels)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, loss <span class="hljs-subst">&#123;total_loss:f&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code>epoch 1, loss 0.000260epoch 2, loss 0.000089epoch 3, loss 0.000089</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;给定&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;anno</summary>
      
    
    
    
    <category term="Python" scheme="https://www.joydee.top/categories/Python/"/>
    
    <category term="Deep Learning" scheme="https://www.joydee.top/categories/Python/Deep-Learning/"/>
    
    
    <category term="PyTorch" scheme="https://www.joydee.top/tags/PyTorch/"/>
    
    <category term="Deep Learning" scheme="https://www.joydee.top/tags/Deep-Learning/"/>
    
    <category term="Machine Learning" scheme="https://www.joydee.top/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>「爬虫实践」爬取豆瓣 Top250 电影、51job 特定岗位的信息</title>
    <link href="https://www.joydee.top/posts/50a3c08/"/>
    <id>https://www.joydee.top/posts/50a3c08/</id>
    <published>2021-07-20T04:29:18.000Z</published>
    <updated>2021-09-07T07:17:26.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬取豆瓣Top250电影信息"><a class="header-anchor" href="#爬取豆瓣Top250电影信息">¶</a>爬取豆瓣Top250电影信息</h2><h3 id="具体步骤"><a class="header-anchor" href="#具体步骤">¶</a>具体步骤</h3><p>针对每一页网页（每页有 25 条电影信息，共有 10 页）：</p><ol><li>爬取网页：指定待爬取网页的URL，模拟普通浏览器访问该网页时需要的HTTP请求头（尤其是 <code>User-Agent</code> 字段），通过 urllib 库发送请求并得到响应。若没有发生异常，则对响应正文进行读入（以UTF-8格式）</li><li>解析网页：通过 BeautifulSoup 库将响应正文中得到的网页解析为标签树对象。</li><li>提取信息：遍历指定的 <code>Tag</code> 标签，对应的是每一条电影信息。将其转换为字符串类型，再通过预先创建好的正则表达式对象，匹配需要的字段，并按照顺序存放到列表类型（或字典类型）</li></ol><p>（所有页）所有电影信息存放到同一个列表（或字典）时：创建Excel表格（或数据库表），按照位置依次写入其中。</p><h3 id="代码实现"><a class="header-anchor" href="#代码实现">¶</a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup  <span class="hljs-comment"># 网页解析，获取数据</span><br><span class="hljs-keyword">import</span> re  <span class="hljs-comment"># 正则表达式，进行文字匹配</span><br><span class="hljs-keyword">import</span> urllib.request, urllib.error  <span class="hljs-comment"># 制定URL，获取网页数据</span><br><span class="hljs-keyword">import</span> xlwt  <span class="hljs-comment"># 进行excel操作</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    baseurl = <span class="hljs-string">&quot;https://movie.douban.com/top250?start=&quot;</span><br>    <span class="hljs-comment"># 1.爬取网页</span><br>    datalist = getData(baseurl)<br><br>    savepath = <span class="hljs-string">&quot;豆瓣电影Top250.xls&quot;</span><br><br>    <span class="hljs-comment"># 3.保存数据</span><br>    saveData(datalist, savepath)<br><br><br><span class="hljs-comment"># 获取指定单个URL的网页内容</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSinglePage</span>(<span class="hljs-params">url</span>):</span><br>    head = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36&quot;</span><br>    &#125;  <span class="hljs-comment"># 用户代理：告诉豆瓣服务器，我们是什么类型的浏览器。此时模拟浏览器的头部信息，向豆瓣服务器发送消息</span><br>    request = urllib.request.Request(url, headers=head)<br>    html = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        response = urllib.request.urlopen(request)<br>        html = response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-comment"># print(html)</span><br>    <span class="hljs-keyword">except</span> urllib.error.URLError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(e, <span class="hljs-string">&quot;code&quot;</span>):<br>            <span class="hljs-built_in">print</span>(e.code)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(e, <span class="hljs-string">&quot;reason&quot;</span>):<br>            <span class="hljs-built_in">print</span>(e.reason)<br>    <span class="hljs-keyword">return</span> html<br>    <br><span class="hljs-comment"># 解析数据</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getData</span>(<span class="hljs-params">baseurl</span>):</span><br>    datalist = []<br>    <span class="hljs-comment"># 影片详情的链接</span><br>    regLink = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;a href=&quot;(.*?)&quot;&gt;&#x27;</span>)  <span class="hljs-comment"># 创建正则表达式对象，.代表一个字符，*代表0或多个，?代表链接只出现一次或0次</span><br>    <span class="hljs-comment"># 影片图片的链接</span><br>    regImgSrc = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;img.*src=&quot;(.*?)&quot;&#x27;</span>, re.S)  <span class="hljs-comment"># re.S使得换行符包含在匹配字符字符中，若不使用re.S，则只在每一行内进行匹配，若一行没有，就换下一行重新开始匹配</span><br>    <span class="hljs-comment"># 影片的片名</span><br>    regTitle = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span class=&quot;title&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>)<br>    <span class="hljs-comment"># 影片的评分</span><br>    regRating = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>)<br>    <span class="hljs-comment"># 评价人数</span><br>    regCommentNum = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span&gt;(\d*)人评价&lt;/span&gt;&#x27;</span>)<br>    <span class="hljs-comment"># 影片基本信息</span><br>    regInfo = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;span class=&quot;inq&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>)<br>    <span class="hljs-comment"># 影片相关人员</span><br>    regPeopleName = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;p class=&quot;&quot;&gt;(.*?)&lt;/p&gt;&#x27;</span>, re.S)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>):  <span class="hljs-comment"># 11页</span><br>        url = baseurl + <span class="hljs-built_in">str</span>(i * <span class="hljs-number">25</span>)<br>        html = getSinglePage(url)  <span class="hljs-comment"># 保存获取到当前页面的HTML源码</span><br>        soup = BeautifulSoup(html, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">&#x27;div&#x27;</span>, class_=<span class="hljs-string">&quot;item&quot;</span>):  <span class="hljs-comment"># 查找符合要求的字符串&quot;div.item&quot;</span><br>            <span class="hljs-comment"># print(item)</span><br>            itemStr = <span class="hljs-built_in">str</span>(item)  <span class="hljs-comment"># 转换为字符串</span><br>            filmInfo = []  <span class="hljs-comment"># 保存一部电影的所有信息</span><br><br>            filmLink = re.findall(regLink, itemStr)[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 正则表达式匹配指定的字符串</span><br>            imgSrc = re.findall(regImgSrc, itemStr)[<span class="hljs-number">0</span>]<br>            filmTitle = re.findall(regTitle, itemStr)<br>            rating = re.findall(regRating, itemStr)[<span class="hljs-number">0</span>]<br>            commentNum = re.findall(regCommentNum, itemStr)[<span class="hljs-number">0</span>]<br>            cTitle = <span class="hljs-string">&#x27; &#x27;</span><br>            oTitle = <span class="hljs-string">&#x27; &#x27;</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(filmTitle) == <span class="hljs-number">2</span>:<br>                cTitle = filmTitle[<span class="hljs-number">0</span>]  <span class="hljs-comment"># 添加电影第一个名称</span><br>                oTitle = filmTitle[<span class="hljs-number">1</span>].replace(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)  <span class="hljs-comment"># 去掉无关的符号，添加另外一个名称</span><br>            <span class="hljs-keyword">else</span>:<br>                cTitle = filmTitle[<span class="hljs-number">0</span>]<br>            filmInq = re.findall(regInfo, itemStr)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(filmInq) != <span class="hljs-number">0</span>:<br>                filmInq = filmInq[<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">else</span>:<br>                filmInq = <span class="hljs-string">&quot; &quot;</span><br>            filmPeopleName = re.findall(regPeopleName, itemStr)[<span class="hljs-number">0</span>]<br>            filmPeopleName = re.sub(<span class="hljs-string">r&#x27;&lt;br(\s+)?/&gt;(\s+)?&#x27;</span>, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-built_in">str</span>(filmPeopleName)).strip()<br><br>            filmInfo.append(rating)<br>            filmInfo.append(cTitle)<br>            filmInfo.append(oTitle)<br>            filmInfo.append(commentNum)<br>            filmInfo.append(filmPeopleName)<br>            filmInfo.append(filmInq)<br>            filmInfo.append(filmLink)<br>            filmInfo.append(imgSrc)<br>            datalist.append(filmInfo)<br>    <span class="hljs-built_in">print</span>(datalist)<br>    <span class="hljs-keyword">return</span> datalist<br><br><span class="hljs-comment"># 保存数据</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">saveData</span>(<span class="hljs-params">datalist, savepath</span>):</span><br>    workbook = xlwt.Workbook(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>, style_compression=<span class="hljs-number">0</span>)<br>    worksheet = workbook.add_sheet(<span class="hljs-string">&#x27;第一页&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 第二个参数用于覆写之前的内容</span><br>    col = (<span class="hljs-string">&quot;评分&quot;</span>, <span class="hljs-string">&quot;影片中文名&quot;</span>, <span class="hljs-string">&quot;影片外国名&quot;</span>, <span class="hljs-string">&quot;评价数&quot;</span>, <span class="hljs-string">&quot;概况&quot;</span>, <span class="hljs-string">&quot;引言&quot;</span>, <span class="hljs-string">&quot;影片详情链接&quot;</span>, <span class="hljs-string">&quot;影片海报链接&quot;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>):<br>        worksheet.write(<span class="hljs-number">0</span>, j, col[j])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">250</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第%d条&quot;</span> % i)<br>        rowData = datalist[i]<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>):<br>            worksheet.write(i+<span class="hljs-number">1</span>, j, rowData[j])<br>    workbook.save(savepath)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><img src="https://cdn.joydee.cloud//20210902114353.png" style="zoom:80%;" /><h2 id="异步爬取-51job-特定岗位信息"><a class="header-anchor" href="#异步爬取-51job-特定岗位信息">¶</a>异步爬取 51job 特定岗位信息</h2><h3 id="具体步骤-2"><a class="header-anchor" href="#具体步骤-2">¶</a>具体步骤</h3><p>对于异步请求：需要找到异步请求的链接并分析规律，获取返回的JSON数据并进行解析</p><p>对于 51job 网站，发送链接后得到的响应中，可以发现JSON信息（即岗位信息）隐藏在 <code>&lt;script&gt;</code> 标签。</p><img src="https://cdn.joydee.cloud//20210902110920.png"/><p>对其JSON信息进行格式化，发现规律：</p><img src="https://cdn.joydee.cloud//20210902110246.png"/><p>由此，通过 re 库，对特定字段 <code>engine_search_result</code> 进行匹配得到字符串</p><p>通过 json 库，会根据JSON格式要求，将该字符串转换为列表，而列表的每一元素为字典类型，对应JSON每一字段信息</p><h3 id="代码实现-2"><a class="header-anchor" href="#代码实现-2">¶</a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> re  <span class="hljs-comment"># 正则表达式，进行文字匹配</span><br><span class="hljs-keyword">import</span> urllib.error  <span class="hljs-comment"># 制定URL，获取网页数据</span><br><span class="hljs-keyword">import</span> urllib.request<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    joburl = <span class="hljs-string">&quot;https://search.51job.com/list/330000%252c030200,000000,0000,00,9,99,c%252B%252B,2,1.html?lang=c&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;ord_field=0&amp;dibiaoid=0&amp;line=&amp;welfare=&quot;</span><br>    result = getSinglePage(joburl)<br>    <span class="hljs-comment"># print(result)</span><br>    jsonsStr = re.findall(<span class="hljs-string">r&quot;\&quot;engine_search_result\&quot;:(.+?),\&quot;jobid_count\&quot;&quot;</span>, result)<br>    <span class="hljs-comment"># 返回结果为list，匹配结果只有一个，故长度为1</span><br>    <span class="hljs-comment"># print(jsonsStr[0]) # 打印列表中的字符串：所有岗位（在当前页）的JSON串</span><br>    jsonObj = json.loads(jsonsStr[<span class="hljs-number">0</span>])<br>    <span class="hljs-comment"># 将字符串转换为 存放字典类型的列表 ，</span><br>    <span class="hljs-keyword">for</span> peo <span class="hljs-keyword">in</span> jsonObj:  <span class="hljs-comment"># 遍历列表中每个岗位，每个岗位对应列表中的一个字典</span><br>        <span class="hljs-comment"># 每个字典存放该岗位的各项信息</span><br>        <span class="hljs-built_in">print</span>(peo[<span class="hljs-string">&quot;job_name&quot;</span>] + <span class="hljs-string">&quot;:&quot;</span> + peo[<span class="hljs-string">&quot;company_name&quot;</span>])<br><br><br><span class="hljs-comment"># 获取指定单个URL的内容</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getSinglePage</span>(<span class="hljs-params">url</span>):</span><br>    head = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36&quot;</span><br>    &#125;  <span class="hljs-comment"># 用户代理</span><br>    request = urllib.request.Request(url, headers=head)<br>    result = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        response = urllib.request.urlopen(request)<br>        result = response.read().decode(<span class="hljs-string">&quot;gbk&quot;</span>)<br>    <span class="hljs-keyword">except</span> urllib.error.URLError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(e, <span class="hljs-string">&quot;code&quot;</span>):<br>            <span class="hljs-built_in">print</span>(e.code)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(e, <span class="hljs-string">&quot;reason&quot;</span>):<br>            <span class="hljs-built_in">print</span>(e.reason)<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">C++开发工程师:广州拓波软件科技有限公司<br>C++开发工程师:广东星舆科技有限公司<br>C++高级工程师:广州市华飞通达科技有限公司<br>C++开发工程师:广州市云景信息科技有限公司<br>C++/Qt高级软件工程师（双休、十三薪）:广州晋原铭科技有限公司<br>C++音视频开发工程师:广州昆仑科技有限公司<br>C/C++开发工程师:广州广有通信设备有限公司<br>...<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;爬取豆瓣Top250电影信息&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#爬取豆瓣Top250电影信息&quot;&gt;¶&lt;/a&gt;爬取豆瓣Top250电影信息&lt;/h2&gt;
&lt;h3 id=&quot;具体步骤&quot;&gt;&lt;a class=&quot;header-anchor&quot; href</summary>
      
    
    
    
    <category term="Python" scheme="https://www.joydee.top/categories/Python/"/>
    
    <category term="Python 爬虫" scheme="https://www.joydee.top/categories/Python/Python-%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://www.joydee.top/tags/Python/"/>
    
    <category term="网络爬虫" scheme="https://www.joydee.top/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
    <category term="正则表达式" scheme="https://www.joydee.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    <category term="BeautifulSoup" scheme="https://www.joydee.top/tags/BeautifulSoup/"/>
    
    <category term="urllib" scheme="https://www.joydee.top/tags/urllib/"/>
    
    <category term="excel" scheme="https://www.joydee.top/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>「Excel文件的写入」xwlt库的使用</title>
    <link href="https://www.joydee.top/posts/b034efc7/"/>
    <id>https://www.joydee.top/posts/b034efc7/</id>
    <published>2021-07-14T01:21:45.000Z</published>
    <updated>2021-09-07T07:17:26.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引入方式"><a class="header-anchor" href="#引入方式">¶</a>引入方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xlwt<br></code></pre></td></tr></table></figure><h2 id="创建方式"><a class="header-anchor" href="#创建方式">¶</a>创建方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">workbook = xlwt.Workbook(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)  <span class="hljs-comment"># 创建对象，可理解为一个文件</span><br>workSheet = workbook.add_sheet(<span class="hljs-string">&#x27;sheet1&#x27;</span>)  <span class="hljs-comment"># 创建一个工作表</span><br><br>workbook.save(<span class="hljs-string">&#x27;excelTest.xls&#x27;</span>)  <span class="hljs-comment"># 注意，是对数据表进行保存，运行后会在当前目录生成(保存)该文件</span><br></code></pre></td></tr></table></figure><img src="https://cdn.joydee.cloud//20210901122829.png"/><blockquote><p>一般而言，由于xwlt库主要是对Excel进行创建、写入，故 <code>.save()</code> 操作最好放在最后。</p></blockquote><h2 id="写入方式"><a class="header-anchor" href="#写入方式">¶</a>写入方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">workSheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;hello&#x27;</span>)  <span class="hljs-comment"># 在第0行、第0列写入数据，参数对应 行, 列, 值</span><br></code></pre></td></tr></table></figure><img src="https://cdn.joydee.cloud//20210901122956.png"/><h2 id="遍历方式"><a class="header-anchor" href="#遍历方式">¶</a>遍历方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>): <span class="hljs-comment"># [1,10)</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, i+<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(i, j)<br>        <span class="hljs-comment"># workSheet.write(i-1, j-1,  str(i) + &#x27;*&#x27; + str(j) + &#x27;=&#x27; + str(i*j))</span><br>        workSheet.write(i-<span class="hljs-number">1</span>, j-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;%d * %d = %d&quot;</span>%(i, j, i*j))<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引入方式&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#引入方式&quot;&gt;¶&lt;/a&gt;引入方式&lt;/h2&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    <category term="Python" scheme="https://www.joydee.top/categories/Python/"/>
    
    <category term="Python 爬虫" scheme="https://www.joydee.top/categories/Python/Python-%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://www.joydee.top/tags/Python/"/>
    
    <category term="网络爬虫" scheme="https://www.joydee.top/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
    <category term="excel" scheme="https://www.joydee.top/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>「网页解析与信息提取」BeautifulSoup库、Re库的使用</title>
    <link href="https://www.joydee.top/posts/c982f8ea/"/>
    <id>https://www.joydee.top/posts/c982f8ea/</id>
    <published>2021-07-13T06:16:41.000Z</published>
    <updated>2021-09-07T07:17:26.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于BeautifulSoup库解析HTML页面"><a class="header-anchor" href="#基于BeautifulSoup库解析HTML页面">¶</a>基于BeautifulSoup库解析HTML页面</h2><p>BeautifulSoup库，是用于解析、遍历、维护“标签树” 的功能库</p><p>约定的引用方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br></code></pre></td></tr></table></figure><p>每一个 <code>BeautifulSoup</code> 类，对应一个HTML/XML的<strong>全部</strong>内容</p><h3 id="Beautiful-Soup库解析器"><a class="header-anchor" href="#Beautiful-Soup库解析器">¶</a>Beautiful Soup库解析器</h3><p>获取 <code>BeautifulSoup</code> 类的方式（重点在下方代码第三行）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./baidu.html&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>htmlFile = file.read()<br>bs = BeautifulSoup(htmlFile, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><span class="hljs-comment"># bs = BeautifulSoup(&#x27;&lt;html&gt;data&lt;/data&gt;&#x27;, &#x27;html.parser&#x27;)</span><br></code></pre></td></tr></table></figure><blockquote><p>在构造方法中，除了 <code>html.parser</code> ，还可以传入其他的解析器如：lxml的HTML解析器、lxml的XML解析器（需要额外安装）</p></blockquote><p>HTML<strong>格式化</strong>打印：<code>bs.prettify()</code></p><h3 id="Tag类（标签）"><a class="header-anchor" href="#Tag类（标签）">¶</a>Tag类（标签）</h3><p><code>bs4.element.Tag</code>  类，对应于HTML/XML的标签，是最基本的信息组织单元，用 <code>&lt;&gt;</code> 和 <code>&lt;/&gt;</code> 标明开头和结尾的。</p><p>获取方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">bs.title <span class="hljs-comment"># &lt;title&gt;百度两下，你就知道&lt;/title&gt;</span><br>bs.a <span class="hljs-comment"># &lt;a class=&quot;mnav&quot; href=&quot;http://news.baidu.com&quot; name=&quot;tj_trnews&quot;&gt;&lt;!--新闻1--&gt;&lt;/a&gt; </span><br></code></pre></td></tr></table></figure><p>任何存在于HTML语法中的标签，均可通过<code>BeautifulSoup</code> 类 进行访问，即<code>bs.&lt;tag&gt;</code>。</p><blockquote><p>当HTML文档存在多个相同的<code>&lt;tag&gt;</code>时，优先返回第一个</p></blockquote><img src="https://cdn.joydee.cloud//20210901012545.png" style="zoom:50%;" /><h4 id="Tag-name（标签名称）"><a class="header-anchor" href="#Tag-name（标签名称）">¶</a><a href="http://Tag.name">Tag.name</a>（标签名称）</h4><p>每个标签的名称字符串，可通过 <code>&lt;tag&gt;.name</code> 获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">bs.div.name <span class="hljs-comment"># div</span><br>bs.a.name <span class="hljs-comment"># a</span><br></code></pre></td></tr></table></figure><h4 id="Tag-attrs（标签属性）"><a class="header-anchor" href="#Tag-attrs（标签属性）">¶</a>Tag.attrs（标签属性）</h4><p>每个标签的属性，如 <code>class</code>、<code>href</code>等，可通过 <code>&lt;tag&gt;.attrs</code>，返回的是字典类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">bs.a.attrs<br><span class="hljs-comment"># &#123;&#x27;class&#x27;: [&#x27;mnav&#x27;], &#x27;href&#x27;: &#x27;http://news.baidu.com&#x27;, &#x27;name&#x27;: &#x27;tj_trnews&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="Tag-String"><a class="header-anchor" href="#Tag-String">¶</a>Tag.String</h4><p><code>&lt;tag&gt;.string</code> 获取的是标签内非属性字符串</p><p>要点：</p><ol><li><p>注释的文本，返回的是 <code>bs4.element.Comment</code> ；否则，返回的是 <code>bs4.element.NavigableString</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--示例1：bs.a.string为&quot;我是注释&quot;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--我是注释--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!--示例2：bs.a.string为&quot;2222&quot;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>如果指定的<code>&lt;tag&gt;</code>含有多个同级标签（包括注释标签），或者含有更深的层级标签，则 <code>.string</code> 返回为 <code>None</code> 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--示例1：bs.p.string为None--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    111<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--我是注释--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-comment">&lt;!--示例2：bs.a.string为None--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>我是正文<span class="hljs-comment">&lt;!--我是注释--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!--示例3：bs.article.string为None--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>你<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="HTML内容遍历"><a class="header-anchor" href="#HTML内容遍历">¶</a>HTML内容遍历</h3><img src="https://cdn.joydee.cloud//20210901102804.png" style="zoom: 67%;" /><p><code>BeautifulSoup</code> 类，是标签树的根节点。</p><h4 id="标签树的下行遍历"><a class="header-anchor" href="#标签树的下行遍历">¶</a>标签树的下行遍历</h4><ul><li><p><code>.contents</code>：子节点的列表，即将 <code>&lt;tag&gt;</code> 所有<strong>儿子</strong>节点存入列表，元素类型是<code>NavigableString</code>、<code>Tag</code>等类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">bs.body.contents<br><span class="hljs-string">&#x27;&#x27;&#x27;注意到，每一儿子节点作为列表中的一个元素</span><br><span class="hljs-string">[&#x27;\n&#x27;, </span><br><span class="hljs-string">&lt;article&gt;</span><br><span class="hljs-string">&lt;a href=&quot;&quot;&gt;222&lt;/a&gt;</span><br><span class="hljs-string">&lt;a href=&quot;&quot;&gt;&lt;!--我是注释--&gt;&lt;/a&gt;</span><br><span class="hljs-string">&lt;/article&gt;, </span><br><span class="hljs-string">&#x27;\n&#x27;, </span><br><span class="hljs-string">&lt;div id=&quot;wrapper&quot;&gt;&lt;div id=&quot;head&quot;&gt;&lt;div class=&quot;head_wrapper&quot;&gt;&lt;div id=&quot;u1&quot;&gt;&lt;a class=&quot;mnav&quot; href=&quot;http://news.baidu.com&quot; name=&quot;tj_trnews&quot;&gt;&lt;!--新闻1--&gt;&lt;/a&gt;</span><br><span class="hljs-string">&lt;a class=&quot;mnav&quot; href=&quot;http://news.baidu.com&quot; name=&quot;tj_trnews&quot;&gt;新闻&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;, </span><br><span class="hljs-string">&#x27;\n&#x27;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>bs.body.contents[<span class="hljs-number">1</span>]<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;article&gt;</span><br><span class="hljs-string">&lt;a href=&quot;&quot;&gt;222&lt;/a&gt;</span><br><span class="hljs-string">&lt;a href=&quot;&quot;&gt;&lt;!--我是注释--&gt;&lt;/a&gt;</span><br><span class="hljs-string">&lt;/article&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p><code>.children</code>：子节点的迭代类型，用于循环遍历儿子节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> bs.body.children:<br>    <span class="hljs-built_in">print</span>(child)<br></code></pre></td></tr></table></figure></li><li><p><code>.descendants</code>：子孙节点的迭代类型，包含所有子孙节点（结果类似于DFS），同样用于循环遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> bs.body.descendants:<br>    <span class="hljs-built_in">print</span>(child)<br></code></pre></td></tr></table></figure></li></ul><h4 id="标签树的上行遍历"><a class="header-anchor" href="#标签树的上行遍历">¶</a>标签树的上行遍历</h4><ul><li><p><code>.parent</code>：节点的父亲标签</p></li><li><p><code>.parents</code>：节点<strong>先辈</strong>标签的迭代类型，用于循环遍历先辈节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> parent <span class="hljs-keyword">in</span> bs.a.parents:<br>    <span class="hljs-keyword">if</span> parent <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(parent)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(parent.name)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">article<br>body<br>html<br>[document]<br></code></pre></td></tr></table></figure></li></ul><h4 id="标签树的平行遍历"><a class="header-anchor" href="#标签树的平行遍历">¶</a>标签树的平行遍历</h4><p>以下操作均按照原HTML的文本顺序，并且只能遍历<strong>同一个父节点</strong>下的各节点间</p><ul><li><code>.next_sibling</code>：下一个平行节点标签</li><li><code>.previous_sibling</code>：上一个平行节点标签</li><li><code>.next_siblings</code>：迭代类型，返回后续所有平行节点标签</li><li><code>.previous_siblings</code>：同上相反的方向</li></ul><h3 id="HTML内容查找"><a class="header-anchor" href="#HTML内容查找">¶</a>HTML内容查找</h3><p><code>&lt;&gt;.select()</code>：类似于CSS选择器，返回的结果为列表。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">bs.select(<span class="hljs-string">&quot;.mnav&quot;</span>)<br>bs.select(<span class="hljs-string">&quot;#u1&quot;</span>)<br>bs.select(<span class="hljs-string">&quot;a[class=&#x27;bri&#x27;]&quot;</span>)<br>bs.select(<span class="hljs-string">&quot;.mnav ~ .bri&quot;</span>)<br></code></pre></td></tr></table></figure><p><code>&lt;&gt;.find_all(name, attrs, recursive, string, **kwargs)</code>：查找与字符串完全匹配的内容，并存放到列表类型</p><ul><li><p><code>name</code>：按标签名称进行检索，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">bs.find_all(<span class="hljs-string">&#x27;a&#x27;</span>)<br>bs.find_all([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>])<br>bs.find_all(re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;b&#x27;</span>)) <span class="hljs-comment"># 支持正则表达式，返回 body、b 等标签</span><br>bs.find_all(<span class="hljs-string">&#x27;a&#x27;</span>, limit=<span class="hljs-number">3</span>) <span class="hljs-comment"># 结果最多只取limit个元素</span><br></code></pre></td></tr></table></figure></li><li><p><code>attrs</code>：按标签属性值进行检索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">bs.find_all(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;mnav&#x27;</span>) <br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[&lt;a class=&quot;mnav&quot; href=&quot;http://news.baidu.com&quot; name=&quot;tj_trnews&quot;&gt;&lt;!--新闻1--&gt;&lt;/a&gt;, &lt;a class=&quot;mnav&quot; href=&quot;http://news.baidu.com&quot; name=&quot;tj_trnews&quot;&gt;新闻&lt;/a&gt;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>bs.find_all(<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;u1&#x27;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[&lt;div id=&quot;u1&quot;&gt;</span><br><span class="hljs-string">&lt;a class=&quot;mnav&quot; href=&quot;http://news.baidu.com&quot; name=&quot;tj_trnews&quot;&gt;&lt;!--新闻1--&gt;&lt;/a&gt;</span><br><span class="hljs-string">&lt;a class=&quot;mnav&quot; href=&quot;http://news.baidu.com&quot; name=&quot;tj_trnews&quot;&gt;新闻&lt;/a&gt;</span><br><span class="hljs-string">&lt;/div&gt;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>bs.find_all(<span class="hljs-built_in">id</span>=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;link&#x27;</span>))<br></code></pre></td></tr></table></figure></li><li><p><code>recursive</code>：是否对子孙全部检索，默认为 <code>True</code></p></li><li><p><code>string</code>：按<code>&lt;&gt;...&lt;/&gt;</code> 中字符串区域进行检索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">bs.find_all(string=<span class="hljs-string">&#x27;新闻&#x27;</span>)<br>bs.find_all(string=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;产品&#x27;</span>))<br></code></pre></td></tr></table></figure></li></ul><h2 id="基于Re（正则表达式）库提取页面关键信息"><a class="header-anchor" href="#基于Re（正则表达式）库提取页面关键信息">¶</a>基于Re（正则表达式）库提取页面关键信息</h2><p>引入方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br></code></pre></td></tr></table></figure><h3 id="常用操作符"><a class="header-anchor" href="#常用操作符">¶</a>常用操作符</h3><table><thead><tr><th>操作符</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td><code>.</code></td><td>任何单个字符</td><td></td></tr><tr><td><code>[]</code></td><td>对<strong>单个</strong>字符给出取值范围（字符集）</td><td><code>[abc]</code> 表示<code>a</code>,<code>b</code>,<code>c</code>，<code>[a-z]</code> 表示 <code>a</code> 到 <code>z</code> 单个字符</td></tr><tr><td><code>[^ ]</code></td><td>对单个字符给出排除范围</td><td></td></tr><tr><td><code>*</code></td><td>前一个字符任意次拓展（0次或无限次）</td><td><code>abc*</code> 表示：<code>ab</code>,<code>abc</code>,<code>abcc</code>,<code>abccccc</code>等</td></tr><tr><td><code>+</code></td><td>前一个字符至少拓展1次（&gt;=1）</td><td><code>abc+</code> 表示：<code>abc</code>,<code>abcccc</code>等</td></tr><tr><td><code>?</code></td><td>前一个字符要么拓展0次，要么拓展1次</td><td><code>abc?</code> 表示：<code>ab</code>,<code>abc</code></td></tr><tr><td><code>|</code></td><td>左右表达式任意一个</td><td><code>abc|def</code> 表示：<code>abc</code>,<code>def</code></td></tr><tr><td><code>&#123;m&#125;</code></td><td>前一个字符拓展m次</td><td><code>ab&#123;2&#125;c</code> 表示：<code>abbc</code></td></tr><tr><td><strong><code>&#123;m,n&#125;</code></strong></td><td>前一个字符拓展[m, n]次</td><td><code>ab&#123;1,2&#125;c</code> 表示：<code>abc</code>,<code>abbc</code></td></tr><tr><td><code>^</code></td><td>匹配字符串开头</td><td><code>^abc</code> 表示 <code>abc</code> 且在一个字符串开头</td></tr><tr><td><code>$</code></td><td>匹配字符串结尾</td><td><code>abc$</code> 表示<code>abc</code> 且在一个字符串的结尾</td></tr><tr><td><code>()</code></td><td>分组标记，内部<strong>只能</strong>用 <code>|</code></td><td><code>(abc)</code> 表示 <code>abc</code>；<code>(ab|de)</code> 表示 <code>ab</code>,<code>de</code></td></tr><tr><td><code>\d</code></td><td>匹配数字，等价于 <code>[0-9]</code></td><td></td></tr><tr><td><code>\w</code></td><td>匹配字母、数字、下划线，等价于<code>[A-Za-z0-9_]</code></td><td></td></tr></tbody></table><p>语法实例：</p><table><thead><tr><th>正则表达式</th><th>对应字符串</th></tr></thead><tbody><tr><td><code>P(Y|YT|YTH|YTHO)?N</code></td><td>‘PN’、‘P<strong>Y</strong>N’、‘P<strong>YT</strong>N’、‘P<strong>YTH</strong>N’、‘P<strong>YTHO</strong>N’</td></tr><tr><td><code>PYTHON+</code></td><td>‘PYTHO<strong>N</strong>’、‘PYTHO<strong>NN</strong>’、‘PYTHO<strong>NNN</strong>’ …</td></tr><tr><td><code>PY[TH]ON</code></td><td>‘PY<strong>T</strong>ON’、‘PY<strong>H</strong>ON’</td></tr><tr><td><code>PY[^TH]?ON</code></td><td>‘PYON’、‘PY<strong>a</strong>ON’、‘PY<strong>b</strong>ON’、‘PY<strong>c</strong>ON’…</td></tr><tr><td><code>PY&#123;:3&#125;N</code></td><td>‘PN’、‘P<strong>Y</strong>N’、‘P<strong>YY</strong>N’、‘P<strong>YYY</strong>N’</td></tr></tbody></table><p>匹配IP地址的正则表达式：</p><p>满足0-99：<code>[1-9]?\d</code>；又满足100-199：<code>1\d&#123;2&#125;</code>；又满足200-249：<code>2[0-4]\d</code>；又满足250-255：<code>25[0-5]</code>，故精确的写法如下：</p><p><code>(([1‐9]?\d|1\d&#123;2&#125;|2[0‐4]\d|25[0‐5]).)&#123;3&#125;([1‐9]?\d|1\d&#123;2&#125;|2[0‐4]\d|25[0‐5])</code></p><h3 id="表示类型"><a class="header-anchor" href="#表示类型">¶</a>表示类型</h3><p>re 库建议采用 <code>raw string</code> 类型（不包含对转义符再次转义的字符串）表示正则表达式，即 <code>r'text'</code>，如 <code>r'[1-9]\d&#123;5&#125;'</code>，<code>r'\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;'</code></p><h3 id="具体用法"><a class="header-anchor" href="#具体用法">¶</a>具体用法</h3><p>有 <code>re.search()</code> 、<code>re.match()</code> 等方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#下面两种等价用法：</span><br><span class="hljs-comment"># 函数式用法：一次性操作</span><br>rst = re.search(<span class="hljs-string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="hljs-string">&#x27;BIT 100081&#x27;</span>)<br><br><span class="hljs-comment"># 面向对象用法：编译后的多次操作</span><br>pat = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>) <span class="hljs-comment"># 将正则表达式串编译为正则表达式【对象】</span><br>rst = pat.search(<span class="hljs-string">&#x27;BIT 100081&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>以下方法均可用上述的面向对象方法，即将正则表达式编译至正则表达式<strong>对象</strong>后，再调用。</p></blockquote><p>但更加常用<strong>匹配方法</strong>为：<code>re.findall(pattern, string, flags=0)</code>，搜索字符串，以列表类型返回全部能匹配的子串。其中，<code>pattern</code>：正则表达式的字符串；<code>string</code>：待匹配字符串；<code>flags</code>：正则表达式使用时的控制标记</p><blockquote><p>注意区分 bs4 的 <code>find_all()</code> 用于找到所在标签及内容，<code>findall()</code> 匹配具体字符串</p><p>另外，re库默认采用贪婪匹配，即输出匹配<strong>最长</strong>的子串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">re.findall(<span class="hljs-string">r&#x27;[A-Z]&#x27;</span>, <span class="hljs-string">&#x27;ASDdfsDSfSDFHIH&#x27;</span>) <br><span class="hljs-comment"># [&#x27;A&#x27;, &#x27;S&#x27;, &#x27;D&#x27;, &#x27;D&#x27;, &#x27;S&#x27;, &#x27;S&#x27;, &#x27;D&#x27;, &#x27;F&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;H&#x27;]</span><br>re.findall(<span class="hljs-string">r&#x27;[A-Z]+&#x27;</span>, <span class="hljs-string">&#x27;ASDdfsDSfSDFHIH&#x27;</span>) <span class="hljs-comment"># 最长连续匹配串</span><br><span class="hljs-comment"># [&#x27;ASD&#x27;, &#x27;DS&#x27;, &#x27;SDFHIH&#x27;]</span><br></code></pre></td></tr></table></figure><p><strong>匹配并替换</strong>的方法：<code>re.sub(pattern, repl, string, count=0, flags=0)</code>，其中，<code>pattern</code> ：正则表达式的字符串，<code>repl</code>：<strong>替换</strong>匹配字符串的字符串，<code>string</code>：<strong>待</strong>匹配字符串，<code>count</code>：匹配的最大替换次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">re.sub(<span class="hljs-string">r&quot;aaa&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;WOCAaaaAdfsfa&quot;</span>)<br><span class="hljs-comment"># WOCAAAdfsfa</span><br>re.sub(<span class="hljs-string">r&quot;[1-9]\d&#123;5&#125;&quot;</span>, <span class="hljs-string">&quot;:zipcode&quot;</span>, <span class="hljs-string">&quot;BIT100081 TSU100084&quot;</span>)<br><span class="hljs-comment"># BIT:zipcode TSU:zipcode</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基于BeautifulSoup库解析HTML页面&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#基于BeautifulSoup库解析HTML页面&quot;&gt;¶&lt;/a&gt;基于BeautifulSoup库解析HTML页面&lt;/h2&gt;
&lt;p&gt;BeautifulS</summary>
      
    
    
    
    <category term="Python" scheme="https://www.joydee.top/categories/Python/"/>
    
    <category term="Python 爬虫" scheme="https://www.joydee.top/categories/Python/Python-%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://www.joydee.top/tags/Python/"/>
    
    <category term="网络爬虫" scheme="https://www.joydee.top/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
    <category term="正则表达式" scheme="https://www.joydee.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    <category term="BeautifulSoup" scheme="https://www.joydee.top/tags/BeautifulSoup/"/>
    
  </entry>
  
  <entry>
    <title>「网络数据爬取」urllib库的使用</title>
    <link href="https://www.joydee.top/posts/980e73a2/"/>
    <id>https://www.joydee.top/posts/980e73a2/</id>
    <published>2021-07-13T04:56:22.000Z</published>
    <updated>2021-09-07T07:17:26.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络爬虫的限制"><a class="header-anchor" href="#网络爬虫的限制">¶</a>网络爬虫的限制</h2><ul><li><p>来源审查：检查来访HTTP协议头的 <code>User-Agent</code>  域，只响应浏览器或友好爬虫的访问</p></li><li><p>发布公告：Robots 协议（网络爬虫排除标准），告知所有爬虫网站的爬取策略，要求爬虫遵守</p><blockquote><p>Robots 协议，一般放置在网站根目录下的robots.txt文件。</p></blockquote><p>在爬虫之前，需要识别robots.txt，再进行内容爬取</p><blockquote><p><strong>原则</strong>：类人行为可不参考Robots协议</p></blockquote></li></ul><h2 id="urllib-库"><a class="header-anchor" href="#urllib-库">¶</a>urllib 库</h2><p>Python3 的 urllib 库，无需安装，用于操作网页的URL，并对网页的内容进行抓取处理。</p><p>该包包含四个模块：</p><ul><li><code>urllib.request</code>：打开和读取URL</li><li><code>urllib.error</code>：包含 <code>urllib.request</code> 抛出的异常</li><li><code>urllib.parse</code>：解析URL</li><li><code>urllib.robotparser</code>：解析 robots.txt 文件</li></ul><h3 id="urllib-parse"><a class="header-anchor" href="#urllib-parse">¶</a>urllib.parse</h3><p>该库能够对 URL 进行解析，我们常用其来封装 请求中需要传输的数据，</p><p>首先对其进行引入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br></code></pre></td></tr></table></figure><p>当我们需要发送GET请求时，有时候会需要在URL中携带请求参数；又或者是当需要发送POST请求时，请求中需要携带表单数据。而 <code>urllib.parse.urlencode()</code> 能够将字典或元组数据转换为URL请求中可携带的数据。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">urllib.parse.urlencode(&#123;<span class="hljs-string">&quot;任务&quot;</span>:<span class="hljs-string">&quot;go shopping&quot;</span>&#125;)<br><span class="hljs-comment"># 返回字符串(URL请求参数的格式)：%E4%BB%BB%E5%8A%A1=go+shopping</span><br></code></pre></td></tr></table></figure><h3 id="urllib-request"><a class="header-anchor" href="#urllib-request">¶</a>urllib.request</h3><p><code>urllib.request</code> 定义了打开URL的方法及相关的类，包含授权验证、重定向、浏览器 cookies 等，可通过它<strong>模拟浏览器的一个请求发起过程</strong>。</p><p>首先对其进行引入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br></code></pre></td></tr></table></figure><p>（一）发送URL请求</p><p><code>urllib.request.urlopen(url, data=None, .....)</code>  其中，参数 <code>data</code>  为发送到服务器的其他数据对象。</p><p>上述方法的返回值，可以调用 <code>read()</code> 以获取响应正文，或者调用 <code>getcode()</code> 获取状态码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">myURL = urllib.request.urlopen(<span class="hljs-string">&quot;https://www.joydee.top/&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(response)) <span class="hljs-comment"># &lt;class &#x27;http.client.HTTPResponse&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(response.getcode()) <span class="hljs-comment"># 网页正常，返回200</span><br><span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><span class="hljs-comment"># 使用UTF-8解码方式，获取响应正文（网页的HTML代码）</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;</span><br><span class="hljs-string">&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</span><br><span class="hljs-string">..........</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>上述代码相当于发送一个GET请求，下面方法是发送POST请求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">data = <span class="hljs-built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="hljs-string">&quot;任务&quot;</span>:<span class="hljs-string">&quot;go shopping&quot;</span>&#125;), encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-comment"># 先将传入的字典转换为URL参数格式的字符串，再创建个与之对应的bytes字节数组</span><br>response = urllib.request.urlopen(<span class="hljs-string">&quot;http://httpbin.org/post&quot;</span>, data=data)<br><span class="hljs-comment"># data 需要传入表单数据的字节数组</span><br><span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><span class="hljs-comment"># 打印响应正文：</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;args&quot;: &#123;&#125;, </span><br><span class="hljs-string">  &quot;data&quot;: &quot;&quot;, </span><br><span class="hljs-string">  &quot;files&quot;: &#123;&#125;, </span><br><span class="hljs-string">  &quot;form&quot;: &#123;</span><br><span class="hljs-string">    &quot;\u4efb\u52a1&quot;: &quot;go shopping&quot;</span><br><span class="hljs-string">  &#125;, </span><br><span class="hljs-string">  &quot;headers&quot;: &#123;</span><br><span class="hljs-string">    &quot;Accept-Encoding&quot;: &quot;identity&quot;, </span><br><span class="hljs-string">    &quot;Content-Length&quot;: &quot;30&quot;, </span><br><span class="hljs-string">    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;, </span><br><span class="hljs-string">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="hljs-string">    &quot;User-Agent&quot;: &quot;Python-urllib/3.8&quot;, </span><br><span class="hljs-string">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-****-436******ee399021********&quot;</span><br><span class="hljs-string">  &#125;, </span><br><span class="hljs-string">  &quot;json&quot;: null, </span><br><span class="hljs-string">  &quot;origin&quot;: &quot;?.?.?.?&quot;, </span><br><span class="hljs-string">  &quot;url&quot;: &quot;http://httpbin.org/post&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>（二）模拟HTTP请求头</p><p>为了符合请求网站对请求的来源审查，需要在HTTP请求中的请求头中模板进行编辑。</p><p>代码举例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">url = <span class="hljs-string">&quot;https://www.douban.com/&quot;</span><br>data = <span class="hljs-built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Luffy&quot;</span>&#125;), encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br><br><span class="hljs-comment">#模拟HTTP请求头</span><br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36&quot;</span><br>&#125; <span class="hljs-comment"># 头部信息</span><br>req = urllib.request.Request(url=url, data=data, headers=headers, method=<span class="hljs-string">&quot;POST&quot;</span>)<br><span class="hljs-comment"># 为保证顺利访问，url与headers参数是必需项，其中headers传入的是字典类型</span><br><br>response = urllib.request.urlopen(req)<br><span class="hljs-built_in">print</span>(response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;网络爬虫的限制&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#网络爬虫的限制&quot;&gt;¶&lt;/a&gt;网络爬虫的限制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;来源审查：检查来访HTTP协议头的 &lt;code&gt;User-Agent&lt;/code&gt;  域，只响应浏览器</summary>
      
    
    
    
    <category term="Python" scheme="https://www.joydee.top/categories/Python/"/>
    
    <category term="Python 爬虫" scheme="https://www.joydee.top/categories/Python/Python-%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://www.joydee.top/tags/Python/"/>
    
    <category term="网络爬虫" scheme="https://www.joydee.top/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
    <category term="urllib" scheme="https://www.joydee.top/tags/urllib/"/>
    
    <category term="Robots" scheme="https://www.joydee.top/tags/Robots/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络错题汇总</title>
    <link href="https://www.joydee.top/posts/9e115195/"/>
    <id>https://www.joydee.top/posts/9e115195/</id>
    <published>2021-06-18T13:00:00.000Z</published>
    <updated>2021-09-07T07:17:26.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chap-2-物理层"><a class="header-anchor" href="#Chap-2-物理层">¶</a>Chap 2. 物理层</h1><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619082114.png"/><ul><li><p>编码 -&gt; 基带调制</p></li><li><p>光纤分为多模光纤和单模光纤</p></li><li><p>奈奎斯特定理：理想低通信道下的极限数据传输率 = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>W</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>V</mi></mrow><annotation encoding="application/x-tex">2W\log_2{V}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span> 是带宽（单位：Hz），<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span> 表示每个码元离散电平的数目（比如16种码元，需要4位二进制位）</p></blockquote></li></ul><h1 id="Chap-3-数据链路层"><a class="header-anchor" href="#Chap-3-数据链路层">¶</a>Chap 3. 数据链路层</h1><ul><li><p>数据通信控制规程分为两类：面向字符的和面向字节的</p></li><li><p>网络接口卡（NIC）位于OSI模型的数据链路层</p></li><li><p>数据链路层的功能：</p><ul><li><p>为网络层提供服务</p></li><li><p><strong>链路管理</strong></p></li><li><p>帧定界、<strong>帧同步</strong>与透明传输</p><blockquote><p>帧同步：从收到的比特流中对无误地判断出一个帧从哪个比特开始以及到哪个比特结束。</p></blockquote></li><li><p><strong>流量控制</strong></p><blockquote><p>数据链路层：<strong>相邻结点</strong>间数据链路上的流量</p><p>运输层：从源端到目的端之间的流量</p></blockquote></li><li><p><strong>差错控制</strong></p><blockquote><p>采用循环冗余检验CRC发现位错，通过自动重传请求ARP来重传出错的帧</p></blockquote></li></ul></li><li><p>物理层使用的中间设备：中继器（又称<strong>转发器</strong>）、<strong>集线器</strong>；数据链路层使用的中间设备：<strong>网桥</strong>或桥接器</p><blockquote><p>中继器<strong>没有</strong>存储转发功能！它只是放大数字信号。</p><p>使用集线器能够在<strong>物理层</strong>拓展以太网，将信号放大，简单地<strong>转发</strong>比特，不能够分割冲突域</p><p>桥接器可对<strong>不同</strong>格式的帧进行重组</p><p>使用以太网交换机（交换式集线器），属于网桥，全双工、无碰撞</p></blockquote></li><li><p><strong>100</strong>BASE-T的<strong>快速</strong>以太网定为正式标准，代号为IEEE 802.3u</p><blockquote><p>10BASE-T的拓扑结构为<strong>星型</strong>，使用<strong>双绞线</strong>电缆</p><p>10BASE5使用粗同轴电缆</p></blockquote></li><li><p>PPP协议有三个组成部分，其中两个为：链路控制协议LCP、网络控制协议NCP</p><blockquote><p>NCP用于协商在该数据链路上所传输的数据包的格式与类型</p></blockquote></li><li><p>局域网的特性主要由三个要素决定：<strong>拓扑结构</strong>、<strong>传输介质</strong>、<strong>介质访问控制方式</strong></p><blockquote><p>介质访问<strong>控制方法</strong>具体有：CSMA/CD（用于总线型局域网）、令牌总线和令牌环</p><p>介质访问控制方法有：</p><ul><li>信道划分介质访问控制 –&gt; 多路复用技术</li><li>随机访问介质访问控制 （如CSMA/CD）</li><li>轮询访问介质访问控制</li></ul></blockquote></li><li><p>冲突是一种正常现象</p></li><li><p>网桥虽然能够隔离冲突，用生成树算法解决环路拓扑的广播风暴，但设备初始化时仍存在广播风暴，而路由器隔离了广播域，<strong>抑制了广播风暴</strong>。</p></li><li><p>使用广播信道的数据链路层–&gt;以太网，“数据以广播方式”是对的</p></li><li><p>利用多个以太网交换机组成的局域网<strong>能够</strong>出现环（因为有生成树协议STP）</p></li><li><p>FDDI是光纤分布式<strong>数据</strong>接口，使用<strong>令牌环</strong>介质访问控制方法</p></li></ul><h1 id="Chap-4-网络层"><a class="header-anchor" href="#Chap-4-网络层">¶</a>Chap 4. 网络层</h1><p>IP地址的编址方法的三个阶段</p><ul><li>分类的IP地址</li><li>子网的划分</li><li>构成超网</li></ul><p>路由协议：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619104831.png"/><h1 id="Chap-5-运输层"><a class="header-anchor" href="#Chap-5-运输层">¶</a>Chap 5. 运输层</h1><ul><li><p>RIP 协议使用运输层的用户数据报<strong>UDP</strong>进行传送。</p></li><li><p>TCP的协议数据单元为TCP报文段，也称为“<strong>分段</strong>”。</p></li><li><p>用来表示一个TCP连接端点的是<strong>套接字</strong>。</p></li><li><p>选择重传是“收一个发一个”</p></li><li><p>在地址方面，UDP报头本身只是给出协议的<strong>端口</strong>编号</p></li><li><p>TCP控制位：URG、ACK、PSH、RST、SYN、FIN</p></li><li><p>TCP协议中采用<strong>慢开始和拥塞</strong>避免算法来控制拥塞。</p></li><li><p>向主机B发送了序号为70 TCP报文段，并收到了B的序号为100的确认报文，那么A向主机B发送了（30）个字节</p></li><li><p>发送方发送TCP报文A后，启动超时定时器，若在该定时器时间内没有收到<strong>确认报文</strong>，则重发报文A。</p></li><li><p>无连接的服务只能提供不可靠的服务</p></li></ul><h1 id="Chap-6-应用层"><a class="header-anchor" href="#Chap-6-应用层">¶</a>Chap 6. 应用层</h1><table><thead><tr><th>中文名</th><th>英文缩写</th></tr></thead><tbody><tr><td>超文本传输协议</td><td>HTTP</td></tr><tr><td>文件传送协议</td><td>FTP</td></tr><tr><td>远程登陆协议（终端仿真协议）</td><td>Telnet</td></tr><tr><td>简单邮件传送协议</td><td>SMTP</td></tr><tr><td>网际报文存取协议</td><td>IMAP</td></tr><tr><td>邮局通信协议</td><td>POP3</td></tr></tbody></table><ul><li><p>万维网（WWW）客户程序与万维网服务器程序之间的交互遵守严格的协议，即<strong>超文本传送协议HTTP</strong>（使用TCP连接进行可靠的传送）</p></li><li><p>Internet采用的工作模式为<strong>浏览器-服务器</strong>模式，提供的三项基本服务是：<strong>Web</strong>、<strong>Email</strong>和<strong>FTP</strong>。</p><blockquote><p>FTP协议可以传输文本文件，也可以传输压缩文件、图形和图像等文件。</p></blockquote></li><li><p>远程终端协议TELNET，可以进行<strong>远程登录</strong>管理</p></li><li><p>DNS实质上是一个<strong>分布式</strong>数据库系统</p></li><li><p>互联网DNS域名服务器也是按照<strong>层次</strong>安排的，每一个域名服务器都只对域名体系中的一部分进行管辖。</p></li><li><p>许多域名服务器同时充当<strong>本地</strong>域名服务器和<strong>授权</strong>域名服务器。</p></li><li><p>当一个本地域名域名服务器不能立即回答某个主机的查询时，它就以DNS客户的身份向某一个<strong>根</strong>域名服务器查询。</p><p>当根域名服务器没有被查询主机的信息时，它一定知道某个保存有被查询主机名字映射的<strong>授权</strong>域名服务器的IP地址。</p></li><li><p>base 64编码 P293</p></li></ul><h1 id="Chap-7-网络安全"><a class="header-anchor" href="#Chap-7-网络安全">¶</a>Chap 7. 网络安全</h1><ul><li>公开密钥与对称密钥的区别：（P330）<ul><li><strong>对称密钥</strong>：使用同样的密钥，在通信信道上进行<strong>一对一的双向保密通信</strong>。</li><li><strong>公开密钥</strong>：使用不同的加密密钥与解密密钥，在通信信道上<strong>多对一的单向保密通信</strong>。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chap-2-物理层&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chap-2-物理层&quot;&gt;¶&lt;/a&gt;Chap 2. 物理层&lt;/h1&gt;
&lt;img src=&quot;https://gitee.com/j__strawhat/MyImages/raw/m</summary>
      
    
    
    
    <category term="Computer Science" scheme="https://www.joydee.top/categories/Computer-Science/"/>
    
    <category term="Computer Network" scheme="https://www.joydee.top/categories/Computer-Science/Computer-Network/"/>
    
    
    <category term="计算机网络" scheme="https://www.joydee.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>「数电实验课程设计4」可控进制的计数器</title>
    <link href="https://www.joydee.top/posts/67a91b71/"/>
    <id>https://www.joydee.top/posts/67a91b71/</id>
    <published>2021-06-16T16:57:53.000Z</published>
    <updated>2021-07-20T17:14:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了给电脑腾出空间，加之数电实验成绩已出，因而准备卸载 Vivado 这个占据 44.70GB 体积的集成环境。😅</p><p>之前在这门课也花了不少的精力去琢磨，因此<s>在软件卸载之前</s>，在本篇文章中留下自己的一点学习记录吧，项目的<a href="https://github.com/J-StrawHat/octal-and-decimal-counter">相关核心源码</a>也存放到我的仓库了（大佬们不妨给个Star⭐️吧~）</p><h2 id="实验环境"><a class="header-anchor" href="#实验环境">¶</a>实验环境</h2><ul><li><p>开发板型号：<a href="https://reference.digilentinc.com/programmable-logic/nexys-4-ddr/start?redirect=1">Nexys 4 DDR</a></p></li><li><p>芯片型号：<code>xc7a100tcsg324-1</code></p></li><li><p>集成设计环境：<a href="https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/vivado-design-tools/archive.html">Vivado 2019.1</a></p><blockquote><p>软件参考教程：<a href="https://blog.csdn.net/MicroTalent12/article/details/106554746">Vivado_SDK_2019.1 使用详细教程</a>、<a href="https://blog.csdn.net/pengwangguo/article/details/75502866">Vivado如何获取License</a></p><p>FPGA设计教程：<a href="https://space.bilibili.com/511019924">美国DIGILENT科技Bilibili</a></p></blockquote></li></ul><h2 id="实验内容"><a class="header-anchor" href="#实验内容">¶</a>实验内容</h2><ol><li><p>设计可控进制的计数器：在输入控制变量的作用下实现计数器。在输入 0 时工作在 <code>8</code> 进制；在输入 1 时工作在 <code>15</code> 进制。</p></li><li><p>用数码管显示输出结果。</p></li></ol><h2 id="实验原理"><a class="header-anchor" href="#实验原理">¶</a>实验原理</h2><h3 id="输入变量"><a class="header-anchor" href="#输入变量">¶</a>输入变量</h3><ul><li>一位二进制 opt ，代表进制选择：opt=0，则工作 8 进制；opt=1，则工作在 15 进制；</li><li>一位二进制 clk ，代表时钟信号，为更好地演示效果，将时钟信号映射到开发板的按钮 <code>P17</code>；</li><li>一位二进制 rst ，用于异步清零；</li></ul><h3 id="输出变量"><a class="header-anchor" href="#输出变量">¶</a>输出变量</h3><ul><li>八位二进制 <code>dis</code> ，代表电路当前的计数状态</li></ul><h3 id="功能分析"><a class="header-anchor" href="#功能分析">¶</a>功能分析</h3><ul><li><p>当 opt=0 时，电路工作在 8 进制，每当接收到上升沿的时钟信号，电路计数状态 cnt 就会加一，同时，数码管会显示当前计数状态对应的数字。直到计满 8 个状态即 cnt=<code>0111</code> 时，电路在下一个上升沿的时钟信号下，就会自动地清零。</p></li><li><p>当 opt=1 时，电路工作在 15 进制，每当接收到上升沿的时钟信号，电路计数状态 cnt 就会加一，同时，数码管会显示当前计数状态对应的数字。直到计满 15 个状态即 cnt=<code>1110</code> 时，电路在下一个上升沿的时钟信号下，就会自动地清零。</p></li></ul><h2 id="实验过程"><a class="header-anchor" href="#实验过程">¶</a>实验过程</h2><h3 id="Verilog-源代码"><a class="header-anchor" href="#Verilog-源代码">¶</a>Verilog 源代码</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">//////////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">// Company: </span><br><span class="hljs-comment">// Engineer: Joy Dee</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Create Date: 2021/06/16 15:16:32</span><br><span class="hljs-comment">// Design Name: 可控进制的计数器</span><br><span class="hljs-comment">// Module Name: ControllableCounter</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">//////////////////////////////////////////////////////////////////////////////////</span><br><br><span class="hljs-keyword">module</span> ControllableCounter(<br>    <span class="hljs-keyword">input</span> opt,<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> rst,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] dis<br>    );<br>    <br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] cnt;<br><br>    <span class="hljs-keyword">initial</span> cnt = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> rst)<br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(rst) <span class="hljs-comment">//异步清零</span><br>        <span class="hljs-keyword">begin</span><br>           cnt = <span class="hljs-number">4&#x27;b0000</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(!opt) <span class="hljs-comment">//8进制</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">4&#x27;b0111</span>)<br>            <span class="hljs-keyword">begin</span> <span class="hljs-comment">//进位</span><br>                cnt = <span class="hljs-number">4&#x27;b0000</span>;<br>            <span class="hljs-keyword">end</span><br>            <br>            <span class="hljs-keyword">else</span> <br>            <span class="hljs-keyword">begin</span><br>                cnt = cnt + <span class="hljs-number">4&#x27;b0001</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-comment">//15进制</span><br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">4&#x27;b1110</span>)<br>            <span class="hljs-keyword">begin</span> <span class="hljs-comment">//进位</span><br>                cnt = <span class="hljs-number">4&#x27;b0000</span>;<br>            <span class="hljs-keyword">end</span><br>            <br>            <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">begin</span><br>                cnt = cnt + <span class="hljs-number">4&#x27;b0001</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span> <br>    <br>    <span class="hljs-keyword">wire</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] AN;<br><br>    <span class="hljs-keyword">assign</span> AN = <span class="hljs-number">8&#x27;b00000000</span>;<br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span> (cnt)<br>            <span class="hljs-number">4&#x27;b0000</span>: dis = <span class="hljs-number">8&#x27;b00000011</span>; <span class="hljs-comment">//0</span><br>            <span class="hljs-number">4&#x27;b0001</span>: dis = <span class="hljs-number">8&#x27;b10011111</span>; <span class="hljs-comment">//1</span><br>            <span class="hljs-number">4&#x27;b0010</span>: dis = <span class="hljs-number">8&#x27;b00100101</span>; <span class="hljs-comment">//2</span><br>            <span class="hljs-number">4&#x27;b0011</span>: dis = <span class="hljs-number">8&#x27;b00001101</span>; <span class="hljs-comment">//3</span><br>            <span class="hljs-number">4&#x27;b0100</span>: dis = <span class="hljs-number">8&#x27;b10011001</span>; <span class="hljs-comment">//4</span><br>            <span class="hljs-number">4&#x27;b0101</span>: dis = <span class="hljs-number">8&#x27;b01001001</span>; <span class="hljs-comment">//5</span><br>            <span class="hljs-number">4&#x27;b0110</span>: dis = <span class="hljs-number">8&#x27;b01000001</span>; <span class="hljs-comment">//6</span><br>            <span class="hljs-number">4&#x27;b0111</span>: dis = <span class="hljs-number">8&#x27;b00011111</span>; <span class="hljs-comment">//7</span><br>            <span class="hljs-number">4&#x27;b1000</span>: dis = <span class="hljs-number">8&#x27;b00000001</span>; <span class="hljs-comment">//8</span><br>            <span class="hljs-number">4&#x27;b1001</span>: dis = <span class="hljs-number">8&#x27;b00001001</span>; <span class="hljs-comment">//9</span><br>            <span class="hljs-number">4&#x27;b1010</span>: dis = <span class="hljs-number">8&#x27;b00010001</span>; <span class="hljs-comment">//A</span><br>            <span class="hljs-number">4&#x27;b1011</span>: dis = <span class="hljs-number">8&#x27;b11000001</span>; <span class="hljs-comment">//b</span><br>            <span class="hljs-number">4&#x27;b1100</span>: dis = <span class="hljs-number">8&#x27;b01100011</span>; <span class="hljs-comment">//C</span><br>            <span class="hljs-number">4&#x27;b1101</span>: dis = <span class="hljs-number">8&#x27;b10000101</span>; <span class="hljs-comment">//d</span><br>            <span class="hljs-number">4&#x27;b1110</span>: dis = <span class="hljs-number">8&#x27;b01100001</span>; <span class="hljs-comment">//E</span><br>            <span class="hljs-number">4&#x27;b1111</span>: dis = <span class="hljs-number">8&#x27;b01110001</span>; <span class="hljs-comment">//F</span><br>            <span class="hljs-keyword">default</span>: dis = <span class="hljs-number">8&#x27;b10000001</span>; <span class="hljs-comment">//0</span><br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h3 id="仿真"><a class="header-anchor" href="#仿真">¶</a>仿真</h3><h4 id="仿真源代码"><a class="header-anchor" href="#仿真源代码">¶</a>仿真源代码</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-meta-keyword">timescale</span> 1ns / 1ps</span><br><span class="hljs-comment">//////////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">// Company: </span><br><span class="hljs-comment">// Engineer: Joy Dee</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Create Date: 2021/06/16 23:41:27</span><br><span class="hljs-comment">// Design Name: 可控进制的计数器的仿真代码</span><br><span class="hljs-comment">// Module Name: ControllableCounter_sim</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">//////////////////////////////////////////////////////////////////////////////////</span><br><br><span class="hljs-keyword">module</span> ControllableCounter_sim();<br>    <span class="hljs-keyword">reg</span> opt;<br>    <span class="hljs-keyword">reg</span> clk;<br>    <span class="hljs-keyword">reg</span> rst;<br>    <span class="hljs-keyword">wire</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] dis;<br>    FinalCounter test(<br>        <span class="hljs-variable">.opt</span>(opt),<br>        <span class="hljs-variable">.clk</span>(clk),<br>        <span class="hljs-variable">.rst</span>(rst),<br>        <span class="hljs-variable">.dis</span>(dis)<br>    );<br>    <span class="hljs-keyword">initial</span><br>    <span class="hljs-keyword">begin</span><br>        clk = <span class="hljs-number">0</span>;<br>        rst = <span class="hljs-number">0</span>;<br>        opt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> #<span class="hljs-number">20</span> clk = ~clk;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h4 id="分析"><a class="header-anchor" href="#分析">¶</a>分析</h4><ul><li><p>如下图，当 opt=0 时，每当上升沿的时钟信号到来时，电路计数状态加 1 ，并对应到相应的数码管数字，当第 8 个时钟信号到来时，电路计数状态就会清零；</p><blockquote><p>注意，图中 <code>dis</code> 值对应的含义是七段数码管显示的数字（包括了小数点位）</p></blockquote><img src="https://cdn.joydee.cloud//20210721014856.png"/></li><li><p>如下图，当 opt=1 时，每当上升沿的时钟信号到来时，电路计数状态加 1 ，并对应到相应的数码管数字，当第 15 个时钟信号到来时，电路计数状态就会清零；</p><img src="https://cdn.joydee.cloud//20210721015435.png"/></li></ul><h3 id="约束文件"><a class="header-anchor" href="#约束文件">¶</a>约束文件</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs verilog">##Buttons<br>set_property -dict &#123; PACKAGE_PIN P17   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; clk &#125;]; #IO_L9N_T1_DQS_D13_14 Sch=btnd<br>set_property -dict &#123; PACKAGE_PIN P18   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; rst &#125;]; #IO_L9N_T1_DQS_D13_14 Sch=btnd<br>set_property CLOCK_DEDICATED_ROUTE FALSE [get_nets clk]<br><br>##Switches<br>set_property -dict &#123; PACKAGE_PIN J15   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; opt &#125;]; #IO_L24N_T3_RS0_15 Sch=sw[<span class="hljs-number">0</span>]<br><br>##<span class="hljs-number">7</span> segment display<br>set_property -dict &#123; PACKAGE_PIN T10   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; dis[<span class="hljs-number">7</span>] &#125;]; #IO_L24N_T3_A00_D16_14 Sch=ca<br>set_property -dict &#123; PACKAGE_PIN R10   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; dis[<span class="hljs-number">6</span>] &#125;]; #IO_25_14 Sch=cb<br>set_property -dict &#123; PACKAGE_PIN K16   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; dis[<span class="hljs-number">5</span>] &#125;]; #IO_25_15 Sch=cc<br>set_property -dict &#123; PACKAGE_PIN K13   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; dis[<span class="hljs-number">4</span>] &#125;]; #IO_L17P_T2_A26_15 Sch=cd<br>set_property -dict &#123; PACKAGE_PIN P15   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; dis[<span class="hljs-number">3</span>] &#125;]; #IO_L13P_T2_MRCC_14 Sch=ce<br>set_property -dict &#123; PACKAGE_PIN T11   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; dis[<span class="hljs-number">2</span>] &#125;]; #IO_L19P_T3_A10_D26_14 Sch=cf<br>set_property -dict &#123; PACKAGE_PIN L18   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; dis[<span class="hljs-number">1</span>] &#125;]; #IO_L4P_T0_D04_14 Sch=cg<br>set_property -dict &#123; PACKAGE_PIN H15   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; dis[<span class="hljs-number">0</span>] &#125;]; #IO_L19N_T3_A21_VREF_15 Sch=dp<br><br>set_property -dict &#123; PACKAGE_PIN J17   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; AN[<span class="hljs-number">0</span>] &#125;]; #IO_L23P_T3_FOE_B_15 Sch=an[<span class="hljs-number">0</span>]<br>set_property -dict &#123; PACKAGE_PIN J18   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; AN[<span class="hljs-number">1</span>] &#125;]; #IO_L23N_T3_FWE_B_15 Sch=an[<span class="hljs-number">1</span>]<br>set_property -dict &#123; PACKAGE_PIN T9    IOSTANDARD LVCMOS33 &#125; [get_ports &#123; AN[<span class="hljs-number">2</span>] &#125;]; #IO_L24P_T3_A01_D17_14 Sch=an[<span class="hljs-number">2</span>]<br>set_property -dict &#123; PACKAGE_PIN J14   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; AN[<span class="hljs-number">3</span>] &#125;]; #IO_L19P_T3_A22_15 Sch=an[<span class="hljs-number">3</span>]<br>set_property -dict &#123; PACKAGE_PIN P14   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; AN[<span class="hljs-number">4</span>] &#125;]; #IO_L8N_T1_D12_14 Sch=an[<span class="hljs-number">4</span>]<br>set_property -dict &#123; PACKAGE_PIN T14   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; AN[<span class="hljs-number">5</span>] &#125;]; #IO_L14P_T2_SRCC_14 Sch=an[<span class="hljs-number">5</span>]<br>set_property -dict &#123; PACKAGE_PIN K2    IOSTANDARD LVCMOS33 &#125; [get_ports &#123; AN[<span class="hljs-number">6</span>] &#125;]; #IO_L23P_T3_35 Sch=an[<span class="hljs-number">6</span>]<br>set_property -dict &#123; PACKAGE_PIN U13   IOSTANDARD LVCMOS33 &#125; [get_ports &#123; AN[<span class="hljs-number">7</span>] &#125;]; #IO_L23N_T3_A02_D18_14 Sch=an[<span class="hljs-number">7</span>]<br></code></pre></td></tr></table></figure><h3 id="开发板运行"><a class="header-anchor" href="#开发板运行">¶</a>开发板运行</h3><p>当 opt=0 时，此时电路工作在八进制。</p><p>最初，电路计数状态为 <code>0000</code> ，故数码管显示数字为“0”。</p><p><s>感谢为神献出黄金左手帮我操作</s></p><img src="https://cdn.joydee.cloud//20210721015702.png"/><p>当按下 P17 按钮时，电路接收到一个新的脉冲，电路计数状态加1，此时计数状态变为 <code>0001</code>，映射到数码管显示数字为“1”。</p><img src="https://cdn.joydee.cloud//20210721015733.png"/><p>如下图，此时电路计数状态为最后的状态，cnt=0111，映射到数码管显示数字为“7”</p><img src="https://cdn.joydee.cloud//20210721015810.png"/><p>当下一个脉冲信号到来时，电路已经计满8个状态，此时电路计数状态清零，故数码管显示数字为“0”；</p><img src="https://cdn.joydee.cloud//20210721015832.png"/><p>将J15开关打开，此时opt=1，电路工作在15进制。</p><img src="https://cdn.joydee.cloud//20210721015902.png"/><p>按下P17按键，电路接收脉冲，电路计数状态加1。如下图，电路计数状态已达到第12个状态（即cnt=1100），此时数码管显示数字为16进制的“C”</p><img src="https://cdn.joydee.cloud//20210721015932.png"/><p>此时，电路已经计满15个计数状态，数码管显示“E”，代表cnt=0110</p><img src="https://cdn.joydee.cloud//20210721020019.png"/><p>电路再接收新的脉冲信号时，由于电路计数状态已计满15个状态，此时电路将会清零，回归到起点。</p><img src="https://cdn.joydee.cloud//20210721020038.png"/>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;为了给电脑腾出空间，加之数电实验成绩已出，因而准备卸载 Vivado 这个占据 44.70GB 体积的集成环境。😅&lt;/p&gt;
&lt;p&gt;之前在这门课也花了不少的精力去琢磨，因此&lt;s&gt;在软件卸载之前&lt;/s&gt;，在本篇文章中留下自己的一点学习记录吧，项目的&lt;a href=&quot;https</summary>
      
    
    
    
    <category term="Computer Science" scheme="https://www.joydee.top/categories/Computer-Science/"/>
    
    <category term="计算机电路基础" scheme="https://www.joydee.top/categories/Computer-Science/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="电路" scheme="https://www.joydee.top/tags/%E7%94%B5%E8%B7%AF/"/>
    
    <category term="数电" scheme="https://www.joydee.top/tags/%E6%95%B0%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>马原考点总结</title>
    <link href="https://www.joydee.top/posts/290ad7f9/"/>
    <id>https://www.joydee.top/posts/290ad7f9/</id>
    <published>2021-06-13T09:00:00.000Z</published>
    <updated>2021-09-07T07:17:26.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chap1-导论"><a class="header-anchor" href="#Chap1-导论">¶</a>Chap1. 导论</h1><h2 id="马克思主义构成之间的联系"><a class="header-anchor" href="#马克思主义构成之间的联系">¶</a>马克思主义构成之间的联系</h2><p>马克思用马哲（马克思主义哲学）的方法，研究并编写政经（马克思主义政治经济学）的理论，得出科社（科学社会主义）的结论。</p><h2 id="马克思主义的基本立场、基本观点和基本方法"><a class="header-anchor" href="#马克思主义的基本立场、基本观点和基本方法">¶</a>马克思主义的基本立场、基本观点和基本方法</h2><ul><li>基本立场：无产阶级、人民</li><li>基本观点（内容）：关于自然、社会和人类思维发展…人类思想成果和社会实践…</li><li>基本方法：辩证唯物主义和历史唯物主义</li></ul><h2 id="马克思主义的来源"><a class="header-anchor" href="#马克思主义的来源">¶</a>马克思主义的来源</h2><p>世界第一个无产阶级<strong>政党</strong>：共产主义者同盟</p><p>马克思主义公开问世的标志：《共产党宣言》的发表</p><p>产生的条件：</p><ul><li>社会根源：资本主义生产方式的发展</li><li>阶级基础（实践基础）：无产阶级在反抗资产阶级剥削和压迫的斗争</li><li><strong>思想渊源</strong>：德国古典哲学、英国古典政治经济学、英法两国的空想社会主义</li></ul><h2 id="马克思主义的鲜明特征"><a class="header-anchor" href="#马克思主义的鲜明特征">¶</a>马克思主义的鲜明特征</h2><ol><li><p>科学性：（独有特征）正确反映</p></li><li><p>革命性：彻底地批判、无产阶级立场</p></li><li><p>实践性：（独有特征）</p></li><li><p>人民性：  马克思主义的人民性是以阶级性为深刻基础的，是无产阶级先进性的体现</p><blockquote><p>只要代表无产阶级，就代表人民</p></blockquote></li><li><p>发展开放性：与时俱进</p></li></ol><h2 id="哲学的基本问题"><a class="header-anchor" href="#哲学的基本问题">¶</a>哲学的基本问题</h2><p>“思维和存在的关系问题”</p><blockquote><p>思维-&gt;意识。物质-&gt;存在</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210613164047 (定制).png"/><h2 id="哲学的重要问题"><a class="header-anchor" href="#哲学的重要问题">¶</a>哲学的重要问题</h2><p>“世界是怎样存在的”</p><p>存在两种观点：</p><ul><li>形而上学认为：孤立、片面、静止、无矛盾</li><li>辩证法认为：联系、全面、发展、矛盾</li></ul><h2 id="马克思在哲学史上的两大历史贡献"><a class="header-anchor" href="#马克思在哲学史上的两大历史贡献">¶</a>马克思在哲学史上的两大历史贡献</h2><ol><li>创立：历史唯物主义（或称唯物史观）</li><li>形成：辩证唯物主义</li></ol><p>在马克思主义产生之前，只存在这三个组合：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210613164951.png" style="zoom: 50%;" /><h1 id="Chap2-唯物论"><a class="header-anchor" href="#Chap2-唯物论">¶</a>Chap2. 唯物论</h1><p>马哲：</p><p>唯物论——世界是什么？</p><p>辩证法——世界是怎样的？</p><p>认识论——如何认知？</p><p>唯物史观——人类历史、发展规律</p><h2 id="物质观"><a class="header-anchor" href="#物质观">¶</a>物质观</h2><h3 id="物质范畴（定义）"><a class="header-anchor" href="#物质范畴（定义）">¶</a>物质范畴（定义）</h3><ul><li><p>恩格斯：从各种物的总和中<strong>抽象</strong>出来</p></li><li><p><strong>列宁</strong>：（紧抓第二点）</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210613171325.png"/><blockquote><p><strong>定义的方式</strong>：物质和意识的关系</p><p>列宁借助“感觉”来定义“物质”</p></blockquote></li><li><p>物质的唯一特性：客观实在</p><blockquote><p>物质的根本属性：运动</p></blockquote></li></ul><h3 id="物质和运动"><a class="header-anchor" href="#物质和运动">¶</a>物质和运动</h3><p>运动是物质的<strong>存在方式</strong>和根本属性</p><blockquote><p>运动即是变化，凡是物质，都是以运动的方式存在的。</p></blockquote><p>物质和运动的<strong>关系</strong>：不可分割。XXX是YYY的XXX</p><p>批判两种错误的观点：</p><ul><li>脱离物质谈运动-&gt;唯心主义；</li><li>脱离运动谈物质-&gt;形而上学</li></ul><h3 id="运动和静止"><a class="header-anchor" href="#运动和静止">¶</a>运动和静止</h3><p>运动是无条件的，运动的存在方式是时空</p><p>静止包括空间位置和根本性质暂时未变，两种运动的<strong>特殊</strong>状态</p><blockquote><p>静止是运动的衡量尺度</p></blockquote><p>运动和静止的<strong>关系</strong>：对立统一</p><ul><li>相互区别：</li><li>相互联系：“鸟鸣山更幽，风定花犹落”——动中有静、静中有动</li></ul><p>批判两种错误的观点：</p><ul><li>夸大静止，形而上学</li><li>夸大运动，诡辩论</li></ul><blockquote><p>“人不能两次踏进同一条河流”——符合马克思主义的观点</p><p>“人一次都不能踏进同一条河流”——夸大了运动</p></blockquote><h3 id="物质运动与时空"><a class="header-anchor" href="#物质运动与时空">¶</a>物质运动与时空</h3><p>时间特点是一维性，空间特点是三维性</p><p>时间和空间是物质运动的<strong>存在形式</strong>（<strong>存在方式</strong>）</p><blockquote><p>物质的存在方式是运动，运动的存在方式是时空</p><p>所以说，“时间是物质运动的存在形式”是正确的说法</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210613180022.png"/><h2 id="意识观"><a class="header-anchor" href="#意识观">¶</a>意识观</h2><h3 id="实践是自然存在和社会存在区分和统一的基础"><a class="header-anchor" href="#实践是自然存在和社会存在区分和统一的基础">¶</a>实践是自然存在和社会存在区分和统一的基础</h3><p><strong>社会生活的本质</strong>：实践</p><ul><li>实践是物质世界分化为自然界和人类社会的前提，又是使自然界与…统一起来的现实基础</li><li>实践是人类社会的基础，是理解和解释一切社会现象的钥匙</li></ul><p>为什么实践是社会生活的本质？（社会生活的实践性主要表现在）</p><ul><li><p>实践是社会关系形成的基础</p></li><li><p>实践形成了社会生活的基本领域</p></li><li><p>实践<strong>构成</strong>了社会发展的动力</p><blockquote><p>社会发展的动力——社会基本矛盾</p><p>实践不是社会发展的动力！</p></blockquote></li></ul><h3 id="意识的起源、本质和作用"><a class="header-anchor" href="#意识的起源、本质和作用">¶</a>意识的起源、本质和作用</h3><ul><li><p>意识的<strong>概念</strong>：意识是物质世界长期发展的产物，是人脑的机能和属性，是<strong>物质世界的主观映象</strong>。</p></li><li><p>意识的<strong>本质</strong>：客观世界的主观映像，是客观内容和主观形式的统一。</p></li><li><p>意识的<strong>来源</strong>：</p><ol><li><p>由一切物质所具有的反应特性到低等生物的刺激感应性；</p></li><li><p>再到高等动物的感觉和心理；</p></li><li><p>最终发展为人类的意识；</p><blockquote><p>由此，意识的人独有的</p></blockquote></li></ol></li><li><p>意识形成过程中的影响因素：</p><p>…. 社会实践特别是<strong>劳动</strong> … 决定性作用</p><p>…. 语言 … 促进作用，<strong>语言</strong>还是意识的<strong>物质</strong>外壳（注意区分，语言的含义是意识 ）</p></li><li><p>⭐<strong>意识的作用</strong>：能动作用，主要表现在：</p><ol><li>意识反映世界具有自觉性，具有目的性和计划性</li><li>意识具有<strong>创造性</strong></li><li>意识具有指导实践改造客观世界的作用。</li><li>意识还具有指导、控制人的行为和生理活动的作用</li></ol></li></ul><h2 id="⭐物质与意识的辩证关系"><a class="header-anchor" href="#⭐物质与意识的辩证关系">¶</a>⭐物质与意识的辩证关系</h2><blockquote><p>辩证关系即对立统一关系</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210618221055.png"/><blockquote><p>“意识是人脑的分泌物”——错误观点，将意识混淆为物质</p><p>物质可以“转化”意识，但不能写成“代替”</p><p>物质“强”一点，意识“弱”一点</p></blockquote><p>一方面，尊重客观规律，是正确发挥主观能动性的前提；</p><p>另一方面，只有充分发挥主观能动性，才能正确认识和利用客观规律</p><blockquote><p>社会历史趋向–&gt;规律；主体选择-&gt;能动</p></blockquote><h3 id="人的主观能动性的三个前提及条件"><a class="header-anchor" href="#人的主观能动性的三个前提及条件">¶</a>人的主观能动性的三个前提及条件</h3><ul><li>前提：从实际出发</li><li>基本途径：实践</li><li>还需要依赖一定的物质条件和物质手段</li></ul><h2 id="世界的物质统一性原理"><a class="header-anchor" href="#世界的物质统一性原理">¶</a>世界的物质统一性原理</h2><ul><li><p>世界是统一的，即世界的本原是一个</p><blockquote><p>能够批判“二元论”，但注意，唯心主义也同意该句话</p></blockquote></li><li><p>统一性在于它的物质性，即世界统一的基础是物质</p><blockquote><p>第一句+第二句 可以批判“唯一”，但不能够批判旧唯物主义</p></blockquote></li><li><p>物质世界的统一性是多样性的统一，而不是单一的无差别的统一</p><blockquote><p>三句话才能够批判“旧唯物主义”</p></blockquote></li></ul><h2 id="⭐世界的物质统一性原理的意义"><a class="header-anchor" href="#⭐世界的物质统一性原理的意义">¶</a>⭐世界的物质统一性原理的意义</h2><ol><li>理论上：世界的物质统一性原理，是马克思主义的<strong>基石</strong>。</li><li>实际上：日常生活中要做到一切从实际出发，因为世界的物质统一性原理</li></ol><h2 id="马哲与其他哲学的区别与联系"><a class="header-anchor" href="#马哲与其他哲学的区别与联系">¶</a>马哲与其他哲学的区别与联系</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619003702.png" style="zoom:80%;" /><p><strong>实践</strong>是马哲区别于其他派别的独有的观点</p><h1 id="Chap3-辩证法"><a class="header-anchor" href="#Chap3-辩证法">¶</a>Chap3. 辩证法</h1><blockquote><p>回答的问题：世界是怎样的？——辩证法的两大总特征做出直接的回答</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619134835.png"/><h2 id="两大总特征"><a class="header-anchor" href="#两大总特征">¶</a>两大总特征</h2><h3 id="普遍联系"><a class="header-anchor" href="#普遍联系">¶</a>普遍联系</h3><p>⭐ 联系是以区别为前提的</p><h4 id="联系的特点"><a class="header-anchor" href="#联系的特点">¶</a>联系的特点</h4><ul><li>客观性：联系是事务本身所固有的，不是主观臆想的</li><li>普遍性：<ol><li>任何事务<strong>内部</strong>的不同部分和要素是相互联系的，即任何事务都具有内在结构性</li><li>任何事务都不能孤立存在的，都同<strong>其他事物</strong>处于一定的相互联系之中</li><li>（徐）整个世界是相互联系的统一，它就如同任何事务都是这张网的节点….而这个节点一定通过“中介”是与其他节点联系着，自己也是“中介”</li></ol></li><li>多样性：事物是多样的-&gt;事物的联系也是多样的</li><li>条件性：<ol><li>条件对事物发展和人的活动具有支持或抑制的作用；</li><li>条件可以改变的，人们经过努力可以…</li><li>改变和创造条件不是任意的，必须尊重…规律</li></ol></li></ul><h3 id="永恒发展"><a class="header-anchor" href="#永恒发展">¶</a>永恒发展</h3><h4 id="发展的内涵"><a class="header-anchor" href="#发展的内涵">¶</a>发展的内涵</h4><p>概括一切形式的变化就是运动，运动变化的趋势是发展</p><blockquote><p><strong>运动 = 变化 &gt; 发展</strong>，运动是绝对的、无条件的，但发展不能如此说，发展是永恒的</p></blockquote><h4 id="发展的实质"><a class="header-anchor" href="#发展的实质">¶</a>发展的实质</h4><p>前进上升的运动，发展的实质是新事物（合乎历史、远大前途）的产生和旧事物（丧失历史必然性、日趋灭亡）的灭亡</p><blockquote><p>注意：新事物和旧事物并不是时间的前后关系</p><p>但是，新事物<strong>往往</strong>（不是一定）产生于旧事物之后</p><p>新事物必然取代旧事物</p></blockquote><h3 id="过程的观点"><a class="header-anchor" href="#过程的观点">¶</a>过程的观点</h3><p>世界不是既成事务的集合体，而是<strong>过程</strong>的集合体</p><p>一切在历史上产生的都要在历史上灭亡</p><p>创新永无止境</p><p>…</p><h2 id="五对范畴"><a class="header-anchor" href="#五对范畴">¶</a>五对范畴</h2><blockquote><p>进一步探讨联系和发展环节上的逻辑问题</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619141713.png"/><h3 id="原因与结果"><a class="header-anchor" href="#原因与结果">¶</a>原因与结果</h3><ul><li><p>原因与结果-&gt;前后相继</p></li><li><p><strong>关系</strong>：对立统一</p><blockquote><p>有其因必有其果是错误的，因为原因和结果的关系是复杂多样的，有“同因异果”，同样的原因未必导致同样的结果</p><p>有因必有果是正确的</p></blockquote></li><li><p>方法论：凡事预则立，不预则废</p></li></ul><h3 id="必然与偶然"><a class="header-anchor" href="#必然与偶然">¶</a>必然与偶然</h3><ul><li><p>这个世界上任何一个事情的发生既是必然，也是偶然，即必然与偶然的辩证统一</p></li><li><p>关系：对立统一</p></li><li><p>区别：必然：内部原因、稳定、决定性，偶然：外部原因、不太稳定、影响</p></li><li><p>联系：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619144030.png" style="zoom:67%;" /></li></ul><h3 id="可能与现实"><a class="header-anchor" href="#可能与现实">¶</a>可能与现实</h3><ul><li><p>相互区别：略</p></li><li><p>相互联系：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619144505.png"/></li><li><p>判别：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619145202.png" style="zoom:80%;" /></li></ul><h3 id="⭐现象与本质"><a class="header-anchor" href="#⭐现象与本质">¶</a>⭐现象与本质</h3><ul><li><p>只要现象，都外露于外部；而本质隐藏于事物内部</p></li><li><p>相互区别：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619145723.png"/><blockquote><p>假象是客观存在的，错觉是错误的感觉。</p><p>错觉不一定是被假象迷惑导致的</p><p>真象与假象都是客观存在的，并没有正确还是错误的说法</p></blockquote></li><li><p>方法论：不能停留于现象，<strong>必须通过现象揭示本质</strong></p></li></ul><h3 id="内容与形式"><a class="header-anchor" href="#内容与形式">¶</a>内容与形式</h3><ul><li><p>关系：上面四对范畴都是对立统一，而这对是相互依赖、不可分割</p></li><li><p>任何 … 都有 … ； 没有无 … 的 …</p></li><li><p>内容决定形式，形式反作用于内容；当形式适合内容，对内容的发展有…积极推动作用 … ；…不适合 …消极</p><blockquote><p>生产力就是内容；生产关系就是形式</p></blockquote></li></ul><h2 id="三大规律"><a class="header-anchor" href="#三大规律">¶</a>三大规律</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619151908.png"/><h2 id="⭐⭐对立统一规律"><a class="header-anchor" href="#⭐⭐对立统一规律">¶</a>⭐⭐对立统一规律</h2><h3 id="唯物辩证法的实质与核心——对立统一规律"><a class="header-anchor" href="#唯物辩证法的实质与核心——对立统一规律">¶</a>唯物辩证法的实质与核心——对立统一规律</h3><ol><li>对立统一规律揭示了事务普遍联系的根本内容和永恒发展的内在动力，从根本上回答了事务为什么会发展的问题的问题</li><li>对立统一规律是贯穿其他规律和范畴的中心线索</li><li>对立统一规律提供矛盾分析法，它是对事物辩证认识的实质</li><li>是否承认对立统一学说是唯物辩证法和形而上学对立的本质</li></ol><h3 id="矛盾的同一性和斗争性的辩证关系原理"><a class="header-anchor" href="#矛盾的同一性和斗争性的辩证关系原理">¶</a>矛盾的同一性和斗争性的辩证关系原理</h3><p>矛盾就是对立统一，对立统一就是矛盾</p><blockquote><p>每时每刻，每对矛盾既同一又斗争</p></blockquote><p>哲学上的矛盾并非有褒贬之义</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619153944.png"/><blockquote><p>只要是矛盾，都可以转</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619154154.png"/><blockquote><p>资本主义 -&gt; 对抗性矛盾 -&gt; 灭亡</p></blockquote><p>同一性与斗争性的关系：对立统一</p><p>联系：没有…没有 … ；… 寓于 … （拾荒者例子）</p><p>区别：斗争性是无条件、绝对的；同一性是有条件、相对的</p><p><strong>方法论</strong>：“看问题要一分为二”、“求同存异”、“事物之间会相互转化”、“批判地继承”</p><h3 id="矛盾的同一性和斗争性在事物发展中的作用原理"><a class="header-anchor" href="#矛盾的同一性和斗争性在事物发展中的作用原理">¶</a>矛盾的同一性和斗争性在事物发展中的作用原理</h3><p>同一性：</p><ol><li>由于矛盾双方相互依存，互为存在的条件， 矛盾双方可以利用对方的发展使得自己得到发展（首富）</li><li>同一性使矛盾双方相互<strong>吸取</strong>有利于自身的因素，在相互作用中各自得到发展（成功的爱情）</li><li>由于矛盾双方彼此相通，矛盾双方可以向着彼此的对立面转化而得到发展，并规定着事物的发展方向。（你强我弱-&gt;我弱你强）</li></ol><p>矛盾性：</p><ol><li>矛盾双方的斗争促进矛盾双方力量的变化，竞长争高，此消彼长，造成事物的量变</li><li>矛盾双方的斗争，促使矛盾双方的地位和性质发生转化，实现事物的质变。</li></ol><p>方法论：</p><ul><li><p>事物的发展不仅表现在“相反相成”（斗争性多的时候），而且表现为“相辅相成”（同一性多的时候）；</p></li><li><p>学会从事物的对立面把握事物的统一，逆向思考。</p></li><li><p>和谐不是无差别的一致</p></li></ul><h3 id="矛盾的普遍性和特殊性的辩证关系原理"><a class="header-anchor" href="#矛盾的普遍性和特殊性的辩证关系原理">¶</a>矛盾的普遍性和特殊性的辩证关系原理</h3><p>普遍性概念：大概就是 矛盾无处不在，无时不有，旧的矛盾解决了，新的矛盾又产生</p><p>特殊性概念：在各个方法都有其特点，有三种情形：</p><ul><li><strong>不同</strong>事物的矛盾各有其特点</li><li>同一事物的矛盾在不同发展过程和发展<strong>阶段</strong>各有其不同的特点</li><li>构成事物的诸多矛盾以及每一矛盾的不同方面各有不同的性质、地位和作用</li></ul><p>关系：对立统一</p><p>区别：普遍性（共性）无条件的、绝对的，（特殊性）个性 … 、…</p><p>联系：任何现实存在的事物都是共性和个性的有机统一，没有 … 的 …</p><p>方法论：<strong>具体问题具体分析</strong>，对症下药</p><blockquote><p>美国：抽象人权；中：具体人权</p></blockquote><h3 id="矛盾的不平衡发展原理"><a class="header-anchor" href="#矛盾的不平衡发展原理">¶</a>矛盾的不平衡发展原理</h3><p>概念：</p><ul><li><p>主要矛盾是矛盾体系中处于支配地位，对事物发展起决定作用的矛盾。次要矛盾是处于服从地位的矛盾。</p></li><li><p>在每一对矛盾中又有矛盾的主要方面与矛盾的次要方面</p><blockquote><p>丈夫与夫妻是一对矛盾，有一个居于矛盾的主要方面，起着领导作用</p></blockquote></li></ul><p>原理：事务的性质主要由<strong>主要矛盾</strong>的<strong>主要方面</strong>决定的</p><p>方法论意义：“两点论”（即主次都不要放弃）与“重点论”（突出主要矛盾）相结合，抓关键，看主流</p><h3 id="矛盾分析法"><a class="header-anchor" href="#矛盾分析法">¶</a>矛盾分析法</h3><blockquote><p>即上述的方法论的总结</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619165824.png"/><h2 id="质量互变定律"><a class="header-anchor" href="#质量互变定律">¶</a>质量互变定律</h2><ul><li><p>质：认识“质”是认识和实践的起点和基础</p></li><li><p>量：认识事物的“量”是认识的深化和精确化，只有正确了解才能正确估计事物在实践中的<strong>地位和作用</strong></p></li><li><p>度：度的两端叫关节点或临界点</p></li><li><p>量变：事物数量的增减和次序的变动（别漏了），保持稳定性的<strong>不显著</strong>的变化</p></li><li><p>质变：事物性质的<strong>根本</strong>变化</p></li></ul><p>相互联系：</p><ol><li><p>量变是质变的<strong>必要</strong>准备</p><blockquote><p>激变论夸大了质变，否定了量变</p></blockquote></li><li><p>质变是量变的<strong>必然</strong>结果</p><blockquote><p>庸俗进化论，夸大了量变</p></blockquote></li><li><p>两者相互渗透</p><ul><li>总的量变中有阶段性和局部性的部分质变</li><li>质变中也有旧质在量上的收缩和新质在量上的扩张</li></ul></li></ol><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619172340.png" style="zoom:80%;" /><h2 id="否定之否定规律"><a class="header-anchor" href="#否定之否定规律">¶</a>否定之否定规律</h2><ul><li><p>肯定因素：维持现成事物存在的因素</p></li><li><p>否定因素：促使现成事物灭亡的因素</p></li><li><p>辩证否定观的基本内容：</p><ol><li><p>否定是事物的<strong>自我否定</strong>（<em>自己的基因决定了…</em>）</p><blockquote><p>认为外在力量对事物进行消灭 -&gt; 形而上学</p><p>不能将“偶然”当作必然</p></blockquote></li><li><p>否定是事物发展的环节</p></li><li><p>否定是新旧事物联系的环节</p></li><li><p>辩证否定的实质是“<strong>扬弃</strong>”（批判又继承）</p><blockquote><p>认为肯定一切，否定一切 -&gt; 形而上学</p></blockquote></li></ol><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619190335.png"/></li></ul><p>否定之否定规律：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619190741.png" style="zoom:80%;" /><p>方法论：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619191422.png" style="zoom:80%;" /><h2 id="客观辩证法与主观辩证法"><a class="header-anchor" href="#客观辩证法与主观辩证法">¶</a>客观辩证法与主观辩证法</h2><p>客观辩证法采取外部必然的形式，主观辩证法采取观念的、逻辑的形式</p><h1 id="Chap4-认识论"><a class="header-anchor" href="#Chap4-认识论">¶</a>Chap4. 认识论</h1><blockquote><p>唯物论、辩证法主要研究客观世界及其规律；认识论主要研究主观世界的问题</p></blockquote><h2 id="实践与认识"><a class="header-anchor" href="#实践与认识">¶</a>实践与认识</h2><p>错误的实践观：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619221159.png"/><p>正确的实践观：实践是感性的、对象性的物质活动</p><p>实践的本质含义：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210619221924.png"/><blockquote><p>实践必须是人</p></blockquote><p>实践的基本特征：</p><ul><li><p><strong>直接现实性</strong>（本质特性）</p><blockquote><p>实践具有将“脑中的”变成“现实的”功能</p></blockquote></li><li><p>自觉能动性（主体能动性）</p><blockquote><p>实践受意识指导，体现主体的目的性</p></blockquote></li><li><p>社会历史性</p><blockquote><p>不同历史阶段实践内涵不同</p></blockquote></li></ul><p>实践主体：具有一定的主体能力，从事现实社会实践活动的人。</p><p>实践主体的能力：自然能力和精神能力（知识性因素和非知识性因素）</p><p>实践中介：其中介系统分为两个：物质性工具系统、语言符号工具系统</p><p>主体与客体的关系：<strong>实践关系</strong>（最根本，最先）、认识关系、价值关系</p><p>实践的三种基本类型：<strong>物质生产实践</strong>（劳动，最基本）、社会政治实践（搞关系）、科学文化实践（探索）</p><blockquote><p>人的活动分为两种：本能活动、实践活动</p></blockquote><h2 id="⭐实践决定认识"><a class="header-anchor" href="#⭐实践决定认识">¶</a>⭐实践决定认识</h2><blockquote><p>实践高于认识，认识不能决定实践</p></blockquote><ol><li><p><strong>实践是认识的来源</strong>：①实践产生认识的需要；②实践还为认识的形成提供了可能</p><blockquote><p>认识不排除天赋（生理因素）的影响</p><p>认识也受间接经验影响</p></blockquote></li><li><p>实践是认识的动力</p><blockquote><p>注意，实践不是认识的先导</p></blockquote></li><li><p>实践是认识的目的（小马过河，实践需求）</p></li><li><p>实践是检验认识真理性的唯一标准</p></li></ol><h2 id="认识的本质、过程和规律"><a class="header-anchor" href="#认识的本质、过程和规律">¶</a>认识的本质、过程和规律</h2><p>认识的本质（概念）：主体在<strong>实践基础</strong>上对客体的<strong>能动反映</strong></p><p>认识的反映特性与创造特性<strong>不可分割</strong></p><h1 id="Chap-5-唯物史观"><a class="header-anchor" href="#Chap-5-唯物史观">¶</a>Chap 5. 唯物史观</h1><h2 id="社会存在和社会意识及其辩证关系"><a class="header-anchor" href="#社会存在和社会意识及其辩证关系">¶</a>社会存在和社会意识及其辩证关系</h2><blockquote><p>生产方式（往小地说，生产力）起着决定作用</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210620012302.png"/><blockquote><p>科技不是生产力的独立要素，但是在生产劳动中的（不是社会历史）决定性因素</p><p>生产关系，也是物质（不以人的意志为转移），但是人与人的关系</p><p>生产工具区分社会经济<strong>时代</strong>的客观依据；生产资料所有制判断社会经济结构<strong>性质</strong>的客观依据</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210620011446.png"/><p>社会存在决定社会意识：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210620011700.png"/><p>社会意识反作用于社会存在（相对独立性）</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210620011930.png"/><h2 id="生产力与生产关系的矛盾"><a class="header-anchor" href="#生产力与生产关系的矛盾">¶</a>生产力与生产关系的矛盾</h2><p>生产力：物质力量、人和自然的关系</p><p>生产力是内容，生产关系是形式–&gt;辩证法的内容与形式。</p><ul><li>生产力决定生产关系</li><li>生产关系反作用于生产力（双向）</li></ul><p>两者有机结合和统一，构成社会的生产方式</p><blockquote><p>社会生产第一规律：生产关系一定要适应生产力发展状况的规律</p></blockquote><h2 id="经济基础与上层建筑的矛盾"><a class="header-anchor" href="#经济基础与上层建筑的矛盾">¶</a>经济基础与上层建筑的矛盾</h2><p>经济基础是 … 生产关系的总和</p><p>上层建筑 … 意识形态以及制度、组织和设施：</p><ul><li>意识形态（观念上层建筑）：包括政治法律思想、道德、艺术、宗教、哲学等思想观点</li><li>政治法律制度以及设施和政治组织（政治上层建筑，局于主导，国家政权是核心）</li></ul><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210620013848.png" style="zoom:67%;" /><blockquote><p>属于上层建筑的社会意识，就是社会意识形态</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210620014255.png" style="zoom:67%;" /><blockquote><p>社会发展第二规律：上层建筑一定要适应经济基础发展状况的规律</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210620014605.png" style="zoom:67%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chap1-导论&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chap1-导论&quot;&gt;¶&lt;/a&gt;Chap1. 导论&lt;/h1&gt;
&lt;h2 id=&quot;马克思主义构成之间的联系&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#马克思主义构</summary>
      
    
    
    
    <category term="人文社科" scheme="https://www.joydee.top/categories/%E4%BA%BA%E6%96%87%E7%A4%BE%E7%A7%91/"/>
    
    <category term="思政" scheme="https://www.joydee.top/categories/%E4%BA%BA%E6%96%87%E7%A4%BE%E7%A7%91/%E6%80%9D%E6%94%BF/"/>
    
    
    <category term="马克思原理" scheme="https://www.joydee.top/tags/%E9%A9%AC%E5%85%8B%E6%80%9D%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>「数据库系统概论」问答题总结</title>
    <link href="https://www.joydee.top/posts/da2a8f19/"/>
    <id>https://www.joydee.top/posts/da2a8f19/</id>
    <published>2021-06-10T11:47:53.000Z</published>
    <updated>2021-09-07T07:17:26.211Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>试述<strong>数据、数据库、数据库系统、数据库管理系统</strong>的概念。</p><p>答： <strong>数据</strong>： 描述事物的符号记录称为数据。</p><blockquote><p>数据的种类有文字、<br>图形、图像、声音、正文等等。数据与其语义是不可分的。</p></blockquote><p><strong>数据库</strong>： 长期储存在计算机内、有组织的、可共享的大量数据集合。数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度、较高的数据独立性和易扩展性，并可为各种用户共享。</p><p><strong>数据库系统</strong>： 是由数据库、数据库管理系统及其应用开发工具 、应用程序、数据库管理员组成的存储、管理、处理和维护数据的系统。</p><p><strong>数据库管理系统</strong>：<br>是位于用户与操作系统之间的一层数据管理软件。用于科学地组织和存储数据、高效地获取和维护数据。</p><blockquote><p>DBMS 主要功能包括数据定义功能、数据操纵功能、<br>数据库的运行管理功能、数据库的建立和维护功能。</p><p>DBMS由两大部分组成：查询处理器和存储管理器</p></blockquote></li><li><p><strong>数据库管理系统的主要功能</strong>有哪些？</p><p>答：其主要功能为：（参照模拟卷）</p><p>①<strong>数据库定义功能</strong>：DBMS提供数据定义语言（DDL）定义数据库的三级结构及其相互间的映像、完整性、安全控制等约束。</p><p>②<strong>数据库的操纵功能</strong>：DBMS提供数据操纵语言（DML）实现对数据库中数据的操作。</p><p>③<strong>数据库的保护功能</strong>：DBMS对数据库的保护主要通过数据库的恢复、数据库的并发控制、数据库的完整性控制、数据库的安全性控制等四个方面实现。</p><p>④<strong>数据库的存储管理</strong>：DBMS的存储管理子系统提供了数据库中数据和应用程序的一个界面，其职责是把各种DML语句转换成底层的系统命令，起到数据的存储、检索和更新功能。</p><p>⑤<strong>数据库的维护功能</strong>：DBMS中实现数据库维护功能的实用程序主要有数据装载程序、备份程序、文件重组织程序、性能监控程序。</p><p>⑥（存疑）<strong>数据字典</strong>（DD）：数据库系统中存放三级结构定义的数据库称为数据字典，对数据库的操作都要通过访问DD才能实现。</p></li><li><p>什么是数据库系统的<strong>三级模式结构</strong>？这种体系结构的<strong>优点</strong>是什么？</p><p>答：通常 DBMS 把数据库从逻辑上分为三级，即外模式、模式和内模式，它们分别反映了看待数据库的三个角度。</p><p><strong>外模式</strong>（子模式或用户模式）：是数据库用户能够看见和使用的<strong>局部数据</strong>的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。</p><p><strong>模式</strong>（<br>Schema ）：是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。</p><p><strong>内模式</strong>（存储模式或内视图）：是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。</p></li><li><p>什么是数据库的<strong>完整性</strong>？</p><p>答：数据库的完整性是指数据的正确性和相容性。</p><p>数据的正确性指数据是符合现实世界语义、反映当前实际状况的；</p><p>数据的相容性是指数据库同一对象在不同关系表中的数据是符合逻辑的。</p></li><li><p>数据库的<strong>完整性与安全性的区别</strong></p><table><thead><tr><th></th><th>数据库的完整性</th><th>数据库的安全性</th></tr></thead><tbody><tr><td>目的</td><td>为防止数据库中存在不符合语义的数据，防止不正确的数据</td><td>保护数据库防止恶意破坏和非法存取</td></tr><tr><td>防范对象</td><td>不合语义的、不正确的数据，防止它们进入数据库</td><td>非法用户和非法操作，防止他们队数据库数据的非法选取</td></tr></tbody></table></li><li><p>什么是数据库的<strong>审计功能</strong>，<strong>为什么</strong>要提供审计功能？</p><p>答：审计功能是指DBMS的审计模块在用户对数据库执行操作的同时将所有操作自动记录到系统的审计日志中。</p><p>因为任何系统的安全保护措施都不是完美无缺的，蓄意盗窃破坏数据的人总可能存在。<br>利用数据库的审计功能， DBA 可根据审计跟踪的信息，重现导致数据库现有状况的一系列事件，找出非法存取数据的人、时间和内容<br>等。</p></li><li><p><strong>删除</strong>被参照关系的元组时，系统可能采取的作法有：①级联删除；②受限删除；③置空值删除</p><p>参照关系中<strong>插入</strong>元祖时，系统可能采取的作法有：①受限插入；②递归插入</p></li><li><p>数据库设计的基本步骤以及各步骤的主要工作是什么？</p><p>答：</p><ul><li><p><strong>需求分析</strong>：准确了解与分析用户需求（包括数据与处理）。</p></li><li><p><strong>概念结构设计</strong>：通过对用户需求进行综合、归纳与抽象，形成<br>一个独立于具体 DBMS 的概念模型。</p></li><li><p><strong>逻辑结构设计</strong>：将概念结构转换为某个 DBMS 所支持的数据<br>模型，并对其进行优化。</p></li><li><p><strong>数据库物理设计</strong>：为逻辑数据模型选取一个最适合应用环境的<br>物理结构（包括存储结构和存取方法）。</p></li><li><p><strong>数据库实施</strong>：设计人员运用 DBMS 提供的数据语言、工具及<br>宿主语言，根据逻辑设计和物理设计的结果建立数据库 ，编制与调试应用程序，组织数据入库，并进行试运行。</p></li><li><p><strong>数据库运行和维护</strong>：在数据库系统运行过程中对其进行评价、<br>调整与修改。</p></li></ul></li><li><p>简述<strong>事务的性质</strong>。</p><p>答：<strong>原子性</strong>：事务是数据库的逻辑工作单位，事务中包括的诸操作要么都做，要么都不做。</p><p><strong>一致性</strong>：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。</p><p><strong>隔离性</strong>：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对其他并发事务是隔离的，并发<br>执行的各个事务之间不能互相干扰。</p><p><strong>持续性</strong>（永久性）：指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其执行结果有任何影响。</p></li><li><p>在数据库的恢复技术中，为什么要遵循<strong>日志文件的先写原则</strong>。</p><p>答： 把对数据的修改写到数据库中和把表示这个修改的日志记录写到日志文件中是两个不同的操作。</p><p>有可能在这两个操作之间发生故障，即这两个写操作只完成了一个。<br>如果先写了数据库修改，而在运行记录中没有登记这个修改，则以后就无法恢复这个修改了。</p><p>如果先写日志，但没有修改数据库，<br>在恢复时只不过是多执行一次 UNDO 操作，并不会影响数据库<br>的正确性。</p><p>所以一定要先写日志文件，即首先把日志记录写到日志文件中，然后写数据库的修改。</p></li><li><p>什么样的并发调度才是<strong>正确的调度</strong>？</p><p>答：多个事务的并发执行是正确的，当且仅当其结果与 按某一次序串行地执行它们时的结果 相同，称这种调度策略为<strong>可串行化的调度</strong>。</p></li><li><p>并发操作会产生哪几类数据不一致？如何避免？</p><p>答：<strong>丢失修改</strong>：两个事务<br>T1 和 T2 读入同一数据并修改， T2 提交的结果破坏了（覆盖了） T1 提交的结果，导致 T1 的修改被丢失。</p><p><strong>不可重复读</strong>：指事务T1 读取数据后，事务 T2 执行更新操作，使 T1 无法再现前一次读取结果。</p><p><strong>读“脏”数据</strong>：指事务 T1 修改某一数据，并将其写回磁盘，<br>事务 T2 读取同一数据后， T1 由于某种原因被撤销，这时 T1 已修改过的数据恢复原值， T2 读到的数据就与数据库中的数据不一致，则 T2 读到的数据就为“脏”数据，即不正确的数据。</p><p>避免不一致性的方法和技术就是<strong>并发控制</strong>，其中最常用的是<strong>封锁技术</strong>。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;试述&lt;strong&gt;数据、数据库、数据库系统、数据库管理系统&lt;/strong&gt;的概念。&lt;/p&gt;
&lt;p&gt;答： &lt;strong&gt;数据&lt;/strong&gt;： 描述事物的符号记录称为数据。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数据的种类有文字、&lt;br&gt;
图形、</summary>
      
    
    
    
    <category term="DataBase" scheme="https://www.joydee.top/categories/DataBase/"/>
    
    <category term="MySQL" scheme="https://www.joydee.top/categories/DataBase/MySQL/"/>
    
    
    <category term="DataBase" scheme="https://www.joydee.top/tags/DataBase/"/>
    
    <category term="SQL" scheme="https://www.joydee.top/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>「JavaSE学习笔记10」Java 易错归纳</title>
    <link href="https://www.joydee.top/posts/83a0adbc/"/>
    <id>https://www.joydee.top/posts/83a0adbc/</id>
    <published>2021-06-06T05:04:00.000Z</published>
    <updated>2021-09-07T07:17:26.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-1-概述"><a class="header-anchor" href="#Chapter-1-概述">¶</a>Chapter 1 概述</h1><h2 id="Java跨平台"><a class="header-anchor" href="#Java跨平台">¶</a>Java跨平台</h2><p>Java 既具有解释型语言的特征，也具有编译型语言的特征。</p><blockquote><p>Java既不是编译型语言也不是解释型语言，还是静态语言。</p></blockquote><p>Java语言经过编译器编译后生成<strong>与平台无关</strong>的字节码文件（<code>*.class</code>，需要由Java解释器来解释执行）</p><blockquote><p>不同操作系统有不同的虚拟机，但提供一个相同的面向编译器的接口。</p><p>只要为不同平台实现了相应的虚拟机，编译之后的Java字节码就可以在该平台上运行</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621203334.png" style="zoom:67%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621203617.png" style="zoom:67%;" /><h2 id="编译与运行Java源文件"><a class="header-anchor" href="#编译与运行Java源文件">¶</a>编译与运行Java源文件</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621203804.png" style="zoom: 67%;" /><p>举例如下：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621204554.png" style="zoom:67%;" /><p><code>java</code>命令运行文件，紧跟于java文件中的类名，如<code>java HelloWorld</code>（注意，<code>java</code>命令针对于 <code>class</code> 文件，但是在输入命令时不加<code>.class</code>后缀）</p><h2 id="main方法"><a class="header-anchor" href="#main方法">¶</a>main方法</h2><p>签名：<code>public static void main(String[] arg)</code></p><p>其中，<code>public</code> 与 <code>static</code> 前后顺序可互换，但 <code>public</code> 可以省略不写，<code>static</code> 必须要使用</p><p>另外，返回值只能是 <code>void</code> ，否则该方法不是程序的入口方法</p><blockquote><p>若写成 <code>Main</code> 方法，Java解释器无法找到 <code>main</code> 方法</p></blockquote><h2 id="Java源文件"><a class="header-anchor" href="#Java源文件">¶</a>Java源文件</h2><ul><li><p>一个Java文件只能有一个 <code>public</code> 类，且文件名必须与 <code>public</code> 类名一致</p></li><li><p>注意，每个源文件最多只有一个包声明，必须位于 Java 源文件的第一行</p></li><li><p>Java程序中所有的关键字都是小写，无须任何大写字母</p></li></ul><h2 id="编程错误"><a class="header-anchor" href="#编程错误">¶</a>编程错误</h2><ul><li>语法错误</li><li>运行错误</li><li>逻辑错误</li></ul><h1 id="Chapter-2"><a class="header-anchor" href="#Chapter-2">¶</a>Chapter 2</h1><h2 id="Java标识符"><a class="header-anchor" href="#Java标识符">¶</a>Java标识符</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621220122.png" style="zoom:67%;" /><p>所有<strong>关键字</strong>都是由小写英文字母组成的</p><h2 id="基本数据类型"><a class="header-anchor" href="#基本数据类型">¶</a>基本数据类型</h2><ul><li><p><code>true</code> 和 <code>false</code> 只能小写</p></li><li><p>⭐<strong>表达式类型的自动提升</strong>：一个算术表达式包含多个基本类型的值时，整个算术表达式的数据类型都将发生自动提升，规则如下：</p><ul><li>所有 <code>byte</code>、<code>short</code>、<code>char</code> 类型自动提升到 <code>int</code></li><li>自动提升到表达式中最高等级操作同样的类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">byte</span> b = <span class="hljs-number">40</span>;<br><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">23</span>;<br><span class="hljs-keyword">double</span> d = <span class="hljs-number">3.5</span>;<br><span class="hljs-keyword">double</span> res = b + c + i * d;<br><span class="hljs-comment">//最高级操作数d是double，右边所有变量类型自动提升到double，结果自然是double</span><br><br><span class="hljs-keyword">short</span> s = <span class="hljs-number">5</span>;<br>s = s - <span class="hljs-number">2</span>; <span class="hljs-comment">//编译错误。右式自动提升到int，赋值时需强转</span><br></code></pre></td></tr></table></figure></li><li><p>一个值赋给范围更小类型的，必须强制转换（然而，会有进度降低或溢出）</p></li></ul><h2 id="Scanner"><a class="header-anchor" href="#Scanner">¶</a>Scanner</h2><p>从控制台中读取字符串：<code>next()</code> 读取以<strong>空白字符</strong>结束的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>String s = sc.next();<br></code></pre></td></tr></table></figure><h2 id="字符编码"><a class="header-anchor" href="#字符编码">¶</a>字符编码</h2><p>四种等价赋值方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;\u0061&#x27;</span>; <span class="hljs-comment">// &#x27;\uXXXX&#x27;中&#x27;XXXX&#x27;代表一个十六进制的整数</span><br><span class="hljs-keyword">char</span> c = <span class="hljs-number">0x0061</span>;<br><span class="hljs-keyword">char</span> c = <span class="hljs-number">97</span>;<br></code></pre></td></tr></table></figure><h2 id="字符型与数值型数据的转换"><a class="header-anchor" href="#字符型与数值型数据的转换">¶</a>字符型与数值型数据的转换</h2><p>当一个整数转换成 <code>char</code> 型数据时，只使用整数的低十六位，其他部分忽略，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c = (<span class="hljs-keyword">char</span>)<span class="hljs-number">0xAB0041</span>; <span class="hljs-comment">//取最后0x41，得到&#x27;A&#x27;</span><br></code></pre></td></tr></table></figure><p>若操作数是一个数字或字符，<code>char</code> 自动转换为数字，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;2&#x27;</span> + <span class="hljs-string">&#x27;3&#x27;</span>; <span class="hljs-comment">//&#x27;e&#x27;</span><br><span class="hljs-keyword">int</span> x = <span class="hljs-string">&#x27;2&#x27;</span> + <span class="hljs-string">&#x27;3&#x27;</span>; <span class="hljs-comment">//101</span><br><span class="hljs-keyword">int</span> y = <span class="hljs-number">2</span> + <span class="hljs-string">&#x27;a&#x27;</span>; <span class="hljs-comment">//99</span><br><br><span class="hljs-keyword">char</span> c = <span class="hljs-string">&quot;d&quot;</span>; <span class="hljs-comment">//显然是错误的!!!</span><br></code></pre></td></tr></table></figure><p>对于字符串：</p><ul><li><p>对于<code>+</code>运算符，若操作数之一不是字符串，则非字符串自动转换为字符串，注意下方坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;1+2=&quot;</span>+<span class="hljs-number">1</span>+<span class="hljs-number">2</span>); <span class="hljs-comment">//12</span><br>System.out.println(<span class="hljs-string">&quot;1+2=&quot;</span>+(<span class="hljs-number">1</span>+<span class="hljs-number">2</span>)); <span class="hljs-comment">//3</span><br><br>System.out.println(<span class="hljs-string">&quot;1&quot;</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">//11</span><br>System.out.println(<span class="hljs-string">&#x27;1&#x27;</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">//50，&#x27;1&#x27;自动转换为数字</span><br></code></pre></td></tr></table></figure><p>由此，数字转换成字符串的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String s = number + <span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>字符串转换成数字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">double</span> val = Double.parseDouble(<span class="hljs-string">&quot;23.3&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h1 id="Chapter-3-5-流程控制"><a class="header-anchor" href="#Chapter-3-5-流程控制">¶</a>Chapter 3+5 流程控制</h1><h2 id="switch-语句"><a class="header-anchor" href="#switch-语句">¶</a>switch 语句</h2><ul><li><p>对于 <code>switch(expr)</code> 语句，其 <code>expr</code> 表达式类型应与 <code>int</code> 类型兼容：<code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code> ，又或者是字符串，又或者是枚举类型</p><blockquote><p>注意，<code>long</code> 类型以及浮点类型，均不能够自动地转换为 <code>int</code> 类型</p></blockquote></li><li><p>对于 <code>case valueN</code> 子句中，<code>valueN</code> 必须是常量</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621180653.png" style="zoom:67%;" /></li></ul><h2 id="random-方法"><a class="header-anchor" href="#random-方法">¶</a>random 方法</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>M</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi mathvariant="normal">.</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>m</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mo>&lt;</mo><mn>1.0</mn></mrow><annotation encoding="application/x-tex">0 \le Math.random() &lt; 1.0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">an</span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mopen">(</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1.0</span></span></span></span> 故：</p><ul><li>返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[a, a+b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span>：<code>a + Math.random() * b</code></li><li>返回 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>10</mn><mo separator="true">,</mo><mn>20</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[10, 20)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">10</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">20</span><span class="mclose">)</span></span></span></span>：<code>(int)(10 + Math.random()*10)</code></li><li>随机返回 0 或 1：<code>(int)(Math.random()*10)%2</code></li></ul><h1 id="Chapter-6-方法"><a class="header-anchor" href="#Chapter-6-方法">¶</a>Chapter 6. 方法</h1><h2 id="方法签名"><a class="header-anchor" href="#方法签名">¶</a>方法签名</h2><p><strong>方法名+参数列表</strong></p><h2 id="方法的重载"><a class="header-anchor" href="#方法的重载">¶</a>方法的重载</h2><p>方法的重载与方法返回值类型、修饰符等没有任何关系。</p><p>因此，被重载的方法必须具有<strong>不同的参数列表</strong>，不能基于不同的修饰符或返回值类型（否则编译错误）</p><p>关于方法的匹配，你</p><h2 id="static修饰符"><a class="header-anchor" href="#static修饰符">¶</a>static修饰符</h2><p>静态方法不能够直接调用非静态成员变量和非静态方法，经典错误如下：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621162853.png" style="zoom:67%;" /><h2 id="方法体"><a class="header-anchor" href="#方法体">¶</a>方法体</h2><ul><li><p>对于有返回值的方法，<code>return</code> 语句必需的，尽管代码逻辑正确，但编译器并不认为是正确的（编译错误）</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621164102.png" style="zoom:67%;" /></li><li><p>对变量初始化时，注意下面的坑点：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621164447.png" style="zoom:67%;" /></li></ul><h2 id="方法调用"><a class="header-anchor" href="#方法调用">¶</a>方法调用</h2><p>一个方法结束运行会返回调用者，同时其活动记录中所有变量会从栈中移出（释放所有变量），定义在方法中的变量（包括引用类型）也结束其声明周期</p><h2 id="方法中参数传递"><a class="header-anchor" href="#方法中参数传递">¶</a>方法中参数传递</h2><ul><li>一个方法不能修改一个基本数据类型的参数</li><li>一个方法可改变一个对象参数的状态</li><li>一个方法不能够让对象参数引用一个新的对象</li></ul><h1 id="Chapter-7-一维数组"><a class="header-anchor" href="#Chapter-7-一维数组">¶</a>Chapter 7. 一维数组</h1><h2 id="数组的初始化"><a class="header-anchor" href="#数组的初始化">¶</a>数组的初始化</h2><blockquote><p>实际数组元素被存储在堆heap内存中，数组引用变量是引用类型变量，被存储在栈内存中</p></blockquote><ul><li><p>静态初始化：开发人员显式地指定每个数组元素的<strong>初始值</strong>，系统决定长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;; <span class="hljs-comment">//注意不要漏了中括号</span><br><span class="hljs-keyword">int</span> <br><span class="hljs-keyword">float</span>[] f = &#123;<span class="hljs-number">1.2f</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4f</span>, <span class="hljs-number">5</span>&#125;; <span class="hljs-comment">//注意坑点</span><br></code></pre></td></tr></table></figure></li><li><p>动态初始化：开发人员只指定数组长度，系统为数组分配初始值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] mylist; <span class="hljs-comment">//声明整形的数组</span><br>mylist = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>]; <span class="hljs-comment">//创建数组并将数组的引用赋值给mylist</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：不能同时使用静态初始化和动态初始化</p></blockquote></li></ul><h2 id="数组的长度"><a class="header-anchor" href="#数组的长度">¶</a>数组的长度</h2><p>注意普通数组的长度为：<code>arr.length</code>；而 <code>String</code> 的长度为：<code>arr.length()</code>，此外：<code>&quot;Hello&quot;.length()</code></p><h2 id="数组的复制"><a class="header-anchor" href="#数组的复制">¶</a>数组的复制</h2><ol><li><p>循环语句遍历赋值</p></li><li><p>使用 <code>System</code> 类中的静态方法 <code>arraycopy()</code>：内容相同，引用不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] list = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">int</span>[] list2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>];<br>System.arraycopy(list, <span class="hljs-number">2</span>, list2, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure></li><li><p><code>clone</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] list = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">int</span>[] list2 = list.clone();<br></code></pre></td></tr></table></figure></li></ol><h2 id="可变长参数列表"><a class="header-anchor" href="#可变长参数列表">¶</a>可变长参数列表</h2><p><code>...</code> 来表示数组可变参数，参数数目不确定但类型确定的情况。</p><p>如果方法中有多个类型参数，可变长参数必须是最后一个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wtf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> opt, <span class="hljs-keyword">int</span>...arr)</span></span>&#123;<br>    System.out.println(arr.length);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Arrays-工具类"><a class="header-anchor" href="#Arrays-工具类">¶</a>Arrays 工具类</h2><p>它包含了大量静态方法，常用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;;<br>Arrays.sort(arr);<br>System.out.println(Arrays.toString(arr));<br></code></pre></td></tr></table></figure><h2 id="命令行参数"><a class="header-anchor" href="#命令行参数">¶</a>命令行参数</h2><p>在命令行通过给 <code>main</code> 方法传递参数 <code>String[] args</code> ，其中参数均为字符串，但不一定需要用 <code>&quot;&quot;</code> 引起来</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621160931.png"/><p>默认情况下（命令行中不传递参数），<code>args</code> 参数长度为 0 的空数组（并非 <code>null</code>）</p><h1 id="Chapter9-对象和类"><a class="header-anchor" href="#Chapter9-对象和类">¶</a>Chapter9. 对象和类</h1><ul><li><p>对象通过引用变量访问，该变量包含对象的<strong>引用地址</strong></p><blockquote><p>也就说，对象引用变量实际上只包含了对象的引用地址，并不是存放了一个对象</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210606215554.png" style="zoom: 50%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210606215754.png" style="zoom:67%;" /><blockquote><p><code>System.arraycopy()</code> 方法是 <code>native</code> 方法，性能优于普通方法</p></blockquote></li><li><p>只有当类中<strong>无明确声明</strong>构造方法时，才会自动生成默认无参构造方法。</p><blockquote><p>也就说，类若提供了有参构造方法，但没有提供无参构造方法时，调用有参的构造方法合法，但调用无参的构造方法，会编译错误！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;233&quot;</span>);<br>    &#125;<br>    Test(<span class="hljs-keyword">int</span> i)&#123;<br>        System.out.println(i);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Test a = <span class="hljs-keyword">new</span> Test(); <span class="hljs-comment">//编译错误!因为无参构造方法没有自动生成</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>一个类里可包含多个初始化块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    &#123; <span class="hljs-comment">//第二个执行（每创建一个对象，就）</span><br>        System.out.println(<span class="hljs-string">&quot;init-block&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> &#123; <span class="hljs-comment">//第一个执行（每个类只执行一次）</span><br>        System.out.println(<span class="hljs-string">&quot;static&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">//第三个执行</span><br>        System.out.println(<span class="hljs-string">&quot;WTFFFF&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Test test = <span class="hljs-keyword">new</span> Test();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>关于日期类 <code>Calender</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">GregorianCalendar cal = <span class="hljs-keyword">new</span> GregorianCalendar();<br>System.out.println(<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss EEEE&quot;</span>).format(cal.getTime()));<br><span class="hljs-comment">//2021-06-06 10:17:45 星期日</span><br></code></pre></td></tr></table></figure><p>此处有个小坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Date d = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">12346788765</span>); <span class="hljs-comment">//编译错误，Integer number too large</span><br>Date d = <span class="hljs-keyword">new</span> <br></code></pre></td></tr></table></figure></li><li><p>关于 <code>Random</code> 类：</p><blockquote><p>java.utl 包含 <code>Date</code>、<code>Random</code>。而 java.lang 包含 <code>System</code>、<code>Math</code></p></blockquote><ul><li><p>有参构造方法的参数类型是 <code>long</code>，故：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Random g = <span class="hljs-keyword">new</span> Random(<span class="hljs-number">3.4</span>); <span class="hljs-comment">//编译错误</span><br></code></pre></td></tr></table></figure></li><li><p>返回的值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[0, x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></p></li><li><p>若两个<code>Random</code> 对象有相同的种子，那它们将产生相同的数列。</p><blockquote><p>因为其无参构造方法使用当前时间已经逝去的时间作为种子</p></blockquote></li></ul></li><li><p>Java 垃圾回收的工作原理：</p><ul><li><p>若一个对象被赋为<strong>空引用</strong>或没有使用，就成为 <code>garbage</code> 回收的候选者；如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;hello&quot;</span>);<br>String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;good&quot;</span>);<br>s1 = s2; <span class="hljs-comment">//此时字符串对象&quot;hello&quot;符合垃圾收集条件</span><br>String sb = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;WTF&quot;</span>);<br>sb = <span class="hljs-keyword">null</span>; <span class="hljs-comment">//此时&quot;WTF&quot;对象会因符合垃圾收集条件而被销毁</span><br></code></pre></td></tr></table></figure><blockquote><p>准确地来说，当没有任何活的线程<strong>能够访问</strong>一个对象时，该对象就<strong>符合垃圾收集条件</strong>。凭借此，程序员可以指定垃圾回收器回收对象。</p></blockquote></li><li><p>垃圾回收程序并<strong>不会马上</strong>回收该对象，而是在 JVM 探测出应用程序的内存不足的时候，或者是在 JVM 闲置时才进行回收；</p><blockquote><p>垃圾回收器<strong>不能保证有足够的的内存</strong>（无法保证 Java 程序从不产生内存溢出），它只能保证可用内存尽可能得到高效管理。</p></blockquote></li></ul><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210606221202.png" style="zoom: 67%;" /></li><li><p>你无法强迫垃圾回收器立即执行回收动作，但你可在 Java 程序<strong>请求</strong> （只是建议它）JVM 运行垃圾收集器，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Runtime rt = Runtime.getRuntime();<br>rt.gc(); <span class="hljs-comment">//请求垃圾收集</span><br></code></pre></td></tr></table></figure><p>另外，<code>finalize()</code> 方法（继承自 <code>Object</code>），能够在对象刚要被<strong>垃圾收集删除之前</strong>运行一些代码</p><blockquote><p>调用 <code>finalize()</code> 实际上能够导致对象免于被删除，比如说，在 <code>finalize()</code> 方法内可以编写代码把一个对象传递给另一个对象，<br>能够有效地阻止该对象符合垃圾收集条件。</p></blockquote><p>但是，任何情况下都<strong>无法强迫</strong>垃圾回收器立即执行回收操作，同样地，任何指定对象的 <code>finalize()</code> 方法<strong>可能运行</strong>，但是<strong>不能指望</strong>它。</p></li><li><p>Java 虚拟机内存模型：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210409001601.png" style="zoom:67%;" /><blockquote><p><strong>方法区和 Java 堆</strong> 是所有线程共享的数据区，其他均为线程私有的。</p></blockquote></li><li><p>Java 堆：几乎所有的<strong>对象和数组</strong>都是在堆中分配空间的。Java堆分为新生代和老年代连个部分，新生代用于存放刚刚产生的对象和年轻的对象，如果对象一直都没回收，生存得足够长，老年对象就会被移入到老年代。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210409001841386.png" alt="image-20210409001841386" style="zoom:67%;" /></li><li><p>静态方法不能够访问非静态数据域，非静态方法能够访问静态数据域</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210607211944.png" style="zoom: 67%;" /></li><li><p>当程序执行下面第三行代码时，由于第一次使用 <code>Student</code> 类，则系统会在第一次使用该类时加载这个类，并初始化这个类，完成初始化后，系统将在<strong>堆内存</strong>为 <code>Student</code> 类分配了一块内存区（其中也包含了类属性 <code>totalStudents</code>，并设置初值） 。接着创建一个 <code>Student</code> <strong>对象</strong>，并将其赋给了 <code>s</code> 变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student s = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;JoyDee&quot;</span>, <span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210606223538.png" style="zoom:80%;" /></li><li><p><code>public</code> 修饰符能够使被修饰的成员或顶级类，能够被所有类访问，不论是否处于<strong>同一包</strong>中。</p><p>而 <code>default</code> 通常被称为 <strong>包权限</strong>，即位于同一包中的类之间可互相访问其 <code>default</code> 成员和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fa</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fa</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(a);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WTF</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        Son s = <span class="hljs-keyword">new</span> Son();<br>        System.out.println(s.a);<br>        <span class="hljs-comment">//同一包下，WTF类能够访问Son从Fa继承下来的a变量</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210607213507.png" style="zoom:67%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210608213009.png" style="zoom: 67%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210608213213.png" style="zoom: 67%;" /></li><li><p><code>package</code> 语句作为 Java 源文件的<strong>第一条</strong>语句，指明该文件中定义的类所在的包。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JoyDee.weekFourTeen;<br><span class="hljs-comment">//该文件中所在的类位于 ./JoyDee/weekFourTeen 目录下</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>一个 Java 源文件只能包含一个 <code>package</code> 语句，但可包含多个 <code>import</code> 语句</p></blockquote></li><li><p>数据封装的好处——保持类的不变式，即构造方法和修改器都要求保证<strong>每个对象</strong>初始时一定要满足某个合法条件，而且是<strong>整个生命周期</strong>中都满足这个条件。如下对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSides</span><span class="hljs-params">(<span class="hljs-keyword">double</span> s1, <span class="hljs-keyword">double</span> s2, <span class="hljs-keyword">double</span> s3)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(s1 &lt; <span class="hljs-number">0</span> || s2 &lt; <span class="hljs-number">0</span> || s3 &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">if</span>((s1 + s2 &gt; s3) &amp;&amp; (s1 + s3 &gt; s2) &amp;&amp; (s2 + s3 &gt; s1))&#123;<br>        <span class="hljs-keyword">this</span>.side1 = s1;<br>        <span class="hljs-keyword">this</span>.side2 = s2;<br>        <span class="hljs-keyword">this</span>.side3 = s3;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>除此之外，其他好处见PPT（ch9 P141）</p></li><li><p>关于单例类，其特点在于：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210608214639.png" style="zoom: 67%;" /><p>暂时咕咕咕（P152）</p></li></ul><h1 id="Chapter-10-面向对象的思考"><a class="header-anchor" href="#Chapter-10-面向对象的思考">¶</a>Chapter 10. 面向对象的思考</h1><h2 id="类之间的关系"><a class="header-anchor" href="#类之间的关系">¶</a>类之间的关系</h2><ol><li><p><strong>依赖</strong>：A访问B的属性或方法，或者类A负责实例化类B</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615160502.png" style="zoom:67%;" /></li><li><p><strong>关联</strong>：A能够对B做什么</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615161544.png" style="zoom:67%;" /><p>牢记下面这张图：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615162452.png" style="zoom:67%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615162931.png" style="zoom:67%;" /><blockquote><p>关联关系和聚集关系统称为组合。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615164755.png" style="zoom:67%;" /></blockquote><ul><li><p><strong>聚集</strong>（has-a）：关联的特殊形式，一个对象可被多个其他聚集对象所拥有</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615163255.png" style="zoom:67%;" /></li><li><p><strong>组成</strong>（Composition）：聚合的加强形式，一个对象只归属于一个聚集对象。整体与部分的关系，部分不能离开整体而单独存在</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615163808.png" style="zoom:67%;" /></li></ul></li><li><p>泛化：一种继承关系。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615165631.png" style="zoom:67%;" /></li><li><p>实现：一种类与接口的关系</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615165822.png" style="zoom:67%;" /></li></ol><h2 id="包装类"><a class="header-anchor" href="#包装类">¶</a>包装类</h2><ul><li><p><code>char</code> 的包装类为 <code>Character</code>；<code>int</code> 的包装类为 <code>Integer</code></p></li><li><p>包装类没有无参数构造方法，所有的包装类的实例都是<strong>不可变</strong>的。</p><blockquote><p>注意，包装类一定有 <code>String</code> 的有参构造方法，另一有参构造方法的参数是它对应的基本数据类型，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Byte b = <span class="hljs-keyword">new</span> Byte((<span class="hljs-keyword">byte</span>) <span class="hljs-number">123</span>);<br>Byte c = <span class="hljs-keyword">new</span> Byte(<span class="hljs-number">123</span>); <span class="hljs-comment">//错误!!Byte没有Byte(int)的有参构造方法</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer x = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">23</span>); <span class="hljs-comment">//Integer(int value)</span><br>Integer y = <span class="hljs-keyword">new</span> Integer(<span class="hljs-string">&quot;23&quot;</span>)<span class="hljs-comment">//Integer(String s) </span><br>Integer z = Integer.valueOf(<span class="hljs-number">233</span>); <span class="hljs-comment">//static方法：valueOf(int x)</span><br>Integer q = Integer.valueOf(<span class="hljs-string">&quot;233&quot;</span>); <span class="hljs-comment">//static方法，传入String参数</span><br><br><span class="hljs-keyword">int</span> w = y.intValue(); <span class="hljs-comment">//Integer转换为int基本类型</span><br><span class="hljs-keyword">double</span> v = y.doubleValue(); <span class="hljs-comment">//Integer转换为double基本类型</span><br><span class="hljs-keyword">int</span> bit16 = Integer.parseInt(<span class="hljs-string">&quot;-FF&quot;</span>, <span class="hljs-number">16</span>); <span class="hljs-comment">//第二个参数是进制，returns -255</span><br></code></pre></td></tr></table></figure><p>坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer i = Integer.parseInt(<span class="hljs-string">&quot;23&quot;</span>, <span class="hljs-number">8</span>); <span class="hljs-comment">//正确，自动装箱</span><br>Double d = <span class="hljs-keyword">new</span> Double(); <span class="hljs-comment">//错误，没有无参构造方法</span><br><span class="hljs-keyword">double</span> j = (Double.valueOf(<span class="hljs-string">&quot;23.4&quot;</span>)).intValue(); <span class="hljs-comment">//正确，强制类型转换</span><br><span class="hljs-keyword">double</span> f = (Double.valueOf(<span class="hljs-string">&quot;23.4&quot;</span>)).toString(); <span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure></li><li><p>装箱一般发生在赋值和方法调用中</p><blockquote><p>编译器在生成类的字节码时，插入必要的方法调用，虚拟机只是执行这些字节码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer x = <span class="hljs-number">3</span> + <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">5</span>); <span class="hljs-comment">//正确</span><br>Integer y = <span class="hljs-number">3.0</span> <span class="hljs-comment">//错误，double不可能自动装箱为Integer，需要强制转换</span><br><br><span class="hljs-keyword">double</span> z = <span class="hljs-number">3.4</span>;<br>System.out.println(z.intValue()); <span class="hljs-comment">//错误，基本类型不可能调用包装类的方法</span><br><br>Integer x = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">2</span>);<br>Integer y = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">3</span>);<br>System.out.println(x * y); <span class="hljs-comment">//6</span><br>System.out.println(x.floatValue()); <span class="hljs-comment">//2.0</span><br></code></pre></td></tr></table></figure></li><li><p>包装类型的比较一定要使用 <code>equals</code> ，使用 <code>==</code> 比较两个包装对象，取决于是否值在 -128 到 127</p><blockquote><p>由源码的说明，如果 <code>int</code> 型参数 <code>i</code> 在 <code>IntegerCache.low</code> 和 <code>IntegerCache.high</code> 范围内，则直接由 <code>IntegerCache</code> 返回（即直接从缓存中取出）；否则 <code>new</code> 一个新的对象返回。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer a = <span class="hljs-number">9999</span>;<br>Integer b = <span class="hljs-number">9999</span>;<br>System.out.println(a.equals(b)); <span class="hljs-comment">//true</span><br>System.out.println(a == <span class="hljs-number">9999</span>); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="String"><a class="header-anchor" href="#String">¶</a>String</h2><ul><li><p>由于 <code>String</code> 是引用对象类型，故其对象存储的并非是字符串的值，而是它的对象引用</p></li><li><p>注意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String x = <span class="hljs-string">&quot;Java&quot;</span>;<br>x.concat(<span class="hljs-string">&quot;2333&quot;</span>);<span class="hljs-comment">//ignored</span><br>x = x.concat(<span class="hljs-string">&quot;Rules!&quot;</span>);<br>x.toLowerCase(); <span class="hljs-comment">//ignored</span><br>System.out.println(x); <span class="hljs-comment">//JavaRules!</span><br></code></pre></td></tr></table></figure></li><li><p>当编译器遇到 <code>String</code> 常量时，会先检查该池内是否已存在相同的，若有就将新的引用<strong>指向现有</strong>的 <code>String</code> ，它们会在内存中共享同一块地址。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210616195226.png" style="zoom:67%;" /></li><li><p>注意常量池坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String s = <span class="hljs-string">&quot;Java&quot;</span>;<br>String s1 = <span class="hljs-string">&quot;Java&quot;</span>;<br>String s2 = <span class="hljs-string">&quot;Ja&quot;</span> + <span class="hljs-string">&quot;va&quot;</span>;<br>System.out.println(s == s1); <span class="hljs-comment">//true</span><br>System.out.println(s == s2); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><blockquote><p><code>&quot;Ja&quot;</code> 和 <code>&quot;va&quot;</code> 都是字符串常量，当一个字符串由多个字符串常量连接而成时，它本身也是字符串常量</p></blockquote></li><li><p>检查一个字符串既不是 <code>null</code> ，也不是空串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(str.length() != <span class="hljs-number">0</span> &amp;&amp; str != <span class="hljs-keyword">null</span>)<br></code></pre></td></tr></table></figure></li><li><p>字符串转换为数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span>[] chars = <span class="hljs-string">&quot;Java&quot;</span>.toCharArray();<br></code></pre></td></tr></table></figure><p>数组转换为字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String str1 = <span class="hljs-keyword">new</span> String(<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[]&#123;<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>&#125;);<br>String str2 = String.valueOf(<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[]&#123;<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure></li><li><p><code>String</code> 类提供几个 <code>valueOf</code> 静态方法，可将 <code>char</code> 、<code>char[]</code> 、<code>double</code>、<code>long</code>、<code>int</code> 和 <code>float</code> 等数值转换为字符串</p></li><li><p>注意 <code>equals</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1 = <span class="hljs-string">&quot;Hello&quot;</span>;<br>String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;Hello&quot;</span>);<br><span class="hljs-keyword">boolean</span> ans = s1.equals(s2); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li><li><p><code>StringBuilder</code> 或 <code>StringBuffer</code> 都能存储指定容量的字符串（若超出，则自动扩大）</p><blockquote><p>单任务访问：<code>StringBuilder</code>，多任务并发访问：<code>StringBuffer</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">StringBuilder s0 = <span class="hljs-string">&quot;0123&quot;</span>; <span class="hljs-comment">//错误！！！！</span><br>System.out.println(s1.substring(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">//区间为[0,2)</span><br>StringBuilder s1  = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">&quot;0123456789&quot;</span>);<br>s1.insert(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;zzzz&quot;</span>); <span class="hljs-comment">//第一个参数为偏移长度，故012zzzz3456789</span><br>s1.delete(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//区间为[0,2)</span><br></code></pre></td></tr></table></figure><blockquote><p><code>trimTosize()</code> 能够将 <code>StringBuilder</code> 对象的容量降到实际大小</p></blockquote></li><li><p>关于<code>subString()</code>：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210621214429.png" style="zoom:80%;" /></li><li><p>关于 <code>compareTo()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1 = <span class="hljs-string">&quot;Wec&quot;</span>;<br>String s2 = <span class="hljs-string">&quot;Pro&quot;</span>;<br>System.out.println(s1.compareTo(s2)); <span class="hljs-comment">//7</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="Chapter-11-继承和多态"><a class="header-anchor" href="#Chapter-11-继承和多态">¶</a>Chapter 11. 继承和多态</h1><p>OOP语言的三个典型特征：封装、继承、<strong>多态</strong></p><h2 id="super-调用父类的构造方法"><a class="header-anchor" href="#super-调用父类的构造方法">¶</a>super 调用父类的构造方法</h2><ul><li><p>注意：<strong>父类的构造方法不能够被子类继承</strong>，若要调用父类构造方法，必须使用关键字 <code>super</code> ，且必须放在构造方法的<strong>第一行</strong>。</p></li><li><p>若子类没有显式地使用 <code>super</code> ，则父类<strong>无参</strong>构造方法将被自动地执行。</p><blockquote><p>Java程序在创建某个类的对象时，会隐式地创建该类的<strong>父类</strong>对象，只要有一个子类对象存在，则一定存在一个与之对应的父类对象。</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210609165606.png" style="zoom:80%;" /></li></ul><h2 id="构造方法链"><a class="header-anchor" href="#构造方法链">¶</a>构造方法链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Son s = <span class="hljs-keyword">new</span> Son();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pa</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Pa</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am a grandpa&quot;</span>); <span class="hljs-comment">//先执行</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fa</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pa</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Fa</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am a father&quot;</span>); <span class="hljs-comment">//再执行</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fa</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Son</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am a son&quot;</span>); <span class="hljs-comment">//最后执行</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fa</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Fa</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am a father&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fa</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Son</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;I am a son&quot;</span>);<br>    &#125; <span class="hljs-comment">//此时编译错误，由于子类构造方法隐式调用了父类的无参构造方法，而Fa不存在无参构造方法（声明了有参构造方法就不会自动生成了），</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>若一个类要拓展，应提供一个无参构造方法以避免编程错误。</p></blockquote><h2 id="重写父类的方法"><a class="header-anchor" href="#重写父类的方法">¶</a>重写父类的方法</h2><blockquote><p>注意，重写都是针对<strong>实例方法</strong>，不能是类方法。因此若父类和子类都定义相同的静态方法，父类方法将会被隐藏</p></blockquote><p>“两同两小一大”规则：</p><ul><li>两同：方法名相同，形参列表相同</li><li>两小——返回值更加地具体：子类方法返回值类型 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span> 父类；子类方法声明抛出的异常类型 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span> 父类</li><li>一大——访问权限：子类方法的访问权限 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊇</mo></mrow><annotation encoding="application/x-tex">\supseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊇</span></span></span></span> 父类</li></ul><p>注意要点：</p><ul><li>子类对象无法访问父类被重写的方法，但可在子类方法体中调用</li><li>当父类方法具有 <code>private</code> 访问权限，则该方法对其子类是隐藏的，既不能访问，更不能重写</li><li>父类的构造方法不允许调用可被子类覆盖的方法，否则有可能抛出空指针异常</li></ul><h2 id="多态及动态绑定"><a class="header-anchor" href="#多态及动态绑定">¶</a>多态及动态绑定</h2><p><strong>多态</strong>：若编译时类型和运行时类型不一致，则出现所谓的多态。</p><blockquote><p>多态是指当系统A访问B的服务时，系统B可通过多种实现方式来提供服务，而这一切对系统A是透明的。</p></blockquote><p>其存在的条件如下：</p><ul><li><p>存在于继承中</p></li><li><p>必须有方法的覆盖</p><blockquote><p>对象的<strong>属性不具有多态性</strong>，因此访问数据域或静态方法时，引用变量所声明的类型在编译时就已经决定了使用哪个数据域或静态方法了。</p></blockquote></li></ul><p><strong>动态绑定</strong>的例子：若 <code>GraduateStudent</code> 中没有定义 <code>toString</code> 方法，JVM会向上搜索，找到父类 <code>Student</code>，结果发现了 <code>toString</code> 方法，就会调用该方法。</p><p>牢记下面的程序运行结果！</p><blockquote><p>引用变量在<strong>编译</strong>阶段只能调用其<strong>编译</strong>时类型所具有的方法，但<strong>运行</strong>时则执行它所<strong>运行</strong>时的类型所具有的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Son son = <span class="hljs-keyword">new</span> Son();<br>        System.out.println(<span class="hljs-string">&quot;年龄为&quot;</span> + son.age); <span class="hljs-comment">//20</span><br>        son.baseMethod();  <span class="hljs-comment">//执行从父类继承的run方法</span><br>        son.run(); <span class="hljs-comment">//执行当前类的run方法</span><br>        son.sonMethod(); <span class="hljs-comment">//执行当前类的sonMethod方法</span><br>        <br>        Fa tmp = <span class="hljs-keyword">new</span> Son(); <span class="hljs-comment">//发生多态，编译类型为Son，运行类型为Son</span><br>        System.out.println(<span class="hljs-string">&quot;年龄为&quot;</span> + tmp.age); <span class="hljs-comment">//50，小心坑点！！因为多态只发生在方法上!</span><br>        tmp.baseMethod(); <span class="hljs-comment">//父类的普通方法</span><br>        tmp.run(); <span class="hljs-comment">//注意！！！子类将父类的run方法覆盖了</span><br>        <span class="hljs-comment">//tmp.sonMethod(); 无法调用，必须通过强制类型转换成运行时类型，如下所示</span><br>        ((Son) tmp).sonMethod(); <span class="hljs-comment">//向下转型</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fa</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">50</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">baseMethod</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类的普通方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;父类的run方法&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fa</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">20</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;子类将父类的run方法覆盖了&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sonMethod</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;子类才拥有的方法！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用类型的强制转换"><a class="header-anchor" href="#引用类型的强制转换">¶</a>引用类型的强制转换</h2><ul><li><p><strong>父类-&gt;子类</strong>：引用类型间的转换中，父类 -&gt; 子类，且需要<strong>强制</strong>类型转换。其<strong>前提</strong>是，该引用类型实际必须是子类的实例才可以（也就说，编译类型为父类，运行类型为子类），否则会发生<code>ClassCastException</code>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Fa peo = <span class="hljs-keyword">new</span> Nephew();<br><span class="hljs-comment">//Son son = (Son)peo; 抛出异常</span><br>Nephew nephew = (Nephew)peo;<br></code></pre></td></tr></table></figure></li><li><p><strong>子类-&gt;父类</strong>：当将一个子类对象赋给父类引用变量时，被称为向上转型，自动地完成</p></li></ul><p>注意以下坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">((Fa)<span class="hljs-keyword">new</span> Son()).run(); <span class="hljs-comment">//子类将父类的run方法覆盖了，执行运行类型的方法</span><br></code></pre></td></tr></table></figure><h2 id="instanceof-运算符"><a class="header-anchor" href="#instanceof-运算符">¶</a>instanceof 运算符</h2><ul><li><p>格式：<code>引用类型的变量 instanceof 类名</code></p></li><li><p>在进行强制类型转换之前，可通过 <code>instanceof</code> 运算符判断源对象是否为目标的实例，从而避免出现上述异常</p></li><li><p>它用于判断该对象实际运行的类型（父类或祖先类，也满足条件），而不是看编译时的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Animal animal = <span class="hljs-keyword">new</span> Animal();<br>Cat c = <span class="hljs-keyword">new</span> Cat();<br>System.out.println(animal <span class="hljs-keyword">instanceof</span> Animal); <span class="hljs-comment">//true</span><br>System.out.println(animal <span class="hljs-keyword">instanceof</span> Dog); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="final修饰符"><a class="header-anchor" href="#final修饰符">¶</a>final修饰符</h2><p>（一）<strong>修饰两类变量</strong>：两类被 <code>final</code> 修饰的变量，必须<strong>被初始化</strong>，遵循着不可多次赋值或修改的原则</p><blockquote><p>注意，静态的 <code>final</code> 即 <code>static final</code>，（因为 <code>final</code> 必须要有初始化），要么在定义时初始化，要么就在静态初始化块赋值(因为 <code>static</code>)，此时就不能够在构造方法中赋值了!</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ben</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> x; <span class="hljs-comment">//基本类型常量，除非是通过构造方法(且只能赋值一次)，其他方法不能修改</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Ben</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//合法</span><br>        x = <span class="hljs-number">1</span>; <span class="hljs-comment">//编译出错！final修饰的常量只能被赋值一次!</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Ben</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.x = x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> idx = <span class="hljs-number">233</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">final</span> Test cur = <span class="hljs-keyword">new</span> Test(); <span class="hljs-comment">//引用类型的常量</span><br>        cur.idx = <span class="hljs-number">666</span>; <span class="hljs-comment">//合法，允许修改引用变量所引用的Test对象的idx属性</span><br>        cur = <span class="hljs-keyword">new</span> Test(); <span class="hljs-comment">//编译出错，不能改变引用变量cur引用的对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（二）<strong>修饰方法</strong>：对父类的某个方法声明为 <code>final</code> 类型时，子类不能够覆盖该方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Object</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Class <span class="hljs-title">getClass</span><span class="hljs-params">()</span></span>&#123;...&#125;<br>    <span class="hljs-comment">//....</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（三）<strong>修饰类</strong>：用<code>final</code> 修饰的类，不能够有子类，即不能被继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Math</span></span>&#123;...&#125;<br></code></pre></td></tr></table></figure><h2 id="ArrayList"><a class="header-anchor" href="#ArrayList">¶</a>ArrayList</h2><p>若将子类放入到定义为父类泛型的 <code>ArrayList</code> 中，将会丢失子类本身的数据类型。若要调用子类的方法，需要进行强制类型转换。</p><p>数组与 <code>ArrayList</code> 的异同：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210609200133.png" style="zoom:80%;" /><h1 id="Chapter-12-异常"><a class="header-anchor" href="#Chapter-12-异常">¶</a>Chapter 12. 异常</h1><h2 id="异常分类图"><a class="header-anchor" href="#异常分类图">¶</a>异常分类图</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615142708.png" style="zoom:80%;" /><ul><li><p><code>Error</code> 类以及子类表示程序本身无法修复，编译器不会检查他们，其错误一般由Java虚拟机抛出，此时程序就会被终止。</p><blockquote><p>一般不会通过继承 <code>Error</code> 类来创建用户自定义的错误类</p></blockquote></li><li><p><code>RuntimeException</code> <strong>运行时异常（免检异常）</strong>：当出现这类异常，<strong>即便没有捕获或者抛出，也会编译通过</strong>。一旦出错，则建议终止程序，如：</p><blockquote><p>通常是执行了错误操作，需要改进程序设计</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>System.out.println(arr[<span class="hljs-number">4</span>]);<br><span class="hljs-comment">//Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException ...</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615145822.png" style="zoom:67%;" /></li><li><p>其他 <code>Exception</code> 类以及子类均属于<strong>编译时异常（受检异常）</strong>，即Java编译器会检查它，当程序中可能出现这类异常时，要么用 <code>try-catch</code> 语句捕获，要么用 <code>throws</code> 子句声明抛出，否则编译不会通过</p><blockquote><p>通常是能够被修复的，不会导致整个程序的终止</p></blockquote></li></ul><h2 id="异常跟踪栈"><a class="header-anchor" href="#异常跟踪栈">¶</a>异常跟踪栈</h2><p>异常跟踪栈与“方法调用栈”方向相反，异常先从<strong>发生异常的方法</strong>逐渐向外传播，首先传给该方法的调用者，然后再向上传…直至最后传给 <code>main</code> 方法。</p><blockquote><p>若 <code>main</code> 依然没有处理异常，则JVM会中止该程序，并打印异常的跟踪栈。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SelfException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SelfException</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SelfException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SelfException</span>&#123;<br>        firstMethod();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">firstMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SelfException</span>&#123;<br>        secondMethod();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">secondMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SelfException</span>&#123;<br>        thirdMethod();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">thirdMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SelfException</span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SelfException(<span class="hljs-string">&quot;我是异常，来自thirdMethod&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果显示如下：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615114405.png" style="zoom: 80%;" /><h2 id="异常处理方式"><a class="header-anchor" href="#异常处理方式">¶</a>异常处理方式</h2><p>①声明一个异常；②抛出一个异常；③捕获一个异常</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615144548.png" style="zoom: 67%;" /><ul><li><p><code>throws</code> 声明<strong>可能</strong>会出现的异常，若 <code>main</code> 方法不知道如何处理，则可以使用 <code>throws</code> 声明抛出给 JVM 进行处理——打印异常跟踪栈，终止程序运行。</p></li><li><p>若 <code>try</code> 块被执行一次，则 <code>try</code> 块后只有一个 <code>catch</code> 块会被执行（除非使用循环）</p></li><li><p>若存在 <code>try</code> 块时，<strong>总会</strong>执行 <code>finally</code> 块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IOException();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;1111&quot;</span>); <br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;2222&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;3333&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出：</span><br><span class="hljs-comment">//1111</span><br><span class="hljs-comment">//2222</span><br><span class="hljs-comment">//3333</span><br></code></pre></td></tr></table></figure></li><li><p><strong>注意</strong>：<code>finally</code> 语句不被执行的唯一情况是先执行了用于终止程序（终止当前Java虚拟机进程）的 <code>System.exit()</code> 方法。</p><p>即便在 <code>try</code> 或 <code>catch</code> 代码块中的 <code>return</code> 语句时，只要有 <code>finally</code> 代码块，都会执行。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615151514.png" style="zoom: 67%;" /><p>再注意，<code>finally</code> 代码块不能通过重新给变量赋值的方式来改变 <code>return </code> 语句的<strong>返回值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> x = <span class="hljs-number">2</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(woc()); <span class="hljs-comment">//i = 1</span><br>        System.out.println(x); <span class="hljs-comment">//x = 3</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">woc</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IOException();<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            ++i;<br>            x++;<br>            System.out.println(<span class="hljs-string">&quot;In the final block: &quot;</span> + i); <span class="hljs-comment">//i = 2</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210615152507.png"/></li></ul><h1 id="Chapter-13-抽象类和接口"><a class="header-anchor" href="#Chapter-13-抽象类和接口">¶</a>Chapter 13. 抽象类和接口</h1><h2 id="抽象类定义"><a class="header-anchor" href="#抽象类定义">¶</a>抽象类定义</h2><p>有抽象方法的类<strong>只能</strong>定义为抽象类，抽象类可以没有抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> 返回类型 方法名 (参数列表);<span class="hljs-comment">//抽象方法不能有方法体</span><br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>抽象类可以包含<strong>属性</strong>、方法（普通方法和抽象方法均可）、<strong>构造方法</strong>（只能是普通方法，不能被 <code>abstract</code> 修饰）。</p><blockquote><p>抽象类的构造方法不能用于创建实例，主要用于被子类调用</p></blockquote><p>以下三种情况，<strong>只能定义</strong>为抽象类：</p><ul><li>类中定义了一个抽象方法</li><li>继承了抽象父类，但没实现父类包含的<strong>所有</strong>抽象方法</li><li>实现了接口，但没实现接口包含的<strong>所有</strong>抽象方法</li></ul><h2 id="abstract关键字"><a class="header-anchor" href="#abstract关键字">¶</a>abstract关键字</h2><p><code>abstract</code> 不能用于修饰<strong>构造</strong>方法。</p><p>此外：</p><ul><li>对于类或者方法的修饰， <code>final</code> 与 <code>abstract</code> 不能够同时使用</li><li>对于方法， <code>static</code> 与 <code>abstract</code> 不能够同时使用</li><li>对于方法，<code>private</code> 与 <code>abstract</code> 不能够同时使用</li></ul><h2 id="接口定义"><a class="header-anchor" href="#接口定义">¶</a>接口定义</h2><p>相比于抽象类，接口更加特殊，不能够包含普通方法，其<strong>所有方法</strong>都是抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] <span class="hljs-class"><span class="hljs-keyword">interface</span> 接口名 </span>&#123;<br>    <span class="hljs-number">0</span>到n个常量定义...<br>    <span class="hljs-number">0</span>到多个抽象方法定义...<br>    <span class="hljs-number">0</span>到多个内部类、接口、枚举定义...<br>    <span class="hljs-number">0</span>到多个私有方法、默认方法（实例方法）或类方法定义....(JDK <span class="hljs-number">1.8</span> 之后)<br>&#125;<br></code></pre></td></tr></table></figure><p>接口的声明的<strong>属性</strong>默认（不论是否显式声明）为 <code>public static final</code> ，同时，接口中定义的方法默认 <code>public abstract</code> （即抽象方法），举例如下：</p><blockquote><p>接口中<strong>无构造方法和初始化</strong>，故接口里定义的属性只能在定义时指定默认值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id = <span class="hljs-number">1</span>; <span class="hljs-comment">//相当于 public static final int id = 1</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">start</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//相当于 public abstract void start()</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//相当于 public abstract void run()</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//相当于 public abstract void stop()</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里有小坑点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//根据”两小一大“，方法m的访问权限(大)必须是public</span><br>        System.out.println(<span class="hljs-string">&quot;2333&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外，一个类不能继承多个类，但一个接口可能继承多个接口。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210609211728.png" style="zoom:67%;" /><h2 id="Comparable接口"><a class="header-anchor" href="#Comparable接口">¶</a>Comparable接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(T o)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现 <code>Comparable</code> 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 <span class="hljs-title">implement</span> <span class="hljs-title">Comparable</span>&lt;类名&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">CompareTo</span><span class="hljs-params">(T other)</span></span>&#123;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Cloneable-接口"><a class="header-anchor" href="#Cloneable-接口">¶</a>Cloneable 接口</h2><p><code>Cloneable</code> 接口是空的，称为标记接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Cloneable</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>类只有当<strong>实现了 <code>Cloneable</code> 接口</strong>（即标记为可复制的），其对象内部才能够<strong>使用 <code>Object</code> 类</strong>中定义的 <code>clone</code> 方法实现克隆功能。</p><blockquote><p>若没有实现该接口，就调用 <code>Object</code> 的 <code>clone()</code> 会抛出异常</p></blockquote><p>该方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">native</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException</span>;<br></code></pre></td></tr></table></figure><blockquote><p>由于是 <code>protected</code> ，只能在实现该接口的对象的方法内部调用，并且需要对该方法进行覆盖。如下调用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> idx = <span class="hljs-number">233</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Fa c = <span class="hljs-keyword">new</span> Fa();<br>        System.out.println(c.hashCode()); <span class="hljs-comment">//989110044</span><br>        System.out.println(c.date.hashCode()); <span class="hljs-comment">//-194351978</span><br>        Fa a = (Fa)c.clone();<br>        System.out.println(a.hashCode()); <span class="hljs-comment">//424058530</span><br>        System.out.println(a.date.hashCode()); <span class="hljs-comment">//-194351978</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fa</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age = <span class="hljs-number">50</span>;<br>    <span class="hljs-keyword">public</span> Date date = <span class="hljs-keyword">new</span> Date();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();<br>        &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这个过程中的浅拷贝与深拷贝</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210610134314.png" style="zoom:67%;" /><h2 id="接口与抽象类的相同点"><a class="header-anchor" href="#接口与抽象类的相同点">¶</a>接口与抽象类的相同点</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210610134451.png" style="zoom: 50%;" /><h2 id="接口与抽象类的不同点"><a class="header-anchor" href="#接口与抽象类的不同点">¶</a>接口与抽象类的不同点</h2><table><thead><tr><th></th><th>接口</th><th>抽象类</th></tr></thead><tbody><tr><td>成员数据</td><td>必须常量</td><td>既可常量，也可变量</td></tr><tr><td>成员方法</td><td>不能有方法体的普通方法</td><td>完全可以包含普通方法</td></tr><tr><td>构造方法</td><td>不能够包含</td><td>可以包含，但不能被 <code>abstract</code> 修饰，且不能用来创建实例</td></tr><tr><td>共同的根</td><td>无</td><td><code>Object</code></td></tr><tr><td>初始化块</td><td>不能</td><td>可以</td></tr><tr><td>实现与继承</td><td>一个类可直接实现多个接口，一个接口可继承多个接口</td><td>一个类最多只有一个直接父类</td></tr></tbody></table><h2 id="李氏替换原则"><a class="header-anchor" href="#李氏替换原则">¶</a>李氏替换原则</h2><p>主要用于判断两个类之间是否符合继承关系。父类出现的地方，子类可以将其替换，且程序的行为不会发生改变。</p><p>可以理解为，若一个类继承了另一个类，两者的行为应该是一致的。子类不能添加任何父类没有的<strong>附加约束</strong>（比如正方形在设置长度或宽度时要受到长宽相等的约束）。</p><p>若违背该原则，应该将两个类共有属性及方法提炼出来作为抽象父类，各自继承父类并重写属于自己的方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chapter-1-概述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chapter-1-概述&quot;&gt;¶&lt;/a&gt;Chapter 1 概述&lt;/h1&gt;
&lt;h2 id=&quot;Java跨平台&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#</summary>
      
    
    
    
    <category term="Java后端" scheme="https://www.joydee.top/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    <category term="JavaSE" scheme="https://www.joydee.top/categories/Java%E5%90%8E%E7%AB%AF/JavaSE/"/>
    
    
    <category term="JavaSE" scheme="https://www.joydee.top/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>数电简要总结</title>
    <link href="https://www.joydee.top/posts/c6047a43/"/>
    <id>https://www.joydee.top/posts/c6047a43/</id>
    <published>2021-05-26T14:00:00.000Z</published>
    <updated>2021-09-07T07:17:26.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chap-1-数制和码制"><a class="header-anchor" href="#Chap-1-数制和码制">¶</a>Chap 1. 数制和码制</h2><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210526221408.png" style="zoom: 67%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210526223541.png" style="zoom: 67%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527000847.png" style="zoom: 50%;" /><blockquote><p>ASCII是一组七位二进制代码，共127个</p></blockquote><h2 id="Chap-2-逻辑代数"><a class="header-anchor" href="#Chap-2-逻辑代数">¶</a>Chap 2. 逻辑代数</h2><h3 id="常用公式"><a class="header-anchor" href="#常用公式">¶</a>常用公式</h3><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>+</mo><mi>B</mi><mo>=</mo><mi>A</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">A+B=A+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>  或者 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>B</mi><mo>=</mo><mi>A</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">AB=AC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>，均不能推出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo>=</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">B=C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>+</mo><mi>B</mi><mi>C</mi><mo>=</mo><mo stretchy="false">(</mo><mi>A</mi><mo>+</mo><mi>B</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>A</mi><mo>+</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A+BC=(A+B)(A+C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span></p><blockquote><p>证明：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>右式</mtext><mo>=</mo><mi>A</mi><mi>A</mi><mo>+</mo><mi>A</mi><mi>C</mi><mo>+</mo><mi>A</mi><mi>B</mi><mo>+</mo><mi>B</mi><mi>C</mi><mo>=</mo><mi>A</mi><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>C</mi><mo>+</mo><mi>B</mi><mo stretchy="false">)</mo><mo>+</mo><mi>B</mi><mi>C</mi><mo>=</mo><mi>A</mi><mo>+</mo><mi>B</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">右式=AA+AC+AB+BC=A(1+C+B)+BC=A+BC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">右式</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">AA</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span></span></span></span></p></blockquote></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo stretchy="false">(</mo><mi>A</mi><mo>+</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mo>+</mo><mi>A</mi><mi>B</mi><mo>=</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">A(A+B)=A+AB=A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>+</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mi>B</mi><mo>=</mo><mi>A</mi><mo>+</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A+\overline{A}B=A+B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></p><blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527093141.png" style="zoom:50%;" /></blockquote></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>B</mi><mo>+</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mi>C</mi><mo>+</mo><mi>B</mi><mi>C</mi><mi>D</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>=</mo><mi>A</mi><mi>B</mi><mo>+</mo><mover accent="true"><mi>A</mi><mo stretchy="true">‾</mo></mover><mi>C</mi></mrow><annotation encoding="application/x-tex">AB+\overline{A}C+BCD...=AB+\overline{A}C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">...</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><blockquote><p>应用：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi><mo>=</mo><mi>A</mi><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mi>B</mi><mtext>（与</mtext><mo>−</mo><mtext>或式）</mtext><mo>=</mo><mi>A</mi><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mi>B</mi><mo>+</mo><mi>A</mi><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mi>B</mi><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover><mo>=</mo><mo stretchy="false">(</mo><mi>A</mi><mo>+</mo><mi>B</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mover accent="true"><mi>B</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mover accent="true"><mi>C</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mtext>或</mtext><mo>−</mo><mtext>与式</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Y=A\overline{B}+\overline{C}B（与-或式）=A\overline{B}+\overline{C}B+A\overline{C}+B\overline{B}=(A+B)(\overline{B}+\overline{C})(或-与式)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord cjk_fallback">（与</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">或式）</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9666600000000001em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">A</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.13333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord cjk_fallback">或</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">与式</span><span class="mclose">)</span></span></span></span></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527104306.png" style="zoom: 50%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210527104901439.png" alt="image-20210527104901439" style="zoom:50%;" /><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527105743.png" style="zoom:50%;" /></blockquote></li></ul><h3 id="三个基本定理"><a class="header-anchor" href="#三个基本定理">¶</a>三个基本定理</h3><ul><li><p>代入定理：将逻辑等式两边的某一变量均用同一逻辑函数替代，等式仍然成立。</p></li><li><p>反演定理：任意逻辑函数式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>，将 “<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">⋅</span></span></span></span>&quot;换成 “+”，”+“换成”<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">⋅</span></span></span></span>&quot;，“0&quot;换成&quot;1”，“1&quot;换成&quot;0”，<strong>原变量换成反变量，反变量换成原变量</strong>，得到反函数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span></p><blockquote><p>不改变原运算次序，不属于单变量的反号要保留。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527094529.png" style="zoom:67%;" /></blockquote></li><li><p>对偶定理：若两逻辑式相等，则它们的对偶式也相等。</p><p>其中，对偶式：任意逻辑函数式<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>，将 “<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">⋅</span></span></span></span>&quot;换成 “+”，”+“换成”<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">⋅</span></span></span></span>&quot;，“0&quot;换成&quot;1”，“1&quot;换成&quot;0”，得到对偶式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>Y</mi><mi>D</mi></msup></mrow><annotation encoding="application/x-tex">Y^D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span></span></span></span></span></span></span></span></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527094804.png" style="zoom: 50%;" /></li></ul><h3 id="最小项"><a class="header-anchor" href="#最小项">¶</a>最小项</h3><p>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 个变量的逻辑函数共有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span> 个最小项</p><h3 id="卡诺图"><a class="header-anchor" href="#卡诺图">¶</a>卡诺图</h3><p>五变量卡诺图：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527110845.png" style="zoom: 67%;" /><h2 id="Chap-3-门电路"><a class="header-anchor" href="#Chap-3-门电路">¶</a>Chap 3. 门电路</h2><p>半导体三极管作为开关元件时工作在<strong>饱和</strong>状态和<strong>截止</strong>状态。</p><p>三态门的输出有三个状态：高电平、低电平、高阻态。</p><p><strong>集电极开路</strong>与非门（OC）门：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210526213859.png"/><p>在TTL电路中，OC门是可直接相连完成<strong>线与</strong>逻辑功能的门电路。（CMOS的OD门同理）</p><table><thead><tr><th>集成门电路</th><th>输出结构门电路</th><th>缺点</th><th>优点</th></tr></thead><tbody><tr><td>TTL（三极管-三极管逻辑）</td><td>OC门</td><td>功耗大</td><td>开关速度高，抗干扰能力强，带负载的能力强</td></tr><tr><td>CMOS（简称为HC）</td><td>OD门</td><td>工作速度稍低</td><td>制造工艺简单、<strong>功耗小</strong>、输入阻抗高、<strong>集成度高</strong>、电源电压范围宽等</td></tr></tbody></table><p>对于TTL门电路，输入电压小于0.4V，或者阻值小于0.7K欧，相当于接<strong>低电平</strong>；输入电压大于2.4V，相当于接高电平。</p><blockquote><p>门电路若出现“倒三角”符号，则属于三态门。若使能端无效，输出<strong>高阻态</strong>；若使能端有效，正常输出高低电平。</p></blockquote><p>对于CMOS门电路，高电平接近电源电压，低电平接近0V。</p><p>针对于<strong>悬空</strong>，TTL门电路的悬空相当于接入高电平，CMOS门电路<strong>不允许悬空</strong>。</p><p>【附】</p><p>存储器容量=字数*位数，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 条地址线，即有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>个存储空间（字数）；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span>条数据线，则有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 位。</p><h2 id="Chap-4-组合逻辑电路"><a class="header-anchor" href="#Chap-4-组合逻辑电路">¶</a>Chap 4. 组合逻辑电路</h2><h3 id="零、总表"><a class="header-anchor" href="#零、总表">¶</a>零、总表</h3><table><thead><tr><th>功能</th><th>型号</th></tr></thead><tbody><tr><td>优先编码器</td><td>74HC148</td></tr><tr><td>3线-8线译码器</td><td>74HC138</td></tr><tr><td>显示译码器</td><td>7448</td></tr><tr><td>双4选1数据选择器</td><td>74GC153</td></tr><tr><td>全加器</td><td>74HC183</td></tr></tbody></table><h3 id="一、编码器"><a class="header-anchor" href="#一、编码器">¶</a>一、编码器</h3><p><strong>逻辑功能</strong>：将输入的每一个高、低电平信号编成一个对应的二进制代码。（译码器反之）</p><p>普通编码器</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527185720.png" style="zoom:80%;" /><p>优先编码器，实例：74HC148</p><blockquote><p>允许多个输入端同时有效（低电平），优先级最高为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>I</mi><mn>7</mn></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{I_7}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：选通输入端；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mi>s</mi></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>：选通输出端；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mrow><mi>E</mi><mi>X</mi></mrow></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_{EX}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">EX</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>：输出拓展端</p></blockquote><p>⭐️正常工作：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover><mo>=</mo><mn>0</mn><mtext>，</mtext><mover accent="true"><msub><mi>Y</mi><mi>s</mi></msub><mo stretchy="true">‾</mo></mover><mo>=</mo><mn>1</mn><mtext>，</mtext><mover accent="true"><msub><mi>Y</mi><mrow><mi>E</mi><mi>X</mi></mrow></msub><mo stretchy="true">‾</mo></mover><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\overline{S}=0，\overline{Y_s}=1，\overline{Y_{EX}}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord cjk_fallback">，</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">EX</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527190627.png" style="zoom:80%;" /><blockquote><p>若要拓展多片，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mi>s</mi></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>相连，前一片无编码输入（输入全1）时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>Y</mi><mi>s</mi></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Y_s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>输出为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>为0</p></blockquote><h3 id="二、译码器"><a class="header-anchor" href="#二、译码器">¶</a>二、译码器</h3><h4 id="3线-8线译码器"><a class="header-anchor" href="#3线-8线译码器">¶</a>3线-8线译码器</h4><p>实例：74HC138</p><p>⭐️正常工作：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><mo>=</mo><mn>0</mn><mtext>，</mtext><mover accent="true"><msub><mi>S</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mo>+</mo><mover accent="true"><msub><mi>S</mi><mn>3</mn></msub><mo stretchy="true">‾</mo></mover><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">S_1=0，\overline{S_2}+\overline{S_3}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord cjk_fallback">，</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p><blockquote><p>要得到最小项表达式，需要对输出端进行与非</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527192002.png" style="zoom:80%;" /><blockquote><p>若拓展多片，增加一个输入端<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">D_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<strong>同时</strong>控制其中一片的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>S</mi><mn>2</mn></msub><mo stretchy="true">‾</mo></mover><mtext>、</mtext><mover accent="true"><msub><mi>S</mi><mn>3</mn></msub><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S_2}、\overline{S_3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03333em;vertical-align:-0.15em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span>以及另一片的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">S_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p></blockquote><h4 id="显示译码器"><a class="header-anchor" href="#显示译码器">¶</a>显示译码器</h4><p>实例：7448（输出高电平译码，配接共阴极数码管）</p><p>灭灯输入控制端<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>B</mi><mi>I</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{BI}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：无论输入状态如何，数码管熄灭</p><p>灭零输出端 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>R</mi><mi>B</mi><mi>O</mi></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{RBO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">RBO</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>：为零时，将本应显示的零熄灭</p><h3 id="三、数据选择器"><a class="header-anchor" href="#三、数据选择器">¶</a>三、数据选择器</h3><p>双4选1数据选择器74HC153</p><p><strong>逻辑功能</strong>：根据给定的输入地址代码，从一组输入信号中选出指定的一个送至输出端</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527195318.png" style="zoom: 67%;" /><h3 id="四、竞争与冒险"><a class="header-anchor" href="#四、竞争与冒险">¶</a>四、竞争与冒险</h3><ul><li><p>竞争：两个输入信号同时向相反的逻辑电平跳变</p></li><li><p>竞争-冒险：由于竞争而在电路输出端可能产生尖峰脉冲的现象。</p></li><li><p>消除竞争-冒险的方法：接入滤波电容、引入选通脉冲、修改逻辑设计。</p></li></ul><h2 id="Chap-5-触发器"><a class="header-anchor" href="#Chap-5-触发器">¶</a>Chap 5. 触发器</h2><p>触发器的<strong>空翻</strong>：在CP有效期间，若同步触发器的输入信号发生多次变化时，其输出状态也会相应产生多次变化。</p><h2 id="Chap-6-时序逻辑电路"><a class="header-anchor" href="#Chap-6-时序逻辑电路">¶</a>Chap 6. 时序逻辑电路</h2><p>基本单元：触发器</p><p>时序逻辑电路通常包含组合电路和存储电路</p><p>按<strong>输出信号特点分类</strong>：</p><ul><li>米利型：与输入信号有关</li><li>穆尔型：输出信号只取决于电路的状态</li></ul><p>逻辑电路的方程组：输出方程、驱动方程、状态方程</p><p>状态转换表：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210527201851.png" style="zoom:80%;" /><p>总表：</p><table><thead><tr><th>功能</th><th>型号</th></tr></thead><tbody><tr><td>双向移位寄存器</td><td>74HC194A</td></tr><tr><td>同步十进制加法计数器</td><td>74LS160</td></tr><tr><td>4位（16进制）同步二进制计数器</td><td>74LS161（ET=0时，保持且C=0）</td></tr><tr><td>集成同步十进制可逆计数器</td><td>74LS190</td></tr><tr><td>四位二进制可逆计数器</td><td>74LS191</td></tr></tbody></table><p>任意进制<strong>设计</strong>方法：</p><ol><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>&lt;</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">M&lt;N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>：置零法、置数法、进位C置数法（置位法）</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>&gt;</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">M&gt;N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>：整体清零法或整体置数法、分解法</p></li></ol><p>芯片<strong>级联</strong>方法：</p><p>串行进位方式、并行进位方式</p><h2 id="Chap-7-FPGA"><a class="header-anchor" href="#Chap-7-FPGA">¶</a>Chap 7. FPGA</h2><p>可编程逻辑器件（PLD）及专用集成电路（ASIC）的出现，设计方式转变为“电子设计自动化”（Electronic Design Automation，EDA）。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210526212707.png"/><blockquote><p>CPLD — Complex Programmable Logic Device ，复杂可编程逻辑器件</p><p>FPGA — Field Programmable Gate Array 现场可编程门阵列，一种集成电路芯片</p></blockquote><p>其中，硬件描述语言（HDL）是EDA技术的重要组成部分，常见的硬件描述语言包括Verilog、VHDL等。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210526212737.png"/><p>模块(module)是Verilog HDL 语言中描述电路的基本单元，而模块的两种描述方式：行为描述方式、结构描述方式。</p><h3 id="Verilog"><a class="header-anchor" href="#Verilog">¶</a>Verilog</h3><p>**零、**模板</p><blockquote><p>设计</p></blockquote><blockquote><p>设计具有异步清零端的上升沿触发的T触发器</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> tff_aync_reset(t, clk, reset, q);<br>    <span class="hljs-keyword">input</span> t, clk, reset;<br>    <span class="hljs-keyword">output</span> q;<br>    <span class="hljs-keyword">reg</span> q;<br>    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> reset)<br>        <span class="hljs-keyword">if</span>(~reset)<br>            <span class="hljs-keyword">begin</span><br>                q &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>            <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">begin</span><br>                q &lt;= !q;<br>            <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>**一、**数据类型若不做说明的话，默认是 <code>wire</code> 型的（电路间的连线）</p><p><strong>二、</strong><code>assign</code> 语句作为连续赋值语句（即总处于激活状态），一旦表达式中操作数中<strong>有变化</strong>，立即计算、赋值。</p><blockquote><p>注意：赋值目标必须是 <code>wire</code> 型</p></blockquote><p><code>always</code> 语句又称过程块（不是总处于激活状态），当满足激活条件时才能被执行，否则被挂起。</p><blockquote><p>注意：赋值目标必须是 <code>reg</code> 型</p></blockquote><p>其中，激活条件分两种：边沿敏感、电平敏感（即信号列表中任一个信号有变化）</p><p>此外，该过程块还能够使用 <code>if</code>、<code>case</code> 等行为描述语句，还能够描述边沿变化。</p><blockquote><p>当 <code>always</code> 语句块包含多条赋值语句需用：<code>begin</code> 和 <code>end</code> 包括起来，如：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">always</span> @(a, b, cin)<br><span class="hljs-keyword">begin</span><br>    s = a ^ b ^ cin;<br>    cout = (a &amp; b)|(a &amp; cin)|(b &amp; cin);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></blockquote><p>**三、**阻塞赋值 <code>=</code> 是语句顺序执行，前面执行完才能执行后面，如：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">赋值目标<span class="hljs-number">1</span> = 表达式<span class="hljs-number">1</span>;<br>赋值目标<span class="hljs-number">2</span> = 表达式<span class="hljs-number">2</span>; <span class="hljs-comment">//先执行</span><br></code></pre></td></tr></table></figure><p>非阻塞赋值 <code>&lt;=</code>：所有语句并行执行。</p><p><strong>四、<strong>逻辑性（关系）运算结果可能是 <code>1</code> 、<code>0</code>、</strong><code>x</code>（不确定）</strong>。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">Y = (<span class="hljs-number">3</span> &lt;= <span class="hljs-number">1&#x27;bx</span>); <span class="hljs-comment">//结果为x</span><br></code></pre></td></tr></table></figure><blockquote><p>当然，逻辑值还有 <code>z</code>（高阻态）</p></blockquote><p>区别 <code>==</code> 与 <code>===</code>（case等于），第一个运算符的结果是上述三种，而第二个运算符结果只能 <code>1</code> 或 <code>0</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">Y = (<span class="hljs-number">1&#x27;b1</span> == <span class="hljs-number">1&#x27;bx</span>); <span class="hljs-comment">//结果为x</span><br>Y = (<span class="hljs-number">1&#x27;b1</span> === <span class="hljs-number">1&#x27;bx</span>); <span class="hljs-comment">//结果为0</span><br>Y = (<span class="hljs-number">1&#x27;bx</span> === <span class="hljs-number">1&#x27;bx</span>); <span class="hljs-comment">//结果为1</span><br></code></pre></td></tr></table></figure><p><strong>五、</strong><code>&#123;&#125;</code> 为拼接复制运算符，能够将多个操作数拼接起来，举例如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> &#123;CO, S&#125; = A + B + CI;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Chap-1-数制和码制&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chap-1-数制和码制&quot;&gt;¶&lt;/a&gt;Chap 1. 数制和码制&lt;/h2&gt;
&lt;img src=&quot;https://gitee.com/j__strawhat/MyImages</summary>
      
    
    
    
    <category term="Computer Science" scheme="https://www.joydee.top/categories/Computer-Science/"/>
    
    <category term="计算机电路基础" scheme="https://www.joydee.top/categories/Computer-Science/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="电路" scheme="https://www.joydee.top/tags/%E7%94%B5%E8%B7%AF/"/>
    
    <category term="数电" scheme="https://www.joydee.top/tags/%E6%95%B0%E7%94%B5/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis 学习笔记</title>
    <link href="https://www.joydee.top/posts/c714d83/"/>
    <id>https://www.joydee.top/posts/c714d83/</id>
    <published>2021-03-07T05:38:53.000Z</published>
    <updated>2021-09-07T07:17:26.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-1-框架概述"><a class="header-anchor" href="#Chapter-1-框架概述">¶</a>Chapter 1. 框架概述</h1><h2 id="1-1-三层架构"><a class="header-anchor" href="#1-1-三层架构">¶</a>1.1 三层架构</h2><p>三层架构所包含的三层：</p><ul><li><strong>界面层</strong>（User Interface Layer）：主要功能为接收用户的数据，显示请求的处理结果。</li><li><strong>业务逻辑层</strong>（Business Logic Layer）：接收表示传递过来的数据，检查数据，计算业务逻辑，调用数据访问层获取数据。</li><li><strong>数据访问层</strong>（Data Access Layer）：与数据库打交道，主要实现对数据的增、删、改、查。将存储在数据库中的数据提交给业务层，同时将业务层处理的数据保存到数据库。</li></ul><p>处理请求的交互：</p><p>用户-&gt;界面层-&gt;业务逻辑层-&gt;数据访问层-&gt;DB数据库</p><h2 id="1-2-框架定义"><a class="header-anchor" href="#1-2-框架定义">¶</a>1.2 框架定义</h2><p>框架（Framework），是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法。另一种认为，框架可被应用开发者定制的应用骨架、模板。</p><p>简单的说，框架其实是半成品软件，就是一组组件，供你使用完成你自己的系统。但它是安全的，可复用的，不断升级的软件。</p><h2 id="1-3-常用框架"><a class="header-anchor" href="#1-3-常用框架">¶</a>1.3 常用框架</h2><ul><li>MyBatis 框架：基于 Java 的持久层框架，内部封装了 JDBC。它通过 XML 或 注解 两种方式将需执行的 SQL 语句配置起来，并通过 Java 对象和 SQL 的动态参数进行映射生成最终执行的 SQL 语句，最后再由 MyBatis 框架执行 SQL 并将结果映射到 Java 对象并返回</li><li>Spring 框架：解决业务对象与功能模块之间的耦合。Spring 是一个轻量级控制反转（IOC）和面向切面（AOP）的容器。</li><li>Spring MVC 框架：为 Spring 框架提供了构建 Web 应用程序的能力。</li></ul><h1 id="Chapter-2-MyBatis-概述"><a class="header-anchor" href="#Chapter-2-MyBatis-概述">¶</a>Chapter 2. MyBatis 概述</h1><h2 id="2-1-MyBatis-简介"><a class="header-anchor" href="#2-1-MyBatis-简介">¶</a>2.1 MyBatis 简介</h2><p>MyBatis 是一个优秀的基于 Java 的持久层框架，内部封装了 <strong>JDBC</strong>，开发者只需要关注 SQL 语句本身，而 MyBatis 已经代替开发者完成了这些任务：</p><ol><li><p>注册数据库的驱动，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>创建 JDBC 中必须使用的 <code>Connection</code>、<code>Statement</code>、<code>ResultSet</code> 对象。</p></li><li><p>从 XML 中获取 SQL 并执行 SQL 语句，将 <code>ResultSet</code> 结果转换为 Java 对象</p></li><li><p>关闭资源，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ResultSet.close();<br>Statement.close();<br>Connection.close();<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-2-快速入门"><a class="header-anchor" href="#2-2-快速入门">¶</a>2.2 快速入门</h2><h3 id="2-2-1-创建-MySQL-数据库的表（略）"><a class="header-anchor" href="#2-2-1-创建-MySQL-数据库的表（略）">¶</a>2.2.1 创建 MySQL 数据库的表（略）</h3><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210308162016315.png" alt="image-20210308162016315"></p><h3 id="2-2-2-创建-Maven-工程"><a class="header-anchor" href="#2-2-2-创建-Maven-工程">¶</a>2.2.2 创建 Maven 工程</h3><p>首先创建 Maven 空项目，再新建 Module，填写好坐标（gav）</p><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210308162451286.png" alt="image-20210308162451286"></p><h3 id="2-2-3-添加依赖"><a class="header-anchor" href="#2-2-3-添加依赖">¶</a>2.2.3 添加依赖</h3><p>在 <code>pom.xml</code> 中加入 MySQL、MyBatis 的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-4-加入Maven插件"><a class="header-anchor" href="#2-2-4-加入Maven插件">¶</a>2.2.4 加入Maven插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span> <span class="hljs-comment">&lt;!--包括目录下的 .properties、.xml 文件都会被扫描到--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-5-编写-Student-实体类"><a class="header-anchor" href="#2-2-5-编写-Student-实体类">¶</a>2.2.5 编写 Student 实体类</h3><p>在 domain 包中创建该文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;<br><span class="hljs-keyword">private</span> Integer id; <span class="hljs-comment">//属性名尽量与列名相同</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-6-编写-Dao-接口-StudentDao"><a class="header-anchor" href="#2-2-6-编写-Dao-接口-StudentDao">¶</a>2.2.6 编写 Dao 接口 StudentDao</h3><p>在 dao 包中创建该文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentDao</span> </span>&#123;<br>    <span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectStudents</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//查询所有数据</span><br>    <span class="hljs-function">Student <span class="hljs-title">selectStudentById</span><span class="hljs-params">(Integer id)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertStudent</span><span class="hljs-params">(Student student)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由于Mapper的动态代理方式，无需编写 Dao 的实现类</p></blockquote><h3 id="2-2-7-编写-Dao-接口-Mapper-映射文件来映射SQL语句"><a class="header-anchor" href="#2-2-7-编写-Dao-接口-Mapper-映射文件来映射SQL语句">¶</a>2.2.7 编写 Dao 接口 Mapper 映射文件来映射SQL语句</h3><p>注意：</p><ol><li>在 dao 包中创建文件 StudentDao.xml</li><li>StudentDao.xml <strong>文件名称</strong>要与接口 StudentDao 一样（区分大小写）</li></ol><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;top.JoyDee.dao.StudentDao&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--命名空间，应使用dao接口的全限定名称，实现与dao接口绑定，并隔离其他的不同语句--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudents&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;top.JoyDee.domain.Student&quot;</span>&gt;</span><br>        select id,name,email,age from student order by id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--将已映射的 select 语句匹配到对应名称、参数和返回类型的方法--&gt;</span><br>    <span class="hljs-comment">&lt;!--接下来，你就可以用top.JoyDee.dao.StudentDao.selectStudents()来调用这个映射语句了--&gt;</span><br><span class="hljs-comment">&lt;!--id即为dao接口的方法名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentById&quot;</span> <span class="hljs-attr">parameterType</span> = <span class="hljs-string">&quot;java.lang.Integer&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;top.JoyDee.domain.Student&quot;</span>&gt;</span><br>        select id,name,email,age from student where id = #&#123;studentId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertStudent&quot;</span>&gt;</span><br>        insert into student values(#&#123;id&#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;age&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在IDEA中可以设置代码模板：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210307133745919.png"/></blockquote><h3 id="2-2-8-创建-MyBatis-主配置文件"><a class="header-anchor" href="#2-2-8-创建-MyBatis-主配置文件">¶</a>2.2.8 创建 MyBatis 主配置文件</h3><p>在项目 src/main 下创建 resources 目录，然后在该目录下创建主配置文件 mabatis.xml（名称自定义）</p><blockquote><p>创建resources 目录时别忘记右键设置其为 resources root</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210419174151.png" style="zoom:67%;" /></blockquote><p>其内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--settings标签能够控制MyBatis全局行为--&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;settings&gt;</span><br><span class="hljs-comment">        设置MyBatis的输出日志</span><br><span class="hljs-comment">        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;</span><br><span class="hljs-comment">    &lt;/settings&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--设置别名，为 Java 类型设置一个缩写名字，降低冗余的全限定类名书写--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;top.JoyDee.domain&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--name:实体类所在的包名--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--sql mapper(sql映射文件)的位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--name:该包中的所有mapper.xml一次都能加载--&gt;</span><br>        <span class="hljs-comment">&lt;!--使用package的要求：</span><br><span class="hljs-comment">            1.mapper文件名和dao接口名必须完全一样，包括大小写</span><br><span class="hljs-comment">            2.mapper文件和dao接口必须在同一目录下</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;top.JoyDee.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-9-使用数据库属性配置文件"><a class="header-anchor" href="#2-2-9-使用数据库属性配置文件">¶</a>2.2.9 使用数据库属性配置文件</h3><p>为方便对数据库连接的管理，DB连接的“四要素”数据一般都存放在一个专门的属性文件中，而 MyBatis 主配置文件需从这个属性文件中读取这些数据，配置环境并获取数据源。</p><p>在 classpath 路径下的 resources 目录创建 jdbc.properties 文件（名称自定义）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/springdb?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-meta">jdbc.user</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><h3 id="2-2-10-创建-MyBatisUtil-工具类"><a class="header-anchor" href="#2-2-10-创建-MyBatisUtil-工具类">¶</a>2.2.10 创建 MyBatisUtil 工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>&#123;<br>    <span class="hljs-comment">//定义SqlSessionFactory</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory factory = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">static</span> &#123; <span class="hljs-comment">//使用静态代码块保证SqlSessionFactory是单例类</span><br>        String config = <span class="hljs-string">&quot;mybatis.xml&quot;</span>; <span class="hljs-comment">//mybatis主配置文件</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//使用Resources工具类来读取主配置文件</span><br>            InputStream in = Resources.getResourceAsStream(config);<br>            <span class="hljs-comment">//创建SqlSessionFactoryBuilder对象，目的是获取SqlSessionFactory</span><br>            factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(in);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//获取SqlSession，SqlSession能够执行SQL语句</span><br>        SqlSession sqlSession = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span>(factory != <span class="hljs-keyword">null</span>)&#123;<br>            sqlSession = factory.openSession();<br>        &#125;<br>        <span class="hljs-keyword">return</span> sqlSession;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-10-创建测试类"><a class="header-anchor" href="#2-2-10-创建测试类">¶</a>2.2.10 创建测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMyBatis</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectStudent</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//调用MyBatisUtils自定义工具类，获取SqlSession，从而执行SQL语句</span><br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        <span class="hljs-comment">//调用SqlSession的getMapper()方法，来获取代理对象，从而获取指定接口的实现类对象</span><br>        StudentDao dao = sqlSession.getMapper(StudentDao.class);<br>        List&lt;Student&gt; students = dao.selectStudents();<br>        <span class="hljs-keyword">for</span>(Student stu : students)&#123;<br>            System.out.println(stu);<br>        &#125;<br>        sqlSession.close();<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsertStudent</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        StudentDao dao = sqlSession.getMapper(StudentDao.class);<br>        <br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        student.setId(<span class="hljs-number">309</span>);<br>        student.setAge(<span class="hljs-number">20</span>);<br>        student.setName(<span class="hljs-string">&quot;Ace&quot;</span>);<br>        student.setEmail(<span class="hljs-string">&quot;ace@qq.com&quot;</span>);<br>        <br>        <span class="hljs-keyword">int</span> res = dao.insertStudent(student); <span class="hljs-comment">//传入对象</span><br>        sqlSession.commit();<br>        System.out.println(<span class="hljs-string">&quot;添加对象的数量:&quot;</span> + res);<br>        sqlSession.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="Chapter-3-MyBatis-对象分析"><a class="header-anchor" href="#Chapter-3-MyBatis-对象分析">¶</a>Chapter 3. MyBatis 对象分析</h1><h2 id="3-1-四个实例"><a class="header-anchor" href="#3-1-四个实例">¶</a>3.1 四个实例</h2><blockquote><p>当 MyBatis 与一些<strong>依赖注入框架</strong>（如 Spring），<code>SqlSession</code> 将被依赖注入框架创建并注入，此时就无需使用 <code>SqlSessionFactoryBuilder</code> 或者 <code>SqlSessionFactory</code>。</p></blockquote><h3 id="3-1-1-Resources-工具类"><a class="header-anchor" href="#3-1-1-Resources-工具类">¶</a>3.1.1 Resources 工具类</h3><p><code>Resources</code> 类，帮助开发者从类路径下、文件系统或一个 web URL 中加载资源文件。许多方法通过加载并解析资源文件，返回不同类型的IO流对象。</p><h3 id="3-1-2-SqlSessionFactoryBuilder-类"><a class="header-anchor" href="#3-1-2-SqlSessionFactoryBuilder-类">¶</a>3.1.2 SqlSessionFactoryBuilder 类</h3><p><code>SqlSessionFactoryBuilder</code> 有五个 <code>build()</code> 方法，每一种的方法能够让开发者从不同的资源中创建一个 <code>SqlSessionFactory</code> 实例，当 <code>SqlSessionFactory</code> 实例即工厂对象被创建后，<code>SqlSessionFactoryBuilder</code> 就完成了其使命，能够被销毁了。</p><h3 id="3-1-3-SqlSessionFactory-接口"><a class="header-anchor" href="#3-1-3-SqlSessionFactory-接口">¶</a>3.1.3 SqlSessionFactory 接口</h3><p><code>SqlSessionFactory</code> 接口对象是一个系统开销较大的对象，且是线程安全的，故<strong>一个应用只需一个</strong>该对象即可。</p><p>通过调用 <code>SqlSessionFactory</code> 接口的 <code>openSession()</code> 方法，就能够创建 <code>SqlSession</code> 对象了：</p><ul><li><code>openSession(true)</code>：创建一个有自动提交功能的 <code>SqlSession</code></li><li><code>openSession(false)</code> 或 <code>openSession()</code>：创建一个非自动提交功能（即需要手动提交）的 <code>SqlSession</code></li></ul><h3 id="3-1-4-SqlSession-接口"><a class="header-anchor" href="#3-1-4-SqlSession-接口">¶</a>3.1.4 SqlSession 接口</h3><p><code>SqlSession</code> 接口对象用于执行持久化操作。一个 <code>SqlSession</code> 对应着一次数据库会话，一次会话以 <code>SqlSession</code> 对象的创建开始，以 <code>SqlSession</code> 对象的关闭结束。</p><p>由于 <code>SqlSession</code> 接口对象是线程不安全的，故每次数据库会话结束前需马上调用其 <code>close()</code> 方法，将其关闭。若再次需要会话，则需要再次创建（在方法内部创建）</p><h2 id="3-2-MyBatis框架-Dao-代理"><a class="header-anchor" href="#3-2-MyBatis框架-Dao-代理">¶</a>3.2 MyBatis框架 Dao 代理</h2><p>MyBatis 框架抛开了 Dao 的实现类，直接定位到映射文件 mapper 中的相应 SQL 语句，对DB进行操作，这种对 Dao 的实现方式称为 Mapper 的动态代理方式。</p><p>Mapper 动态代理方式，无需开发者去实现 Dao 接口，而是由 MyBatis 结合映射文件 mapper 来自动生成的动态代理来实现的。故，只需要调用 <code>SqlSession</code> 的 <code>getMapper()</code> 方法，就能够获取指定接口的<strong>实现类对象</strong>，注意该方法参数为指定 Dao 接口类的 <code>class</code> 值，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">SqlSession session = factory.openSession(); <span class="hljs-comment">//获取session</span><br>StudentDao dao = session.getMapper(StudentDao.class);<br></code></pre></td></tr></table></figure><h1 id="Chapter-4-XML映射器"><a class="header-anchor" href="#Chapter-4-XML映射器">¶</a>Chapter 4. XML映射器</h1><blockquote><p>&quot;MyBatis的真正强大在于它的语句映射……让用户能更专注于SQL代码”。</p></blockquote><p>SQL 映射文件有以下这些顶级元素：</p><ul><li><code>&lt;cache&gt;</code></li><li><code>&lt;cache-ref&gt;</code></li><li><strong><code>&lt;resultMap&gt;</code></strong>：描述如何从数据库结果集中，加载对象，是最强大的元素！</li><li><code>&lt;insert&gt;</code>/<code>&lt;update&gt;</code>/<code>&lt;delete&gt;</code>/<code>&lt;select&gt;</code> ：映射插入/更新/删除/查询语句。</li></ul><h2 id="4-1-理解参数"><a class="header-anchor" href="#4-1-理解参数">¶</a>4.1 理解参数</h2><h2 id="4-2-结果映射"><a class="header-anchor" href="#4-2-结果映射">¶</a>4.2 结果映射</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chapter-1-框架概述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chapter-1-框架概述&quot;&gt;¶&lt;/a&gt;Chapter 1. 框架概述&lt;/h1&gt;
&lt;h2 id=&quot;1-1-三层架构&quot;&gt;&lt;a class=&quot;header-anchor&quot;</summary>
      
    
    
    
    <category term="DataBase" scheme="https://www.joydee.top/categories/DataBase/"/>
    
    <category term="MyBatis" scheme="https://www.joydee.top/categories/DataBase/MyBatis/"/>
    
    
    <category term="DataBase" scheme="https://www.joydee.top/tags/DataBase/"/>
    
    <category term="SQL" scheme="https://www.joydee.top/tags/SQL/"/>
    
    <category term="MyBatis" scheme="https://www.joydee.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>「Spring系列笔记」SpringBoot 2.0</title>
    <link href="https://www.joydee.top/posts/a053ea21/"/>
    <id>https://www.joydee.top/posts/a053ea21/</id>
    <published>2021-03-05T08:02:00.000Z</published>
    <updated>2021-09-07T07:17:26.203Z</updated>
    
    <content type="html"><![CDATA[<p>选择 Spring Initializer</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305160654.png"/><p>父项目无需选择任何一个 Dependencies ，因为它不会作为一个具体项目去使用，而是供具体的子模块来继承。然后在父项目的 <code>pom.xml</code> 中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305184316.png"/><blockquote><p>若不添加该节点，则打包子模块时会报错</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305161917.png"/><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305162016.png"/><p>子模块记得让 Maven 来 <code>Enable Auto-Import</code></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305162304.png"/><p>此时，需要修改子项目中的继承方式：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305162748.png"/><p>修改后，继承关系为：spring_initializer ——&gt; springboot_parent ——&gt; <code>spring-boot-starter-parent</code></p><blockquote><p>继承后的好处：</p><p>修改SpringBoot 版本号，只需更改 parent 的 <code>pom.xml</code> 即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!--更改此处的版本号即可--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210305212623163.png" alt="image-20210305212623163"></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305163735.png"/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> top.joydee.controllers;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/sayhello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHello</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, SpringBoot!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305164008.png"/><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"> .   ____          _            __ _ _<br> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \<br>( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \<br> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )<br>  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /<br> =========|_|==============|___/=/_/_/_/<br> :: Spring Boot ::                (v2.4.3)<br><br>2021-03-05 16:39:25.956  INFO 15928 --- [           main] t.j.SpringInitializerDemoApplication     : Starting SpringInitializerDemoApplication using Java 15 on DESKTOP-TUSDBAD with PID 15928 (E:\springboot_parent\spring_initializer_demo\target\classes started by luffy in E:\springboot_parent)<br>2021-03-05 16:39:25.959  INFO 15928 --- [           main] t.j.SpringInitializerDemoApplication     : No active profile set, falling back to default profiles: default<br>2021-03-05 16:39:26.763  INFO 15928 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)<br>2021-03-05 16:39:26.781  INFO 15928 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]<br>2021-03-05 16:39:26.782  INFO 15928 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.43]<br>2021-03-05 16:39:26.829  INFO 15928 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext<br>2021-03-05 16:39:26.830  INFO 15928 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 825 ms<br>2021-03-05 16:39:26.931  INFO 15928 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#x27;applicationTaskExecutor&#x27;<br>2021-03-05 16:39:27.060  INFO 15928 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#x27;&#x27;<br>2021-03-05 16:39:27.068  INFO 15928 --- [           main] t.j.SpringInitializerDemoApplication     : Started SpringInitializerDemoApplication in 1.561 seconds (JVM running for 2.483)<br>2021-03-05 16:40:47.192  INFO 15928 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#x27;dispatcherServlet&#x27;<br>2021-03-05 16:40:47.192  INFO 15928 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#x27;dispatcherServlet&#x27;<br>2021-03-05 16:40:47.193  INFO 15928 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms<br></code></pre></td></tr></table></figure><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305164114.png"/><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210305211648.png"/><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210305222504587.png" alt="image-20210305222504587"></p><p>在相应的模块中加这个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--生成META-INF元数据，用于提供IDEA自动提示配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--依赖不会传播（继承关系上）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210305222236595.png" alt="image-20210305222236595"></p><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210305223956396.png" alt="image-20210305223956396"></p><blockquote><p>要先启动一次，让 classes 目录生成 META-INF ，IDEA才能自动提示</p></blockquote><p>yml 写法演示</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">user:</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">张三</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-string">$&#123;random.int[100,200]&#125;</span> <span class="hljs-comment">#逗号别加空格</span><br>  <span class="hljs-attr">birthday:</span> <span class="hljs-number">2001</span><span class="hljs-string">/01/07</span><br>  <span class="hljs-attr">hobbies:</span> [<span class="hljs-string">睡觉</span>, <span class="hljs-string">学习</span>]<br><span class="hljs-comment">#    - 睡觉</span><br><span class="hljs-comment">#    - 学习</span><br>  <span class="hljs-attr">score:</span> &#123;<span class="hljs-attr">Math :</span> <span class="hljs-number">94.0</span>, <span class="hljs-attr">Chinese :</span> <span class="hljs-number">100.0</span>, <span class="hljs-attr">English :</span> <span class="hljs-number">94.0</span>&#125;<br>  <span class="hljs-attr">address:</span><br>    <span class="hljs-attr">id:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">desc:</span> <span class="hljs-string">$&#123;user.username&#125;的家在广州</span><br><span class="hljs-comment"># 它不支持 SPEL，只支持属性占位符</span><br><br><span class="hljs-comment"># score:</span><br><span class="hljs-comment">#    高等数学: 94.0</span><br><span class="hljs-comment">#    线性代数: 100.0</span><br><span class="hljs-comment">#    概率论与数理统计: 94.0</span><br></code></pre></td></tr></table></figure><p>热部署</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>IDEA 配置：</p><p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/image-20210305235115522.png" alt="image-20210305235115522"></p><p>ctrl + shift + alt + / ,选择Registry,勾上 Compiler autoMake allow when app running</p><p>指定 webapp 作为编译的位置？</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210306153825.png"/>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;选择 Spring Initializer&lt;/p&gt;
&lt;img src=&quot;https://gitee.com/j__strawhat/MyImages/raw/master/20210305160654.png&quot;/&gt;
&lt;p&gt;父项目无需选择任何一个 Dependencies ，</summary>
      
    
    
    
    <category term="Java后端" scheme="https://www.joydee.top/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Spring系列" scheme="https://www.joydee.top/categories/Java%E5%90%8E%E7%AB%AF/Spring%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="JavaWeb" scheme="https://www.joydee.top/tags/JavaWeb/"/>
    
    <category term="Maven" scheme="https://www.joydee.top/tags/Maven/"/>
    
    <category term="SpringBoot" scheme="https://www.joydee.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>「JavaWeb学习笔记08」项目管理工具 Maven</title>
    <link href="https://www.joydee.top/posts/5a0e1b6f/"/>
    <id>https://www.joydee.top/posts/5a0e1b6f/</id>
    <published>2021-03-03T07:34:40.000Z</published>
    <updated>2021-09-07T07:17:26.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chapter-13-Maven"><a class="header-anchor" href="#Chapter-13-Maven">¶</a>Chapter 13. Maven</h1><h2 id="13-1-Maven-概述"><a class="header-anchor" href="#13-1-Maven-概述">¶</a>13.1 Maven 概述</h2><blockquote><p>传统项目开发中，需要数量众多的 jar 包，需手动下载并引入，同时，jar 包有版本兼容的问题，一个 jar 包可能要依赖其他的 jar 包，需要手动解决。此外，多个项目间需要的 jar 包有可能重复。</p></blockquote><p>Maven 是 Apache 软件基金会组织维护的一款自动化构建工具，专注服务于 Java 平台的项目构建和依赖管理，对生产环境下多框架、多模块整合开发有重要作用。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304223736.png" style="zoom:80%;" /><ul><li>项目设置遵循统一的规则</li><li>任意工程中<strong>共享</strong></li><li>整合多个项目之间的引用关系</li><li>提供规范的管理各个常用的 <strong>jar 包及其各个版本</strong>，并且可以自动下载和引入项目中</li><li>能够将 jar 包所依赖的其他 jar 包自动下载并引入项目中</li></ul><h2 id="13-2-Maven-环境配置"><a class="header-anchor" href="#13-2-Maven-环境配置">¶</a>13.2 Maven 环境配置</h2><p>首先要确保 Java 已经安装并且配好系统变量 <code>JAVA_HOME</code></p><h3 id="13-2-1-Maven-下载"><a class="header-anchor" href="#13-2-1-Maven-下载">¶</a>13.2.1 Maven 下载</h3><p>下载地址：<a href="https://maven.apache.org/docs/history.html">https://maven.apache.org/docs/history.html</a>。笔者下载的是 <code>apache-maven-3.3.9-bin.zip</code>。</p><p>下载完后，解压到自定义（不含中文）的路径，得到 Maven 的目录树如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">apache-maven-3.3.9/<br>├── bin/               # 存放Maven的命令<br>│   ├── ...<br>│   └── mvn.cmd        # Windows命令脚本，执行Maven的构建项目<br>├── boot/              # 存放一些Maven本身的引导程序，如类加载器等<br>├── conf/              # 存放Maven的一些配置文件<br>│   ├── ...<br>│   └── settings.xml   # Maven的配置文件<br>├── lib/               # Maven本身运行所需的一些jar包<br>├── LICENSE            <br>├── NOTICE<br>└── README.txt<br></code></pre></td></tr></table></figure><h3 id="13-2-2-设置-Maven-环境变量"><a class="header-anchor" href="#13-2-2-设置-Maven-环境变量">¶</a>13.2.2 设置 Maven 环境变量</h3><p>新建系统变量 <code>MAVEN_HOME</code>，变量值为你的解压目录。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304142433.png"/><p>编辑系统变量 <code>Path</code>，添加变量值：<code>%MAVEN_HOME%\bin</code></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210303234020.png"/><p>要检查 Maven 是否安装成功，在 CMD 中输入命令：<code>mvn -v</code></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304142526.png"/><h2 id="13-3-Maven-工程"><a class="header-anchor" href="#13-3-Maven-工程">¶</a>13.3 Maven 工程</h2><h3 id="13-3-1-Maven-工程约定目录结构"><a class="header-anchor" href="#13-3-1-Maven-工程约定目录结构">¶</a>13.3.1 Maven 工程约定目录结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">你的项目/<br>├── src/                 # 源代码<br>│   ├── main             <br>│   │   ├──java          # 放入项目的源码<br>│   │   ├──webapp        # 页面素材（若是普通的JavaSE项目，无需有该目录）<br>│   │   └──resources     # 存放项目资源文件<br>│   └── test<br>│       ├──java          # 测试的源码<br>│       └──resources     # 存放测试资源文件<br>├── target/              # 项目输出的位置，存放编译生成的文件<br>├── ...<br>└── pom.xml              # Maven 项目核心配置文件<br></code></pre></td></tr></table></figure><blockquote><p>进入目录（当前目录有 <code>pom.xml</code>）后，可在CMD窗口输入 <code>tomcat:run</code> 命令运行 Maven 项目。根据提示信息，通过浏览器访问相应虚拟路径即可。</p></blockquote><h3 id="13-3-2-POM-文件"><a class="header-anchor" href="#13-3-2-POM-文件">¶</a>13.3.2 POM 文件</h3><p><strong>POM</strong>（Project Object Model，项目对象模型），是 Maven 工程的基本工作单元，是一个 XML 文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖等。</p><p>执行任务或目录时，Maven 会在当前目录中查找 <code>pom.xml</code> ，读取它，获取所需的配置信息然后执行目标。</p><table><thead><tr><th>节点</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td><code>modelVersion</code></td><td>模型版本需要设置为 4.0。</td><td></td></tr><tr><td><code>groupId</code></td><td>工程组的标识，在一个组织或项目中通常唯一。<br>一般是<code>域名的倒写+项目组名</code>，如：<code>com.baidu.appolo</code></td><td></td></tr><tr><td><code>artifactId</code></td><td>项目（模块）名称，对应 <code>groupId</code> 中<br>项目中的子项目</td><td></td></tr><tr><td><code>version</code></td><td>项目的版本号（<strong>三位</strong>数字标识），若项目<br/>还在开发中（不稳定版本），通常在版本号<br/>中带 <code>-SNAPSHOT</code></td><td></td></tr><tr><td><code>dependencies</code><br><code>dependency</code></td><td>项目有可能依赖某些 jar 包。使用该标签配置时，<br>而这种依赖配置正通过坐标来定位的。</td><td>依赖</td></tr><tr><td><code>properties</code></td><td>定义一些配置属性，可设置源码编码方式<br>（<code>project.build.sourceEncoding</code>）、<br>编译代码或运行程序所使用的JDK版本、<br>构建版本号（如<code>spring.version</code>）等</td><td>配置属性</td></tr><tr><td><code>build</code></td><td>表示与构建相关的配置，<br>如设置编译插件的 JDK 版本</td><td>构建</td></tr><tr><td><code>parent</code></td><td>多个模块需声明相同的配置，<br>来继承父工程的 POM 配置</td><td>继承`</td></tr></tbody></table><p><code>groupId</code>、<code>artifactId</code>、<code>version</code> 这一组向量定义了一个 Maven 项目的基本<strong>坐标</strong>（gav），使得从众多 Maven 项目中可<strong>唯一定位</strong>。同时，坐标也决定了将来项目在仓库中的路径及名称。</p><p>关于 <code>pom.xml</code> 的更详细信息，见<a href="https://www.runoob.com/maven/maven-pom.html">此教程</a></p><h2 id="13-4-仓库"><a class="header-anchor" href="#13-4-仓库">¶</a>13.4 仓库</h2><p>Maven 仓库是项目中依赖的第三方库，这个库所在的位置叫做仓库。它能够帮助我们管理构建（主要是 jar），放置所有 jar 文件（war、zip、pom 等）的地方。</p><p>Maven 仓库有以下几种类型：</p><h3 id="13-4-1-本地仓库"><a class="header-anchor" href="#13-4-1-本地仓库">¶</a>13.4.1 本地仓库</h3><p>Maven 的本地仓库，是在第一次执行 Maven 命令的时候才被创建。</p><p>运行 Maven 的时候，Maven 所需的任何构建优先从本地仓库寻找，若没有找到，则尝试从远程仓库下载构建至本地仓库，然后再使用本地仓库的构建。</p><p>要修改本地仓库默认位置，需在 <code>%MAVEN_HOME%\conf</code> 目录下的 <code>settings.xml</code> 文件定义另一个路径：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:/maven_repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="13-4-2-远程仓库"><a class="header-anchor" href="#13-4-2-远程仓库">¶</a>13.4.2 远程仓库</h3><p>远程仓库，需通过网络才能使用，可以为多个电脑共享使用。</p><ul><li><p>中央仓库：由 Maven 社区提供的仓库，其中包含了绝大多数流行的开源Java构件，以及源码、作者信息、SCM、信息、许可证信息等。</p></li><li><p>中央仓库的镜像：：架设在不同位置，每个洲都有若干的服务器，为中央仓库分担流量。它能够减轻中央仓库的访问，下载的压力。所在洲的用户首先访问的是本洲的镜像服务器。</p><blockquote><p>配置阿里云仓库，可以在 <code>%MAVEN_HOME%\conf\settings.xml</code> 中的 **<code>mirrors</code>**节点上添加内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><p>详见，可参考<a href="https://blog.0x233.cn/2017/02/03/aliyun-maven-mirror-usage/">这篇博客文章</a></p></blockquote></li><li><p>私服：在局域网环境中部署的服务器，为当前局域网范围内的所有 Maven工程服务。（公司中常使用）</p></li></ul><h3 id="13-4-3-Maven-依赖搜索顺序"><a class="header-anchor" href="#13-4-3-Maven-依赖搜索顺序">¶</a>13.4.3 Maven 依赖搜索顺序</h3><p>当我们执行 Maven 构建命令时，Maven 开始按照以下顺序查找依赖的库：</p><ul><li><strong>步骤 1</strong> － 在<strong>本地仓库</strong>中搜索，如果找不到，执行步骤 2，如果找到了则执行其他操作。</li><li><strong>步骤 2</strong> － 在<strong>中央仓库</strong>中搜索，如果找不到，并且有一个或多个远程仓库已经设置，则执行步骤 4，如果找到了则下载到本地仓库中以备将来引用。</li><li><strong>步骤 3</strong> － 如果远程仓库没有被设置，Maven 将简单的停滞处理并抛出错误（无法找到依赖的文件）。</li><li><strong>步骤 4</strong> － 在一个或多个<strong>远程仓库</strong>中搜索依赖的文件，如果找到则下载到本地仓库以备将来引用，否则 Maven 将停止处理并抛出错误（无法找到依赖的文件）。</li></ul><h2 id="13-5-Maven-指令的生命周期"><a class="header-anchor" href="#13-5-Maven-指令的生命周期">¶</a>13.5 Maven 指令的生命周期</h2><h3 id="Maven-常用命令"><a class="header-anchor" href="#Maven-常用命令">¶</a>Maven 常用命令</h3><blockquote><p>以下命令，必须在命令行进入 <code>pom.xml</code> 所在目录时，方能执行。</p></blockquote><ul><li><code>mvn clean</code>：清理 (会删除原来编译和测试的目录，即 target目录，但是已经 install到仓库里的包不会删除 )</li><li><code>mvn compile</code>：编译主程序 (会在当前目录下生成一个 target,里边存放编译主程序之后生成的字节码文件 )</li><li><code>mvn test compile</code>：编译测试程序 (会在当前目录下生成一个 target,里边存放编译测试程序之后生成的字节码文件 )</li><li><code>mvn test</code>：测试 (会生成一个目录 <code>surefire-reports</code>，保存测试结果 )</li><li><code>mvn package</code>：打包主程序 (会编译、编译测试、测试、并且按照 <code>pom.xml</code> 配置把主程序打包生成 jar 包或者 war 包 )</li><li><code>mvn install</code>：安装主程序 (会把本工程打包，并且按照本工程的坐标保存到本地仓库中 )</li><li><code>mvn deploy</code>：部署主程序 (会把本工程打包，按照本工程的坐标保存到本地库中，并且还会保存到私服仓库中。<br>还会自动把项目部署到 web 容器中 )。</li></ul><p>Maven 对项目构建过程分为三套相互独立的生命周期：</p><ul><li><p><strong>Clean Lifecycle</strong>：在进行真正的构建之前进行一些清理工作</p></li><li><p><strong>Default Lifecycle</strong>：构建的核心部分，编译，测试，打包，部署等</p><table><thead><tr><th style="text-align:left">阶段</th><th style="text-align:left">处理</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">验证 validate</td><td style="text-align:left">验证项目</td><td style="text-align:left">验证项目是否正确且所有必须信息是可用的</td></tr><tr><td style="text-align:left">编译 compile</td><td style="text-align:left">执行编译</td><td style="text-align:left">源代码编译在此阶段完成</td></tr><tr><td style="text-align:left">测试 Test</td><td style="text-align:left">测试</td><td style="text-align:left">使用适当的单元测试框架（例如JUnit）运行测试。</td></tr><tr><td style="text-align:left">包装 package</td><td style="text-align:left">打包</td><td style="text-align:left">创建JAR/WAR包如在 pom.xml 中定义提及的包</td></tr><tr><td style="text-align:left">检查 verify</td><td style="text-align:left">检查</td><td style="text-align:left">对集成测试的结果进行检查，以保证质量达标</td></tr><tr><td style="text-align:left">安装 install</td><td style="text-align:left">安装</td><td style="text-align:left">安装打包的项目到本地仓库，以供其他项目使用</td></tr><tr><td style="text-align:left">部署 deploy</td><td style="text-align:left">部署</td><td style="text-align:left">拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程</td></tr></tbody></table></li><li><p><strong>Site Lifecycle</strong>：生成项目报告，站点，发布站点。</p></li></ul><blockquote><p>在 IDEA 中右侧的 Maven 窗口，可直接点击相关指令</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304233557.png" style="zoom:67%;" /></blockquote><h2 id="13-6-依赖"><a class="header-anchor" href="#13-6-依赖">¶</a>13.6 依赖</h2><h3 id="13-6-1-引入依赖"><a class="header-anchor" href="#13-6-1-引入依赖">¶</a>13.6.1 引入依赖</h3><p>在 <a href="https://mvnrepository.com/">MVNREPOSITORY</a> 中搜索你需要的 jar ，复制其坐标（<code>groupId</code>、<code>artifactId</code>、<code>version</code> 等），到  <code>%MAVEN_HOME%\conf\settings.xml</code> 中的 **<code>dependencies</code>**节点上。</p><p>比如说：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="13-6-2-依赖范围"><a class="header-anchor" href="#13-6-2-依赖范围">¶</a>13.6.2 依赖范围</h3><p>依赖的范围：<code>compile</code>、<code>test</code>、<code>provided</code>，默认为 <code>compile</code></p><table><thead><tr><th></th><th><code>compile</code></th><th><code>test</code></th><th><code>provided</code></th></tr></thead><tbody><tr><td>对主程序是否有效</td><td>✔️</td><td>❌</td><td>✔️</td></tr><tr><td>对测试程序是否有效</td><td>✔️</td><td>✔️</td><td>✔️</td></tr><tr><td>是否参与打包</td><td>✔️</td><td>❌</td><td>❌</td></tr><tr><td>是否参与部署</td><td>✔️</td><td>❌</td><td>❌</td></tr></tbody></table><h2 id="13-7-Maven-在-IDEA-中的应用"><a class="header-anchor" href="#13-7-Maven-在-IDEA-中的应用">¶</a>13.7 Maven 在 IDEA 中的应用</h2><h3 id="13-7-1-IDEA的-Maven-配置"><a class="header-anchor" href="#13-7-1-IDEA的-Maven-配置">¶</a>13.7.1 IDEA的 Maven 配置</h3><h4 id="配置当前工程的设置"><a class="header-anchor" href="#配置当前工程的设置">¶</a>配置当前工程的设置</h4><p>在 File -&gt; Settings -&gt; Build,Execution,Deployment 中，设置如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>Maven home directory</td><td>Maven的安装目录</td></tr><tr><td>User settings file</td><td>Maven安装目录下的 <code>conf/setting.xml</code> 配置文件</td></tr><tr><td>Local repository</td><td>本机仓库的目录位置</td></tr></tbody></table><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304160414.png"/><p>此外，在 <code>Runner</code> 中设置 VM Options（默认情况下，Maven 项目创建时，会联网下载模板文件）：<code>-DarchetypeCatalog=internal</code></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304163143.png"/><h4 id="配置以后新建工程的设置"><a class="header-anchor" href="#配置以后新建工程的设置">¶</a>配置以后新建工程的设置</h4><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304161033.png"/><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304163217.png"/><h3 id="13-7-2-使用模板创建-Java-工程"><a class="header-anchor" href="#13-7-2-使用模板创建-Java-工程">¶</a>13.7.2 使用模板创建 Java 工程</h3><p>选择：<strong><code>maven-archetype-quickstart</code></strong></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304161637.png"/><blockquote><p>创建时，可对 <code>GroupId</code>、<code>ArtifactId</code>、<code>Version</code> 进行自定义设置。</p></blockquote><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304165450.png"/><blockquote><p>模板创建的目录结构不完整，需手动补齐并添加</p></blockquote><h3 id="13-7-3-使用模板创建-Web-工程"><a class="header-anchor" href="#13-7-3-使用模板创建-Web-工程">¶</a>13.7.3 使用模板创建 Web 工程</h3><p>选择：<strong><code>maven-archetype-webapp</code></strong></p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304182513.png"/><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304233952.png"/><h4 id="更改web-xml头文件版本号"><a class="header-anchor" href="#更改web-xml头文件版本号">¶</a>更改web.xml头文件版本号</h4><p>注意，IDEA创建 Maven 项目时，注意要修改 web.xml 头文件版本为4.0：</p><p>打开项目结构，然后如图修改 Web：</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210313133719.png"/><p>对新创建的 web.xml 随便取个名（为了触发内容的更改），点击确定得到该文件后再重命名为 web.xml 即可。</p><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210313133928.png"/><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210313134147.png"/><blockquote><p>若要更改默认的版本，具体方法参考<a href="https://blog.csdn.net/BaiMaTanHuaL/article/details/89384063">此篇文章</a></p></blockquote><h3 id="13-7-4-重新加载依赖"><a class="header-anchor" href="#13-7-4-重新加载依赖">¶</a>13.7.4 重新加载依赖</h3><img src="https://gitee.com/j__strawhat/MyImages/raw/master/20210304190435.png" style="zoom:80%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Chapter-13-Maven&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Chapter-13-Maven&quot;&gt;¶&lt;/a&gt;Chapter 13. Maven&lt;/h1&gt;
&lt;h2 id=&quot;13-1-Maven-概述&quot;&gt;&lt;a class=&quot;hea</summary>
      
    
    
    
    <category term="Java后端" scheme="https://www.joydee.top/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    <category term="JavaWeb" scheme="https://www.joydee.top/categories/Java%E5%90%8E%E7%AB%AF/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="https://www.joydee.top/tags/JavaWeb/"/>
    
    <category term="Maven" scheme="https://www.joydee.top/tags/Maven/"/>
    
  </entry>
  
</feed>
